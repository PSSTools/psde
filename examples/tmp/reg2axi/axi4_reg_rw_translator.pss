/****************************************************************************
 * axi4_reg_rw_translator.pss
 * 
 * Translator graph that implements the reg_rw_if interface in terms of
 * the AXI protocol
 ****************************************************************************/
graph axi4_reg_rw_translator (
	export reg_rw_if	reg_ife,
	axi_if				axi	
	) {
		
	reg_ife.read_reg(int read_addr, output int read_data) := {
		rand axi4_trans_req  read_trans;
		axi4_trans_rsp read_rsp;
		
		// Declarations...
		constraint burst_c {
			read_trans.burst <= 2;
		}
		
		// Definition	
		read_reg := {
			// Inline constraint to force a read
			read_trans with { 
				is_write == 0;
				axi_addr == read_addr;
			};
			
			// Traverse the interface actions to start/complete the transaction
			axi.start_axi_trans(read_trans);
			axi.finish_axi_trans(read_rsp);
		
			// Deposit the read data to the output parameter	
			read_data <= read_rsp.axi_read_data;
		}
	}

	reg_ife.write_reg(int write_addr, int write_data) := {
		rand axi4_trans_req  write_trans;
		axi4_trans_rsp write_rsp;
		
		// Declarations...
		constraint burst_c {
			write_trans.burst <= 2;
		}
		
		// Definition	
		read_reg := {
			// Inline constraint to force a write
			write_trans with {
				is_write == 1;
				axi_addr == read_addr;
			};
			
			axi.start_axi_trans(write_trans);
			axi.finish_axi_trans(write_rsp);
		}
	}
}

