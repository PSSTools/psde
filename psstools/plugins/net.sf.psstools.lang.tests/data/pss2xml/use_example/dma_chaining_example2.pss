
package dma_api_pkg {
  
  enum memory_region_e {
    DDR,
    SRAM
  }
  
  struct dma_desc {
    bit[31:0]       src_addr;
    bit[31:0]       dst_addr;
   
    // Number of 32-bit words to transfer
    bit[15:0]       size;
    
    bit[31:0]       next_desc;
  }

  import void add_dma_descriptor(
    bit[31:0]       channel_id,
    bit[31:0]       desc_addr,
    dma_desc        desc
  );
  
  import bit[31:0] alloc_addr(memory_region_e region, bit[31:0] size);
  
}

component dma_c {
  import dma_api_pkg::*;
  
  resource struct dma_channel_s {
    constraint instance_id inside [0..30]; // 31 DMA channels
  }
  pool dma_channel_s dma_channels;
 
  // All actions pull from the channel pool
  bind dma_channels *;
  
  action add_dma_descriptor {
    rand bit[31:0]          channel_id;
    rand dma_desc           desc;
    rand memory_region_e    desc_region;
    bit[31:0]               desc_addr;
    rand memory_region_e    src_region;
    rand memory_region_e    dst_region;
    
    exec post_solve {
      desc_addr = alloc_addr(desc_region, 16);
      desc.src_addr = alloc_addr(src_region, desc.size*4);
      desc.dst_addr = alloc_addr(dst_region, desc.size*4);
    }
    
    exec body {
      add_dma_descriptor(channel_id, desc_addr, desc);
    }
  }
  
  action complete_dma_transfer {
    rand bit[31:0]           channel_id;
    
    exec body {
      execute_dma_queue(channel_id);
    }
  }
  
  action do_chained_transfer {
    lock dma_channel_s        channel;
    rand bit[1..256]          chain_len;
    add_dma_descriptor        add_desc;
    complete_dma_transfer     complete;
    
    constraint channel_id_c {
      add_desc.channel_id == channel.instance_id;
      complete.channel_id == channel.instance_id;
    }
    
    graph {
      repeat (i : chain_len) {
        add_desc;
      }
      
      complete;
    }
  }
}

component pss_top {
  dma_c           dma; // component must be instantiated to use actions
  
  action do_chained_transfers {
    rand bit[1..16]             num_chains;
    dma_c::do_chained_transfer  transfers[8];
    
    graph {
      repeat (num_chains) {
        parallel {
          transfers;
        }
      }
    }
  }
}

