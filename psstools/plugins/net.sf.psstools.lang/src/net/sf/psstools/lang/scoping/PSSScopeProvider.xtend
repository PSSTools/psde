/*
 * generated by Xtext 2.10.0
 */
package net.sf.psstools.lang.scoping

import java.util.ArrayList
import net.sf.psstools.lang.pSS.PSSPackage
import net.sf.psstools.lang.pSS.action_declaration
import net.sf.psstools.lang.pSS.action_super_spec
import net.sf.psstools.lang.pSS.component_declaration
import net.sf.psstools.lang.pSS.component_super_spec
import net.sf.psstools.lang.pSS.impl.type_identifierImpl
import net.sf.psstools.lang.pSS.type_identifier
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PSSScopeProvider extends AbstractPSSScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		System.out.println("getScope: " + context + " " + reference);
		val rootE = EcoreUtil2.getRootContainer(context);
		val rootR = rootE.eResource.contents
		
		if (context instanceof action_super_spec) {
			val action_super_spec ti = context as action_super_spec;
	
			val rootElement = EcoreUtil2.getRootContainer(context);
			System.out.println("rootElement=" + rootElement);
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, action_declaration);
			System.out.println("candidates=" + candidates);
//			return Scopes.sc
		} else if (context instanceof component_super_spec) {
			val rootElement = EcoreUtil2.getRootContainer(context);
			System.out.println("rootElement=" + rootElement.eContainer + " " + rootElement.eResource);
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, component_declaration);
			System.out.println("candidates=" + candidates);
			
			val candidate_t = new ArrayList<type_identifier>()
			for (c : candidates) {
				val ti = PSSPackage.eINSTANCE.EFactoryInstance.create(PSSPackage.eINSTANCE.gettype_identifier()) as type_identifier;
				ti.elems.add(c.name);
				candidate_t.add(ti)
			}
			
		
			val existingScope = Scopes.scopeFor(candidate_t);
			
			//return new FilteringScope(existingScope, [getEObjectOrProxy != context]);	
			return existingScope
		} else {
			
		}
		return super.getScope(context, reference);
	}

}
