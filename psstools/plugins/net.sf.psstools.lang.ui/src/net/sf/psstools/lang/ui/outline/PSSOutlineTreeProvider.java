/*
 * generated by Xtext 2.12.0
 */
package net.sf.psstools.lang.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;

import net.sf.psstools.lang.pSS.action_declaration;
import net.sf.psstools.lang.pSS.action_field_declaration;
import net.sf.psstools.lang.pSS.activity_action_traversal_stmt;
import net.sf.psstools.lang.pSS.activity_declaration;
import net.sf.psstools.lang.pSS.activity_stmt;
import net.sf.psstools.lang.pSS.component_declaration;
import net.sf.psstools.lang.pSS.component_field_declaration;
import net.sf.psstools.lang.pSS.constraint_declaration;
import net.sf.psstools.lang.pSS.coverspec_declaration;
import net.sf.psstools.lang.pSS.data_declaration;
import net.sf.psstools.lang.pSS.data_instantiation;
import net.sf.psstools.lang.pSS.enum_declaration;
import net.sf.psstools.lang.pSS.exec_block_stmt;
import net.sf.psstools.lang.pSS.function_decl;
import net.sf.psstools.lang.pSS.object_bind_stmt;
import net.sf.psstools.lang.pSS.overrides_declaration;
import net.sf.psstools.lang.pSS.struct_field_declaration;
import net.sf.psstools.lang.pSS.struct_type;
import net.sf.psstools.lang.pSS.typedef_declaration;

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
public class PSSOutlineTreeProvider extends DefaultOutlineTreeProvider {
	

	@Override
	protected boolean _isLeaf(EObject modelElement) {
		return super._isLeaf(modelElement);
	}


	public boolean _isLeaf(constraint_declaration e) { return true; }
	public boolean _isLeaf(typedef_declaration e) { return true; }
	public boolean _isLeaf(data_instantiation e) { return true; }
//	def _isLeaf(bins_declaration e) { true }
	public boolean _isLeaf(overrides_declaration e) { return true; }
	public boolean _isLeaf(enum_declaration e) { return true; }
	public boolean _isLeaf(object_bind_stmt e) { return true; }
	public boolean _isLeaf(exec_block_stmt e) { return true; }
	public boolean _isLeaf(function_decl e) { return true; }
	public boolean _isLeaf(activity_stmt e) { return true; }
	
	
	public void _createChildren(IOutlineNode parentNode, struct_type struct) {
		for (EObject child : struct.getBody()) {
			if (child instanceof struct_field_declaration) {
				struct_field_declaration field = (struct_field_declaration)child;
				for (EObject value : field.getDeclaration().getInstances()) {
					createNode(parentNode, value);
				}
			} else {
				createNode(parentNode, child);
			}
		}
	}
	
	public void _createChildren(IOutlineNode parentNode, activity_declaration activity) {
		for (EObject c : activity.getBody()) {
			if (c instanceof activity_action_traversal_stmt) {
				activity_action_traversal_stmt t = (activity_action_traversal_stmt)c;
				if (t.getItem() != null) {
					createNode(parentNode, t.getItem());
				} /* TODO: else {
					createNode(parentNode, t.getType());
				} */
			}
		}
	}

        public void _createChildren(IOutlineNode parentNode, action_declaration struct) {
                for (EObject child : struct.getBody()) {
                        if (child instanceof action_field_declaration) {
                                action_field_declaration field = (action_field_declaration)child;
                                for (EObject value : field.getDeclaration().getInstances()) {
                                        createNode(parentNode, value);
                                }
                        } else {
                                createNode(parentNode, child);
                        }
                }
        }

        public void _createChildren(IOutlineNode parentNode, coverspec_declaration cs) {
                for (EObject child : cs.getBody_items()) {
                        createNode(parentNode, child);
                }
        }

        public void _createChildren(IOutlineNode parentNode, component_declaration component) {
        	for (EObject child : component.getBody()) {
        		if (child instanceof component_field_declaration) {
        			component_field_declaration field = (component_field_declaration)child;

        			_createChildren(parentNode, field.getDeclaration());
        		} else {
        			if (!(child instanceof object_bind_stmt)) {
        				createNode(parentNode, child);
        			}
        		}
        	}
        }

        public void _createChildren(IOutlineNode parentNode, data_declaration dd) {
                for (data_instantiation child : dd.getInstances()) {
//                      System.out.println("data_instantiation: " + child.name);
                        createNode(parentNode, child);
                }
        }

}
