/*
* generated by Xtext
*/
package net.sf.psstools.lang.ui.outline

import net.sf.psstools.lang.pSS.action_declaration
import net.sf.psstools.lang.pSS.bins_declaration
import net.sf.psstools.lang.pSS.component_declaration
import net.sf.psstools.lang.pSS.component_field_declaration
import net.sf.psstools.lang.pSS.constraint_declaration
import net.sf.psstools.lang.pSS.data_declaration
import net.sf.psstools.lang.pSS.data_instantiation
import net.sf.psstools.lang.pSS.enum_declaration
import net.sf.psstools.lang.pSS.object_bind_stmt
import net.sf.psstools.lang.pSS.overrides_declaration
import net.sf.psstools.lang.pSS.struct_declaration
import net.sf.psstools.lang.pSS.struct_field_declaration
import net.sf.psstools.lang.pSS.typedef_declaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class PSSOutlineTreeProvider extends DefaultOutlineTreeProvider 
	implements IOutlineTreeProvider.Background {
	
	def _isLeaf(constraint_declaration e) { true }
//	def _isLeaf(symbol_definition e) { true }
	def _isLeaf(typedef_declaration e) { true }
	def _isLeaf(data_instantiation e) { true }
	def _isLeaf(action_declaration e) { true }
	def _isLeaf(bins_declaration e) { true }
//	def _isLeaf(bin_scheme_declaration e) { true }
	def _isLeaf(overrides_declaration e) { true }
	def _isLeaf(enum_declaration e) { true }
	def _isLeaf(object_bind_stmt e) { true }
	
	def _createChildren(IOutlineNode parentNode, struct_declaration struct) {
		for (EObject child : struct.body) {
			if (child instanceof struct_field_declaration) {
				var field = child as struct_field_declaration;
				for (EObject value : field.declaration.instances) {
					createNode(parentNode, value);
				}
			} else {
				createNode(parentNode, child);
			}
		}
	}
	
	def _createChildren(IOutlineNode parentNode, action_declaration struct) {
		for (EObject child : struct.body) {
			if (child instanceof struct_field_declaration) {
				var field = child as struct_field_declaration;
				for (EObject value : field.declaration.instances) {
					createNode(parentNode, value);
				}
			} else {
				createNode(parentNode, child);
			}
		}
	}
	
	def _createChildren(IOutlineNode parentNode, component_declaration component) {
		for (EObject child : component.body) {
			if (child instanceof component_field_declaration) {
				var field = child as component_field_declaration;
			
				_createChildren(parentNode, field.declaration);	
			} else {
				createNode(parentNode, child);
			}
		}
	}
	
	def _createChildren(IOutlineNode parentNode, data_declaration dd) {
		for (data_instantiation child : dd.instances) {
//			System.out.println("data_instantiation: " + child.name);
			createNode(parentNode, child);
		}
	}
}
