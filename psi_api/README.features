
- Need base type for all objects
  - Must be able to iterate through all objects
  - Need an 'is protected' flag? 
  
- Use context to create elements
  - mk_action
  - mk_package
  - mk_component
  - 
  
- dealing with errors?
  
- Must provide arguments to plug-ins
  - How do others do this? There's probably a Clang/Java/GCC precedent

- Add elements to context
  - add(package)
    - How do we deal with the base package?
  - add(component)
  - add(

- Do we allow elements to be modified after addition?
  - Probably want to make elements read-only after addition
- Do we allow elements to be removed/replaced after addition?
  - Let's not
  
- How will extension work?
  - Declare extensions in packages
  - Allow API client to specify that a package must be included in processing? 

- Declare package
  - Declare abstract action
  - Declare struct
  - Declare enum
  - Declare import class
  - Declare 
  
- Declare component
  - Declare action
  - Declare struct
  - Declare import class field
  - Declare 
  
- Declare action
  - Declare 

- Constraints
  - 
  
- Statements
  - 