/*
* generated by Xtext
*/
package net.sf.psstools.lang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.sf.psstools.lang.services.PSSGrammarAccess;

public class PSSParser extends AbstractContentAssistParser {
	
	@Inject
	private PSSGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.sf.psstools.lang.ui.contentassist.antlr.internal.InternalPSSParser createParser() {
		net.sf.psstools.lang.ui.contentassist.antlr.internal.InternalPSSParser result = new net.sf.psstools.lang.ui.contentassist.antlr.internal.InternalPSSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPortable_stimulus_descriptionAccess().getAlternatives(), "rule__Portable_stimulus_description__Alternatives");
					put(grammarAccess.getGraph_or_struct_declarationAccess().getAlternatives(), "rule__Graph_or_struct_declaration__Alternatives");
					put(grammarAccess.getGraph_struct_ifc_declarationAccess().getAlternatives(), "rule__Graph_struct_ifc_declaration__Alternatives");
					put(grammarAccess.getStruct_graph_body_itemAccess().getAlternatives(), "rule__Struct_graph_body_item__Alternatives");
					put(grammarAccess.getStruct_body_itemAccess().getAlternatives(), "rule__Struct_body_item__Alternatives");
					put(grammarAccess.getGraph_body_itemAccess().getAlternatives(), "rule__Graph_body_item__Alternatives");
					put(grammarAccess.getStmt_or_blockAccess().getAlternatives(), "rule__Stmt_or_block__Alternatives");
					put(grammarAccess.getStmt_primaryAccess().getAlternatives(), "rule__Stmt_primary__Alternatives");
					put(grammarAccess.getOverride_stmtAccess().getAlternatives(), "rule__Override_stmt__Alternatives");
					put(grammarAccess.getData_declarationAccess().getAlternatives(), "rule__Data_declaration__Alternatives");
					put(grammarAccess.getSigned_scalarAccess().getAlternatives_0(), "rule__Signed_scalar__Alternatives_0");
					put(grammarAccess.getScalar_signedAccess().getAlternatives_1(), "rule__Scalar_signed__Alternatives_1");
					put(grammarAccess.getDomain_specAccess().getAlternatives(), "rule__Domain_spec__Alternatives");
					put(grammarAccess.getConstraint_body_no_if_itemAccess().getAlternatives(), "rule__Constraint_body_no_if_item__Alternatives");
					put(grammarAccess.getConstraint_body_itemAccess().getAlternatives(), "rule__Constraint_body_item__Alternatives");
					put(grammarAccess.getExpression_or_dist_itemAccess().getAlternatives_1(), "rule__Expression_or_dist_item__Alternatives_1");
					put(grammarAccess.getConstraint_setAccess().getAlternatives(), "rule__Constraint_set__Alternatives");
					put(grammarAccess.getLogical_equality_exprAccess().getOpAlternatives_1_1_0(), "rule__Logical_equality_expr__OpAlternatives_1_1_0");
					put(grammarAccess.getLogical_inequality_exprAccess().getOpAlternatives_1_1_0(), "rule__Logical_inequality_expr__OpAlternatives_1_1_0");
					put(grammarAccess.getBinary_shift_exprAccess().getOpAlternatives_1_1_0(), "rule__Binary_shift_expr__OpAlternatives_1_1_0");
					put(grammarAccess.getBinary_add_sub_exprAccess().getOpAlternatives_1_1_0(), "rule__Binary_add_sub_expr__OpAlternatives_1_1_0");
					put(grammarAccess.getBinary_mul_div_mod_exprAccess().getOpAlternatives_1_1_0(), "rule__Binary_mul_div_mod_expr__OpAlternatives_1_1_0");
					put(grammarAccess.getUnary_exprAccess().getAlternatives_0(), "rule__Unary_expr__Alternatives_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAction_portlistAccess().getAlternatives_1(), "rule__Action_portlist__Alternatives_1");
					put(grammarAccess.getIo_directionAccess().getAlternatives(), "rule__Io_direction__Alternatives");
					put(grammarAccess.getSymbol_declarationAccess().getAlternatives(), "rule__Symbol_declaration__Alternatives");
					put(grammarAccess.getGraph_datatypeAccess().getAlternatives(), "rule__Graph_datatype__Alternatives");
					put(grammarAccess.getStruct_datatypeAccess().getAlternatives(), "rule__Struct_datatype__Alternatives");
					put(grammarAccess.getPrimitive_datatypeAccess().getAlternatives_0(), "rule__Primitive_datatype__Alternatives_0");
					put(grammarAccess.getInteger_typeAccess().getAlternatives(), "rule__Integer_type__Alternatives");
					put(grammarAccess.getDecimal_numberAccess().getAlternatives(), "rule__Decimal_number__Alternatives");
					put(grammarAccess.getGraph_declarationAccess().getGroup(), "rule__Graph_declaration__Group__0");
					put(grammarAccess.getGraph_declarationAccess().getGroup_2(), "rule__Graph_declaration__Group_2__0");
					put(grammarAccess.getGraph_declarationAccess().getGroup_2_1(), "rule__Graph_declaration__Group_2_1__0");
					put(grammarAccess.getGraph_declarationAccess().getGroup_2_1_1(), "rule__Graph_declaration__Group_2_1_1__0");
					put(grammarAccess.getGraph_declarationAccess().getGroup_3(), "rule__Graph_declaration__Group_3__0");
					put(grammarAccess.getPort_declarationAccess().getGroup(), "rule__Port_declaration__Group__0");
					put(grammarAccess.getStruct_declarationAccess().getGroup(), "rule__Struct_declaration__Group__0");
					put(grammarAccess.getStruct_declarationAccess().getGroup_2(), "rule__Struct_declaration__Group_2__0");
					put(grammarAccess.getSymbol_definitionAccess().getGroup(), "rule__Symbol_definition__Group__0");
					put(grammarAccess.getAlt_stmtAccess().getGroup(), "rule__Alt_stmt__Group__0");
					put(grammarAccess.getAlt_stmtAccess().getGroup_1(), "rule__Alt_stmt__Group_1__0");
					put(grammarAccess.getStmt_primaryAccess().getGroup_0(), "rule__Stmt_primary__Group_0__0");
					put(grammarAccess.getStmt_primaryAccess().getGroup_1(), "rule__Stmt_primary__Group_1__0");
					put(grammarAccess.getStmt_altAccess().getGroup(), "rule__Stmt_alt__Group__0");
					put(grammarAccess.getStmt_altAccess().getGroup_1(), "rule__Stmt_alt__Group_1__0");
					put(grammarAccess.getStmt_parallelAccess().getGroup(), "rule__Stmt_parallel__Group__0");
					put(grammarAccess.getStmt_parallelAccess().getGroup_1(), "rule__Stmt_parallel__Group_1__0");
					put(grammarAccess.getSeqAccess().getGroup(), "rule__Seq__Group__0");
					put(grammarAccess.getSeqAccess().getGroup_1(), "rule__Seq__Group_1__0");
					put(grammarAccess.getSeq_itemAccess().getGroup(), "rule__Seq_item__Group__0");
					put(grammarAccess.getSeq_itemAccess().getGroup_1(), "rule__Seq_item__Group_1__0");
					put(grammarAccess.getIfc_call_parameter_listAccess().getGroup(), "rule__Ifc_call_parameter_list__Group__0");
					put(grammarAccess.getIfc_call_parameter_listAccess().getGroup_1(), "rule__Ifc_call_parameter_list__Group_1__0");
					put(grammarAccess.getRepeat_stmtAccess().getGroup(), "rule__Repeat_stmt__Group__0");
					put(grammarAccess.getOverrides_declarationAccess().getGroup(), "rule__Overrides_declaration__Group__0");
					put(grammarAccess.getType_overrideAccess().getGroup(), "rule__Type_override__Group__0");
					put(grammarAccess.getInstance_overrideAccess().getGroup(), "rule__Instance_override__Group__0");
					put(grammarAccess.getData_declarationAccess().getGroup_0(), "rule__Data_declaration__Group_0__0");
					put(grammarAccess.getData_declarationAccess().getGroup_1(), "rule__Data_declaration__Group_1__0");
					put(grammarAccess.getData_declarationAccess().getGroup_2(), "rule__Data_declaration__Group_2__0");
					put(grammarAccess.getTypedef_declarationAccess().getGroup(), "rule__Typedef_declaration__Group__0");
					put(grammarAccess.getEnum_declarationAccess().getGroup(), "rule__Enum_declaration__Group__0");
					put(grammarAccess.getEnum_declarationAccess().getGroup_4(), "rule__Enum_declaration__Group_4__0");
					put(grammarAccess.getScalar_declarationAccess().getGroup(), "rule__Scalar_declaration__Group__0");
					put(grammarAccess.getScalar_declarationAccess().getGroup_1(), "rule__Scalar_declaration__Group_1__0");
					put(grammarAccess.getScalar_declarationAccess().getGroup_2(), "rule__Scalar_declaration__Group_2__0");
					put(grammarAccess.getScalar_declarationAccess().getGroup_2_2(), "rule__Scalar_declaration__Group_2_2__0");
					put(grammarAccess.getSigned_scalarAccess().getGroup(), "rule__Signed_scalar__Group__0");
					put(grammarAccess.getScalar_signedAccess().getGroup(), "rule__Scalar_signed__Group__0");
					put(grammarAccess.getDomain_specAccess().getGroup_0(), "rule__Domain_spec__Group_0__0");
					put(grammarAccess.getConstraint_declarationAccess().getGroup(), "rule__Constraint_declaration__Group__0");
					put(grammarAccess.getExpression_or_dist_itemAccess().getGroup(), "rule__Expression_or_dist_item__Group__0");
					put(grammarAccess.getExpression_or_dist_itemAccess().getGroup_1_0(), "rule__Expression_or_dist_item__Group_1_0__0");
					put(grammarAccess.getIf_constraint_itemAccess().getGroup(), "rule__If_constraint_item__Group__0");
					put(grammarAccess.getIf_constraint_itemAccess().getGroup_5(), "rule__If_constraint_item__Group_5__0");
					put(grammarAccess.getForeach_constraint_itemAccess().getGroup(), "rule__Foreach_constraint_item__Group__0");
					put(grammarAccess.getConstraint_setAccess().getGroup_1(), "rule__Constraint_set__Group_1__0");
					put(grammarAccess.getCondition_exprAccess().getGroup(), "rule__Condition_expr__Group__0");
					put(grammarAccess.getCondition_exprAccess().getGroup_1(), "rule__Condition_expr__Group_1__0");
					put(grammarAccess.getLogical_or_exprAccess().getGroup(), "rule__Logical_or_expr__Group__0");
					put(grammarAccess.getLogical_or_exprAccess().getGroup_1(), "rule__Logical_or_expr__Group_1__0");
					put(grammarAccess.getLogical_and_exprAccess().getGroup(), "rule__Logical_and_expr__Group__0");
					put(grammarAccess.getLogical_and_exprAccess().getGroup_1(), "rule__Logical_and_expr__Group_1__0");
					put(grammarAccess.getBinary_or_exprAccess().getGroup(), "rule__Binary_or_expr__Group__0");
					put(grammarAccess.getBinary_or_exprAccess().getGroup_1(), "rule__Binary_or_expr__Group_1__0");
					put(grammarAccess.getBinary_xor_exprAccess().getGroup(), "rule__Binary_xor_expr__Group__0");
					put(grammarAccess.getBinary_xor_exprAccess().getGroup_1(), "rule__Binary_xor_expr__Group_1__0");
					put(grammarAccess.getBinary_and_exprAccess().getGroup(), "rule__Binary_and_expr__Group__0");
					put(grammarAccess.getBinary_and_exprAccess().getGroup_1(), "rule__Binary_and_expr__Group_1__0");
					put(grammarAccess.getLogical_equality_exprAccess().getGroup(), "rule__Logical_equality_expr__Group__0");
					put(grammarAccess.getLogical_equality_exprAccess().getGroup_1(), "rule__Logical_equality_expr__Group_1__0");
					put(grammarAccess.getLogical_inequality_exprAccess().getGroup(), "rule__Logical_inequality_expr__Group__0");
					put(grammarAccess.getLogical_inequality_exprAccess().getGroup_1(), "rule__Logical_inequality_expr__Group_1__0");
					put(grammarAccess.getBinary_shift_exprAccess().getGroup(), "rule__Binary_shift_expr__Group__0");
					put(grammarAccess.getBinary_shift_exprAccess().getGroup_1(), "rule__Binary_shift_expr__Group_1__0");
					put(grammarAccess.getBinary_add_sub_exprAccess().getGroup(), "rule__Binary_add_sub_expr__Group__0");
					put(grammarAccess.getBinary_add_sub_exprAccess().getGroup_1(), "rule__Binary_add_sub_expr__Group_1__0");
					put(grammarAccess.getBinary_mul_div_mod_exprAccess().getGroup(), "rule__Binary_mul_div_mod_expr__Group__0");
					put(grammarAccess.getBinary_mul_div_mod_exprAccess().getGroup_1(), "rule__Binary_mul_div_mod_expr__Group_1__0");
					put(grammarAccess.getBinary_exp_exprAccess().getGroup(), "rule__Binary_exp_expr__Group__0");
					put(grammarAccess.getBinary_exp_exprAccess().getGroup_1(), "rule__Binary_exp_expr__Group_1__0");
					put(grammarAccess.getUnary_exprAccess().getGroup(), "rule__Unary_expr__Group__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2_1(), "rule__Primary__Group_2_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2_1_2(), "rule__Primary__Group_2_1_2__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup(), "rule__Interface_declaration__Group__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup_2(), "rule__Interface_declaration__Group_2__0");
					put(grammarAccess.getAction_declarationAccess().getGroup(), "rule__Action_declaration__Group__0");
					put(grammarAccess.getAction_declarationAccess().getGroup_3(), "rule__Action_declaration__Group_3__0");
					put(grammarAccess.getAction_declarationAccess().getGroup_3_1(), "rule__Action_declaration__Group_3_1__0");
					put(grammarAccess.getAction_portlistAccess().getGroup(), "rule__Action_portlist__Group__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup(), "rule__Graph_data_declaration__Group__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup_3(), "rule__Graph_data_declaration__Group_3__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup_3_2(), "rule__Graph_data_declaration__Group_3_2__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup_4(), "rule__Graph_data_declaration__Group_4__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup_4_2(), "rule__Graph_data_declaration__Group_4_2__0");
					put(grammarAccess.getGraph_data_declarationAccess().getGroup_4_2_2(), "rule__Graph_data_declaration__Group_4_2_2__0");
					put(grammarAccess.getSymbol_declarationAccess().getGroup_0(), "rule__Symbol_declaration__Group_0__0");
					put(grammarAccess.getSymbol_declarationAccess().getGroup_0_2(), "rule__Symbol_declaration__Group_0_2__0");
					put(grammarAccess.getSymbol_declarationAccess().getGroup_1(), "rule__Symbol_declaration__Group_1__0");
					put(grammarAccess.getSymbol_declarationAccess().getGroup_1_2(), "rule__Symbol_declaration__Group_1_2__0");
					put(grammarAccess.getSymbol_declarationAccess().getGroup_1_2_2(), "rule__Symbol_declaration__Group_1_2_2__0");
					put(grammarAccess.getPort_mapAccess().getGroup(), "rule__Port_map__Group__0");
					put(grammarAccess.getStruct_data_declarationAccess().getGroup(), "rule__Struct_data_declaration__Group__0");
					put(grammarAccess.getStruct_data_declarationAccess().getGroup_3(), "rule__Struct_data_declaration__Group_3__0");
					put(grammarAccess.getPrimitive_datatypeAccess().getGroup(), "rule__Primitive_datatype__Group__0");
					put(grammarAccess.getInteger_typeAccess().getGroup_0(), "rule__Integer_type__Group_0__0");
					put(grammarAccess.getInteger_typeAccess().getGroup_1(), "rule__Integer_type__Group_1__0");
					put(grammarAccess.getInteger_typeAccess().getGroup_1_2(), "rule__Integer_type__Group_1_2__0");
					put(grammarAccess.getHierarchical_idAccess().getGroup(), "rule__Hierarchical_id__Group__0");
					put(grammarAccess.getHierarchical_idAccess().getGroup_1(), "rule__Hierarchical_id__Group_1__0");
					put(grammarAccess.getModelAccess().getTopLevelAssignment(), "rule__Model__TopLevelAssignment");
					put(grammarAccess.getGraph_declarationAccess().getNameAssignment_1(), "rule__Graph_declaration__NameAssignment_1");
					put(grammarAccess.getGraph_declarationAccess().getPortsAssignment_2_1_0(), "rule__Graph_declaration__PortsAssignment_2_1_0");
					put(grammarAccess.getGraph_declarationAccess().getPortsAssignment_2_1_1_1(), "rule__Graph_declaration__PortsAssignment_2_1_1_1");
					put(grammarAccess.getGraph_declarationAccess().getSuperAssignment_3_1(), "rule__Graph_declaration__SuperAssignment_3_1");
					put(grammarAccess.getGraph_declarationAccess().getBodyAssignment_5(), "rule__Graph_declaration__BodyAssignment_5");
					put(grammarAccess.getPort_declarationAccess().getIfc_typeAssignment_1(), "rule__Port_declaration__Ifc_typeAssignment_1");
					put(grammarAccess.getPort_declarationAccess().getNameAssignment_2(), "rule__Port_declaration__NameAssignment_2");
					put(grammarAccess.getStruct_declarationAccess().getNameAssignment_1(), "rule__Struct_declaration__NameAssignment_1");
					put(grammarAccess.getStruct_declarationAccess().getSuperAssignment_2_1(), "rule__Struct_declaration__SuperAssignment_2_1");
					put(grammarAccess.getStruct_declarationAccess().getBodyAssignment_4(), "rule__Struct_declaration__BodyAssignment_4");
					put(grammarAccess.getSymbol_definitionAccess().getNameAssignment_0(), "rule__Symbol_definition__NameAssignment_0");
					put(grammarAccess.getSymbol_definitionAccess().getRuleAssignment_2(), "rule__Symbol_definition__RuleAssignment_2");
					put(grammarAccess.getAlt_stmtAccess().getRightAssignment_1_2(), "rule__Alt_stmt__RightAssignment_1_2");
					put(grammarAccess.getStmt_primaryAccess().getStmt_listAssignment_1_2(), "rule__Stmt_primary__Stmt_listAssignment_1_2");
					put(grammarAccess.getStmt_altAccess().getRightAssignment_1_2(), "rule__Stmt_alt__RightAssignment_1_2");
					put(grammarAccess.getStmt_parallelAccess().getRightAssignment_1_2(), "rule__Stmt_parallel__RightAssignment_1_2");
					put(grammarAccess.getSeqAccess().getItemsAssignment_0(), "rule__Seq__ItemsAssignment_0");
					put(grammarAccess.getSeqAccess().getItemsAssignment_1_1(), "rule__Seq__ItemsAssignment_1_1");
					put(grammarAccess.getSeq_itemAccess().getParametersAssignment_1_1(), "rule__Seq_item__ParametersAssignment_1_1");
					put(grammarAccess.getIfc_call_parameter_listAccess().getParametersAssignment_0(), "rule__Ifc_call_parameter_list__ParametersAssignment_0");
					put(grammarAccess.getIfc_call_parameter_listAccess().getParametersAssignment_1_1(), "rule__Ifc_call_parameter_list__ParametersAssignment_1_1");
					put(grammarAccess.getRepeat_stmtAccess().getStmtAssignment_1(), "rule__Repeat_stmt__StmtAssignment_1");
					put(grammarAccess.getOverrides_declarationAccess().getOverridesAssignment_3(), "rule__Overrides_declaration__OverridesAssignment_3");
					put(grammarAccess.getType_overrideAccess().getSrcAssignment_1(), "rule__Type_override__SrcAssignment_1");
					put(grammarAccess.getType_overrideAccess().getDestAssignment_3(), "rule__Type_override__DestAssignment_3");
					put(grammarAccess.getInstance_overrideAccess().getSrcAssignment_1(), "rule__Instance_override__SrcAssignment_1");
					put(grammarAccess.getInstance_overrideAccess().getDestAssignment_3(), "rule__Instance_override__DestAssignment_3");
					put(grammarAccess.getTypedef_declarationAccess().getSrcAssignment_1(), "rule__Typedef_declaration__SrcAssignment_1");
					put(grammarAccess.getTypedef_declarationAccess().getDestAssignment_2(), "rule__Typedef_declaration__DestAssignment_2");
					put(grammarAccess.getEnum_declarationAccess().getData_typeAssignment_1(), "rule__Enum_declaration__Data_typeAssignment_1");
					put(grammarAccess.getEnum_declarationAccess().getItemsAssignment_3(), "rule__Enum_declaration__ItemsAssignment_3");
					put(grammarAccess.getEnum_declarationAccess().getItemsAssignment_4_1(), "rule__Enum_declaration__ItemsAssignment_4_1");
					put(grammarAccess.getEnum_declarationAccess().getNameAssignment_6(), "rule__Enum_declaration__NameAssignment_6");
					put(grammarAccess.getScalar_declarationAccess().getLhsAssignment_1_1(), "rule__Scalar_declaration__LhsAssignment_1_1");
					put(grammarAccess.getScalar_declarationAccess().getRhsAssignment_1_3(), "rule__Scalar_declaration__RhsAssignment_1_3");
					put(grammarAccess.getScalar_declarationAccess().getItemsAssignment_2_1(), "rule__Scalar_declaration__ItemsAssignment_2_1");
					put(grammarAccess.getScalar_declarationAccess().getItemsAssignment_2_2_1(), "rule__Scalar_declaration__ItemsAssignment_2_2_1");
					put(grammarAccess.getSigned_scalarAccess().getNameAssignment_1(), "rule__Signed_scalar__NameAssignment_1");
					put(grammarAccess.getScalar_signedAccess().getNameAssignment_0(), "rule__Scalar_signed__NameAssignment_0");
					put(grammarAccess.getDomain_specAccess().getRange_lhsAssignment_0_0(), "rule__Domain_spec__Range_lhsAssignment_0_0");
					put(grammarAccess.getDomain_specAccess().getRange_rhsAssignment_0_2(), "rule__Domain_spec__Range_rhsAssignment_0_2");
					put(grammarAccess.getDomain_specAccess().getRange_lhsAssignment_1(), "rule__Domain_spec__Range_lhsAssignment_1");
					put(grammarAccess.getConstraint_declarationAccess().getNameAssignment_1(), "rule__Constraint_declaration__NameAssignment_1");
					put(grammarAccess.getConstraint_declarationAccess().getBodyAssignment_3(), "rule__Constraint_declaration__BodyAssignment_3");
					put(grammarAccess.getExpression_or_dist_itemAccess().getImpl_constraintAssignment_1_0_1(), "rule__Expression_or_dist_item__Impl_constraintAssignment_1_0_1");
					put(grammarAccess.getIf_constraint_itemAccess().getIf_exprAssignment_2(), "rule__If_constraint_item__If_exprAssignment_2");
					put(grammarAccess.getIf_constraint_itemAccess().getTrue_caseAssignment_4(), "rule__If_constraint_item__True_caseAssignment_4");
					put(grammarAccess.getIf_constraint_itemAccess().getFalse_setAssignment_5_1(), "rule__If_constraint_item__False_setAssignment_5_1");
					put(grammarAccess.getForeach_constraint_itemAccess().getExprAssignment_2(), "rule__Foreach_constraint_item__ExprAssignment_2");
					put(grammarAccess.getForeach_constraint_itemAccess().getBodyAssignment_4(), "rule__Foreach_constraint_item__BodyAssignment_4");
					put(grammarAccess.getConstraint_setAccess().getItemsAssignment_0(), "rule__Constraint_set__ItemsAssignment_0");
					put(grammarAccess.getConstraint_setAccess().getItemsAssignment_1_2(), "rule__Constraint_set__ItemsAssignment_1_2");
					put(grammarAccess.getCondition_exprAccess().getTrue_exprAssignment_1_2(), "rule__Condition_expr__True_exprAssignment_1_2");
					put(grammarAccess.getCondition_exprAccess().getFalse_exprAssignment_1_4(), "rule__Condition_expr__False_exprAssignment_1_4");
					put(grammarAccess.getLogical_or_exprAccess().getRightAssignment_1_2(), "rule__Logical_or_expr__RightAssignment_1_2");
					put(grammarAccess.getLogical_and_exprAccess().getRightAssignment_1_2(), "rule__Logical_and_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_or_exprAccess().getRightAssignment_1_2(), "rule__Binary_or_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_xor_exprAccess().getRightAssignment_1_2(), "rule__Binary_xor_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_and_exprAccess().getRightAssignment_1_2(), "rule__Binary_and_expr__RightAssignment_1_2");
					put(grammarAccess.getLogical_equality_exprAccess().getOpAssignment_1_1(), "rule__Logical_equality_expr__OpAssignment_1_1");
					put(grammarAccess.getLogical_equality_exprAccess().getRightAssignment_1_2(), "rule__Logical_equality_expr__RightAssignment_1_2");
					put(grammarAccess.getLogical_inequality_exprAccess().getOpAssignment_1_1(), "rule__Logical_inequality_expr__OpAssignment_1_1");
					put(grammarAccess.getLogical_inequality_exprAccess().getRightAssignment_1_2(), "rule__Logical_inequality_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_shift_exprAccess().getOpAssignment_1_1(), "rule__Binary_shift_expr__OpAssignment_1_1");
					put(grammarAccess.getBinary_shift_exprAccess().getRightAssignment_1_2(), "rule__Binary_shift_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_add_sub_exprAccess().getOpAssignment_1_1(), "rule__Binary_add_sub_expr__OpAssignment_1_1");
					put(grammarAccess.getBinary_add_sub_exprAccess().getRightAssignment_1_2(), "rule__Binary_add_sub_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_mul_div_mod_exprAccess().getOpAssignment_1_1(), "rule__Binary_mul_div_mod_expr__OpAssignment_1_1");
					put(grammarAccess.getBinary_mul_div_mod_exprAccess().getRightAssignment_1_2(), "rule__Binary_mul_div_mod_expr__RightAssignment_1_2");
					put(grammarAccess.getBinary_exp_exprAccess().getRightAssignment_1_2(), "rule__Binary_exp_expr__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExprAssignment_0(), "rule__Primary__ExprAssignment_0");
					put(grammarAccess.getPrimaryAccess().getExprAssignment_1_1(), "rule__Primary__ExprAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getExprAssignment_2_0(), "rule__Primary__ExprAssignment_2_0");
					put(grammarAccess.getPrimaryAccess().getLhsAssignment_2_1_1(), "rule__Primary__LhsAssignment_2_1_1");
					put(grammarAccess.getPrimaryAccess().getRhsAssignment_2_1_2_1(), "rule__Primary__RhsAssignment_2_1_2_1");
					put(grammarAccess.getInterface_declarationAccess().getNameAssignment_1(), "rule__Interface_declaration__NameAssignment_1");
					put(grammarAccess.getInterface_declarationAccess().getSuperAssignment_2_1(), "rule__Interface_declaration__SuperAssignment_2_1");
					put(grammarAccess.getInterface_declarationAccess().getBodyAssignment_4(), "rule__Interface_declaration__BodyAssignment_4");
					put(grammarAccess.getAction_declarationAccess().getNameAssignment_1(), "rule__Action_declaration__NameAssignment_1");
					put(grammarAccess.getAction_declarationAccess().getPortsAssignment_3_0(), "rule__Action_declaration__PortsAssignment_3_0");
					put(grammarAccess.getAction_declarationAccess().getPortsAssignment_3_1_1(), "rule__Action_declaration__PortsAssignment_3_1_1");
					put(grammarAccess.getAction_portlistAccess().getTypeAssignment_1_0(), "rule__Action_portlist__TypeAssignment_1_0");
					put(grammarAccess.getAction_portlistAccess().getNameAssignment_2(), "rule__Action_portlist__NameAssignment_2");
					put(grammarAccess.getGraph_data_declarationAccess().getTypeAssignment_1(), "rule__Graph_data_declaration__TypeAssignment_1");
					put(grammarAccess.getGraph_data_declarationAccess().getNamesAssignment_2(), "rule__Graph_data_declaration__NamesAssignment_2");
					put(grammarAccess.getGraph_data_declarationAccess().getPortmapsAssignment_3_1(), "rule__Graph_data_declaration__PortmapsAssignment_3_1");
					put(grammarAccess.getGraph_data_declarationAccess().getPortmapsAssignment_3_2_1(), "rule__Graph_data_declaration__PortmapsAssignment_3_2_1");
					put(grammarAccess.getGraph_data_declarationAccess().getNamesAssignment_4_1(), "rule__Graph_data_declaration__NamesAssignment_4_1");
					put(grammarAccess.getGraph_data_declarationAccess().getPortmapsAssignment_4_2_1(), "rule__Graph_data_declaration__PortmapsAssignment_4_2_1");
					put(grammarAccess.getGraph_data_declarationAccess().getPortmapsAssignment_4_2_2_1(), "rule__Graph_data_declaration__PortmapsAssignment_4_2_2_1");
					put(grammarAccess.getSymbol_declarationAccess().getNameAssignment_0_1(), "rule__Symbol_declaration__NameAssignment_0_1");
					put(grammarAccess.getSymbol_declarationAccess().getInline_ruleAssignment_0_2_1(), "rule__Symbol_declaration__Inline_ruleAssignment_0_2_1");
					put(grammarAccess.getSymbol_declarationAccess().getNamesAssignment_1_1(), "rule__Symbol_declaration__NamesAssignment_1_1");
					put(grammarAccess.getSymbol_declarationAccess().getNamesAssignment_1_2_1(), "rule__Symbol_declaration__NamesAssignment_1_2_1");
					put(grammarAccess.getSymbol_declarationAccess().getInline_ruleAssignment_1_2_2_1(), "rule__Symbol_declaration__Inline_ruleAssignment_1_2_2_1");
					put(grammarAccess.getPort_mapAccess().getPortAssignment_1(), "rule__Port_map__PortAssignment_1");
					put(grammarAccess.getPort_mapAccess().getMapAssignment_3(), "rule__Port_map__MapAssignment_3");
					put(grammarAccess.getStruct_data_declarationAccess().getTypeAssignment_1(), "rule__Struct_data_declaration__TypeAssignment_1");
					put(grammarAccess.getStruct_data_declarationAccess().getNamesAssignment_2(), "rule__Struct_data_declaration__NamesAssignment_2");
					put(grammarAccess.getStruct_data_declarationAccess().getNamesAssignment_3_1(), "rule__Struct_data_declaration__NamesAssignment_3_1");
					put(grammarAccess.getGraph_datatypeAccess().getGraph_typenameAssignment_1(), "rule__Graph_datatype__Graph_typenameAssignment_1");
					put(grammarAccess.getStruct_datatypeAccess().getStruct_typenameAssignment_1(), "rule__Struct_datatype__Struct_typenameAssignment_1");
					put(grammarAccess.getInteger_typeAccess().getRange_lhsAssignment_1_2_1(), "rule__Integer_type__Range_lhsAssignment_1_2_1");
					put(grammarAccess.getInteger_typeAccess().getRange_rhsAssignment_1_2_3(), "rule__Integer_type__Range_rhsAssignment_1_2_3");
					put(grammarAccess.getHierarchical_idAccess().getValueAssignment_0(), "rule__Hierarchical_id__ValueAssignment_0");
					put(grammarAccess.getLiteralAccess().getValueAssignment(), "rule__Literal__ValueAssignment");
					put(grammarAccess.getDecimal_numberAccess().getValueAssignment_0(), "rule__Decimal_number__ValueAssignment_0");
					put(grammarAccess.getSizeAccess().getValueAssignment(), "rule__Size__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.sf.psstools.lang.ui.contentassist.antlr.internal.InternalPSSParser typedParser = (net.sf.psstools.lang.ui.contentassist.antlr.internal.InternalPSSParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PSSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PSSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
