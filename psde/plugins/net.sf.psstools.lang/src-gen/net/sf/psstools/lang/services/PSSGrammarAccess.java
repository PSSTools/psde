/*
* generated by Xtext
*/
package net.sf.psstools.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PSSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cTopLevelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTopLevelPortable_stimulus_descriptionParserRuleCall_0 = (RuleCall)cTopLevelAssignment.eContents().get(0);
		
		//Model:
		//	topLevel+=portable_stimulus_description*;
		public ParserRule getRule() { return rule; }

		//topLevel+=portable_stimulus_description*
		public Assignment getTopLevelAssignment() { return cTopLevelAssignment; }

		//portable_stimulus_description
		public RuleCall getTopLevelPortable_stimulus_descriptionParserRuleCall_0() { return cTopLevelPortable_stimulus_descriptionParserRuleCall_0; }
	}

	public class Portable_stimulus_descriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "portable_stimulus_description");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraph_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStruct_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterface_declarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cData_declarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//portable_stimulus_description:
		//	graph_declaration | struct_declaration | interface_declaration |
		//	/ * |
		//	include_statement |
		//	bins_declaration |
		//	package_declaration * / data_declaration;
		public ParserRule getRule() { return rule; }

		//graph_declaration | struct_declaration | interface_declaration |
		/// * |
		//	include_statement |
		//	bins_declaration |
		//	package_declaration * / data_declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph_declaration
		public RuleCall getGraph_declarationParserRuleCall_0() { return cGraph_declarationParserRuleCall_0; }

		//struct_declaration
		public RuleCall getStruct_declarationParserRuleCall_1() { return cStruct_declarationParserRuleCall_1; }

		//interface_declaration
		public RuleCall getInterface_declarationParserRuleCall_2() { return cInterface_declarationParserRuleCall_2; }

		/// * |
		//	include_statement |
		//	bins_declaration |
		//	package_declaration * / data_declaration
		public RuleCall getData_declarationParserRuleCall_3() { return cData_declarationParserRuleCall_3; }
	}

	public class Graph_or_struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_or_struct_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraph_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStruct_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//graph_or_struct_declaration:
		//	graph_declaration | struct_declaration;
		public ParserRule getRule() { return rule; }

		//graph_declaration | struct_declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph_declaration
		public RuleCall getGraph_declarationParserRuleCall_0() { return cGraph_declarationParserRuleCall_0; }

		//struct_declaration
		public RuleCall getStruct_declarationParserRuleCall_1() { return cStruct_declarationParserRuleCall_1; }
	}

	public class Graph_struct_ifc_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_struct_ifc_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraph_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStruct_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterface_declarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//graph_struct_ifc_declaration:
		//	graph_declaration | struct_declaration | interface_declaration;
		public ParserRule getRule() { return rule; }

		//graph_declaration | struct_declaration | interface_declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph_declaration
		public RuleCall getGraph_declarationParserRuleCall_0() { return cGraph_declarationParserRuleCall_0; }

		//struct_declaration
		public RuleCall getStruct_declarationParserRuleCall_1() { return cStruct_declarationParserRuleCall_1; }

		//interface_declaration
		public RuleCall getInterface_declarationParserRuleCall_2() { return cInterface_declarationParserRuleCall_2; }
	}

	public class Graph_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameGraph_identifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cPortsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cPortsPort_declarationParserRuleCall_2_1_0_0 = (RuleCall)cPortsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cPortsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cPortsPort_declarationParserRuleCall_2_1_1_1_0 = (RuleCall)cPortsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperGraph_or_struct_declarationCrossReference_3_1_0 = (CrossReference)cSuperAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperGraph_or_struct_declarationGraph_or_struct_identifierParserRuleCall_3_1_0_1 = (RuleCall)cSuperGraph_or_struct_declarationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyGraph_body_itemParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//graph_declaration:
		//	"graph" name=graph_identifier ("(" (ports+=port_declaration ("," ports+=port_declaration)*)? ")")? ("extends"
		//	super=[graph_or_struct_declaration|graph_or_struct_identifier])? "{" body+=graph_body_item* "}";
		public ParserRule getRule() { return rule; }

		//"graph" name=graph_identifier ("(" (ports+=port_declaration ("," ports+=port_declaration)*)? ")")? ("extends"
		//super=[graph_or_struct_declaration|graph_or_struct_identifier])? "{" body+=graph_body_item* "}"
		public Group getGroup() { return cGroup; }

		//"graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }

		//name=graph_identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//graph_identifier
		public RuleCall getNameGraph_identifierParserRuleCall_1_0() { return cNameGraph_identifierParserRuleCall_1_0; }

		//("(" (ports+=port_declaration ("," ports+=port_declaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(ports+=port_declaration ("," ports+=port_declaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//ports+=port_declaration
		public Assignment getPortsAssignment_2_1_0() { return cPortsAssignment_2_1_0; }

		//port_declaration
		public RuleCall getPortsPort_declarationParserRuleCall_2_1_0_0() { return cPortsPort_declarationParserRuleCall_2_1_0_0; }

		//("," ports+=port_declaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//ports+=port_declaration
		public Assignment getPortsAssignment_2_1_1_1() { return cPortsAssignment_2_1_1_1; }

		//port_declaration
		public RuleCall getPortsPort_declarationParserRuleCall_2_1_1_1_0() { return cPortsPort_declarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("extends" super=[graph_or_struct_declaration|graph_or_struct_identifier])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//super=[graph_or_struct_declaration|graph_or_struct_identifier]
		public Assignment getSuperAssignment_3_1() { return cSuperAssignment_3_1; }

		//[graph_or_struct_declaration|graph_or_struct_identifier]
		public CrossReference getSuperGraph_or_struct_declarationCrossReference_3_1_0() { return cSuperGraph_or_struct_declarationCrossReference_3_1_0; }

		//graph_or_struct_identifier
		public RuleCall getSuperGraph_or_struct_declarationGraph_or_struct_identifierParserRuleCall_3_1_0_1() { return cSuperGraph_or_struct_declarationGraph_or_struct_identifierParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//body+=graph_body_item*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//graph_body_item
		public RuleCall getBodyGraph_body_itemParserRuleCall_5_0() { return cBodyGraph_body_itemParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Port_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "port_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfc_typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIfc_typeInterface_declarationCrossReference_1_0 = (CrossReference)cIfc_typeAssignment_1.eContents().get(0);
		private final RuleCall cIfc_typeInterface_declarationInterface_identifierParserRuleCall_1_0_1 = (RuleCall)cIfc_typeInterface_declarationCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePort_identifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//port_declaration:
		//	"export"? ifc_type=[interface_declaration|interface_identifier] name=port_identifier;
		public ParserRule getRule() { return rule; }

		//"export"? ifc_type=[interface_declaration|interface_identifier] name=port_identifier
		public Group getGroup() { return cGroup; }

		//"export"?
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }

		//ifc_type=[interface_declaration|interface_identifier]
		public Assignment getIfc_typeAssignment_1() { return cIfc_typeAssignment_1; }

		//[interface_declaration|interface_identifier]
		public CrossReference getIfc_typeInterface_declarationCrossReference_1_0() { return cIfc_typeInterface_declarationCrossReference_1_0; }

		//interface_identifier
		public RuleCall getIfc_typeInterface_declarationInterface_identifierParserRuleCall_1_0_1() { return cIfc_typeInterface_declarationInterface_identifierParserRuleCall_1_0_1; }

		//name=port_identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//port_identifier
		public RuleCall getNamePort_identifierParserRuleCall_2_0() { return cNamePort_identifierParserRuleCall_2_0; }
	}

	public class Struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "struct_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperStruct_declarationCrossReference_2_1_0 = (CrossReference)cSuperAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperStruct_declarationStruct_identifierParserRuleCall_2_1_0_1 = (RuleCall)cSuperStruct_declarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStruct_body_itemParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//struct_declaration:
		//	"struct" name=identifier ("extends" super=[struct_declaration|struct_identifier])? "{" body+=struct_body_item* "}";
		public ParserRule getRule() { return rule; }

		//"struct" name=identifier ("extends" super=[struct_declaration|struct_identifier])? "{" body+=struct_body_item* "}"
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//name=identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//("extends" super=[struct_declaration|struct_identifier])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//super=[struct_declaration|struct_identifier]
		public Assignment getSuperAssignment_2_1() { return cSuperAssignment_2_1; }

		//[struct_declaration|struct_identifier]
		public CrossReference getSuperStruct_declarationCrossReference_2_1_0() { return cSuperStruct_declarationCrossReference_2_1_0; }

		//struct_identifier
		public RuleCall getSuperStruct_declarationStruct_identifierParserRuleCall_2_1_0_1() { return cSuperStruct_declarationStruct_identifierParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=struct_body_item*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//struct_body_item
		public RuleCall getBodyStruct_body_itemParserRuleCall_4_0() { return cBodyStruct_body_itemParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Struct_body_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "struct_body_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraint_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cData_declarationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cTypedef_declarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//struct_body_item:
		//	constraint_declaration | "rand"? data_declaration | / *
		//	bins_declaration |
		//	bin_scheme_declaration * /
		//	typedef_declaration;
		public ParserRule getRule() { return rule; }

		//constraint_declaration | "rand"? data_declaration | / *
		//	bins_declaration |
		//	bin_scheme_declaration * /
		//typedef_declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//constraint_declaration
		public RuleCall getConstraint_declarationParserRuleCall_0() { return cConstraint_declarationParserRuleCall_0; }

		//"rand"? data_declaration
		public Group getGroup_1() { return cGroup_1; }

		//"rand"?
		public Keyword getRandKeyword_1_0() { return cRandKeyword_1_0; }

		//data_declaration
		public RuleCall getData_declarationParserRuleCall_1_1() { return cData_declarationParserRuleCall_1_1; }

		/// *
		//	bins_declaration |
		//	bin_scheme_declaration * / typedef_declaration
		public RuleCall getTypedef_declarationParserRuleCall_2() { return cTypedef_declarationParserRuleCall_2; }
	}

	public class Graph_body_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_body_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOverrides_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraint_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cData_declarationParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cTypedef_declarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSymbol_declarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSymbol_definitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//graph_body_item:
		//	overrides_declaration | constraint_declaration | "rand"? data_declaration | typedef_declaration | symbol_declaration
		//	| symbol_definition;
		public ParserRule getRule() { return rule; }

		//overrides_declaration | constraint_declaration | "rand"? data_declaration | typedef_declaration | symbol_declaration |
		//symbol_definition
		public Alternatives getAlternatives() { return cAlternatives; }

		//overrides_declaration
		public RuleCall getOverrides_declarationParserRuleCall_0() { return cOverrides_declarationParserRuleCall_0; }

		//constraint_declaration
		public RuleCall getConstraint_declarationParserRuleCall_1() { return cConstraint_declarationParserRuleCall_1; }

		//"rand"? data_declaration
		public Group getGroup_2() { return cGroup_2; }

		//"rand"?
		public Keyword getRandKeyword_2_0() { return cRandKeyword_2_0; }

		//data_declaration
		public RuleCall getData_declarationParserRuleCall_2_1() { return cData_declarationParserRuleCall_2_1; }

		//typedef_declaration
		public RuleCall getTypedef_declarationParserRuleCall_3() { return cTypedef_declarationParserRuleCall_3; }

		//symbol_declaration
		public RuleCall getSymbol_declarationParserRuleCall_4() { return cSymbol_declarationParserRuleCall_4; }

		//symbol_definition
		public RuleCall getSymbol_definitionParserRuleCall_5() { return cSymbol_definitionParserRuleCall_5; }
	}

	public class Symbol_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symbol_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRule_productionParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//symbol_definition:
		//	name=identifier ":=" rule=rule_production;
		public ParserRule getRule() { return rule; }

		//name=identifier ":=" rule=rule_production
		public Group getGroup() { return cGroup; }

		//name=identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//rule=rule_production
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }

		//rule_production
		public RuleCall getRuleRule_productionParserRuleCall_2_0() { return cRuleRule_productionParserRuleCall_2_0; }
	}

	public class Rule_productionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_production");
		private final RuleCall cRule_stmt_or_blockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ********************************************************************
		// * Rule productions
		// * / rule_production:
		//	rule_stmt_or_block;
		public ParserRule getRule() { return rule; }

		//rule_stmt_or_block
		public RuleCall getRule_stmt_or_blockParserRuleCall() { return cRule_stmt_or_blockParserRuleCall; }
	}

	public class Rule_stmt_or_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_stmt_or_block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRule_repeat_stmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRule_stmt_alt_parallel_seqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rule_stmt_or_block:
		//	rule_repeat_stmt | rule_stmt_alt_parallel_seq;
		public ParserRule getRule() { return rule; }

		//rule_repeat_stmt | rule_stmt_alt_parallel_seq
		public Alternatives getAlternatives() { return cAlternatives; }

		//rule_repeat_stmt
		public RuleCall getRule_repeat_stmtParserRuleCall_0() { return cRule_repeat_stmtParserRuleCall_0; }

		//rule_stmt_alt_parallel_seq
		public RuleCall getRule_stmt_alt_parallel_seqParserRuleCall_1() { return cRule_stmt_alt_parallel_seqParserRuleCall_1; }
	}

	public class Rule_stmt_alt_parallel_seqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_stmt_alt_parallel_seq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRule_stmt_primaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAlt_stmtLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRule_stmt_primaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//rule_stmt_alt_parallel_seq:
		//	rule_stmt_primary ({alt_stmt.left=current} "|" right=rule_stmt_primary)*;
		public ParserRule getRule() { return rule; }

		//rule_stmt_primary ({alt_stmt.left=current} "|" right=rule_stmt_primary)*
		public Group getGroup() { return cGroup; }

		//rule_stmt_primary
		public RuleCall getRule_stmt_primaryParserRuleCall_0() { return cRule_stmt_primaryParserRuleCall_0; }

		//({alt_stmt.left=current} "|" right=rule_stmt_primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{alt_stmt.left=current}
		public Action getAlt_stmtLeftAction_1_0() { return cAlt_stmtLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=rule_stmt_primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//rule_stmt_primary
		public RuleCall getRightRule_stmt_primaryParserRuleCall_1_2_0() { return cRightRule_stmt_primaryParserRuleCall_1_2_0; }
	}

	public class Rule_stmt_primaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_stmt_primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cRule_rule_stmt_parallel_altParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cRule_stmt_primaryAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cStmt_listAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStmt_listRule_stmt_or_blockParserRuleCall_1_2_0 = (RuleCall)cStmt_listAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//rule_stmt_primary:
		//	rule_rule_stmt_parallel_alt ";" | "{" {rule_stmt_primary} stmt_list+=rule_stmt_or_block* "}";
		public ParserRule getRule() { return rule; }

		//rule_rule_stmt_parallel_alt ";" | "{" {rule_stmt_primary} stmt_list+=rule_stmt_or_block* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//rule_rule_stmt_parallel_alt ";"
		public Group getGroup_0() { return cGroup_0; }

		//rule_rule_stmt_parallel_alt
		public RuleCall getRule_rule_stmt_parallel_altParserRuleCall_0_0() { return cRule_rule_stmt_parallel_altParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//"{" {rule_stmt_primary} stmt_list+=rule_stmt_or_block* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//{rule_stmt_primary}
		public Action getRule_stmt_primaryAction_1_1() { return cRule_stmt_primaryAction_1_1; }

		//stmt_list+=rule_stmt_or_block*
		public Assignment getStmt_listAssignment_1_2() { return cStmt_listAssignment_1_2; }

		//rule_stmt_or_block
		public RuleCall getStmt_listRule_stmt_or_blockParserRuleCall_1_2_0() { return cStmt_listRule_stmt_or_blockParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class Rule_rule_stmt_parallel_altElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_rule_stmt_parallel_alt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRule_stmt_parallelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStmt_altLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRule_stmt_parallelParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//rule_rule_stmt_parallel_alt:
		//	rule_stmt_parallel ({stmt_alt.left=current} "|" right=rule_stmt_parallel)*;
		public ParserRule getRule() { return rule; }

		//rule_stmt_parallel ({stmt_alt.left=current} "|" right=rule_stmt_parallel)*
		public Group getGroup() { return cGroup; }

		//rule_stmt_parallel
		public RuleCall getRule_stmt_parallelParserRuleCall_0() { return cRule_stmt_parallelParserRuleCall_0; }

		//({stmt_alt.left=current} "|" right=rule_stmt_parallel)*
		public Group getGroup_1() { return cGroup_1; }

		//{stmt_alt.left=current}
		public Action getStmt_altLeftAction_1_0() { return cStmt_altLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=rule_stmt_parallel
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//rule_stmt_parallel
		public RuleCall getRightRule_stmt_parallelParserRuleCall_1_2_0() { return cRightRule_stmt_parallelParserRuleCall_1_2_0; }
	}

	public class Rule_stmt_parallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_stmt_parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRule_sequenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRule_stmt_parallelLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRule_sequenceParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//rule_stmt_parallel:
		//	rule_sequence ({rule_stmt_parallel.left=current} "&" right=rule_sequence)*;
		public ParserRule getRule() { return rule; }

		//rule_sequence ({rule_stmt_parallel.left=current} "&" right=rule_sequence)*
		public Group getGroup() { return cGroup; }

		//rule_sequence
		public RuleCall getRule_sequenceParserRuleCall_0() { return cRule_sequenceParserRuleCall_0; }

		//({rule_stmt_parallel.left=current} "&" right=rule_sequence)*
		public Group getGroup_1() { return cGroup_1; }

		//{rule_stmt_parallel.left=current}
		public Action getRule_stmt_parallelLeftAction_1_0() { return cRule_stmt_parallelLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=rule_sequence
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//rule_sequence
		public RuleCall getRightRule_sequenceParserRuleCall_1_2_0() { return cRightRule_sequenceParserRuleCall_1_2_0; }
	}

	public class Rule_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cItemsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cItemsRule_seq_itemParserRuleCall_0_0 = (RuleCall)cItemsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cItemsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cItemsRule_seq_itemParserRuleCall_1_1_0 = (RuleCall)cItemsAssignment_1_1.eContents().get(0);
		
		//rule_sequence:
		//	items+=rule_seq_item ("," items+=rule_seq_item)*;
		public ParserRule getRule() { return rule; }

		//items+=rule_seq_item ("," items+=rule_seq_item)*
		public Group getGroup() { return cGroup; }

		//items+=rule_seq_item
		public Assignment getItemsAssignment_0() { return cItemsAssignment_0; }

		//rule_seq_item
		public RuleCall getItemsRule_seq_itemParserRuleCall_0_0() { return cItemsRule_seq_itemParserRuleCall_0_0; }

		//("," items+=rule_seq_item)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//items+=rule_seq_item
		public Assignment getItemsAssignment_1_1() { return cItemsAssignment_1_1; }

		//rule_seq_item
		public RuleCall getItemsRule_seq_itemParserRuleCall_1_1_0() { return cItemsRule_seq_itemParserRuleCall_1_1_0; }
	}

	public class Rule_seq_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_seq_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHierarchical_idParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cAction_paramsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAction_paramsIfc_call_parameter_listParserRuleCall_1_0_1_0 = (RuleCall)cAction_paramsAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cWith_clauseAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cWith_clauseRule_with_clauseParserRuleCall_1_1_0 = (RuleCall)cWith_clauseAssignment_1_1.eContents().get(0);
		
		//rule_seq_item:
		//	hierarchical_id ("(" action_params=ifc_call_parameter_list ")" | with_clause=rule_with_clause)?;
		public ParserRule getRule() { return rule; }

		//hierarchical_id ("(" action_params=ifc_call_parameter_list ")" | with_clause=rule_with_clause)?
		public Group getGroup() { return cGroup; }

		//hierarchical_id
		public RuleCall getHierarchical_idParserRuleCall_0() { return cHierarchical_idParserRuleCall_0; }

		//("(" action_params=ifc_call_parameter_list ")" | with_clause=rule_with_clause)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" action_params=ifc_call_parameter_list ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//action_params=ifc_call_parameter_list
		public Assignment getAction_paramsAssignment_1_0_1() { return cAction_paramsAssignment_1_0_1; }

		//ifc_call_parameter_list
		public RuleCall getAction_paramsIfc_call_parameter_listParserRuleCall_1_0_1_0() { return cAction_paramsIfc_call_parameter_listParserRuleCall_1_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//with_clause=rule_with_clause
		public Assignment getWith_clauseAssignment_1_1() { return cWith_clauseAssignment_1_1; }

		//rule_with_clause
		public RuleCall getWith_clauseRule_with_clauseParserRuleCall_1_1_0() { return cWith_clauseRule_with_clauseParserRuleCall_1_1_0; }
	}

	public class Rule_with_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_with_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRule_with_clauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConstraint_body_itemParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//rule_with_clause:
		//	{rule_with_clause} "with" "{" body+=constraint_body_item* "}";
		public ParserRule getRule() { return rule; }

		//{rule_with_clause} "with" "{" body+=constraint_body_item* "}"
		public Group getGroup() { return cGroup; }

		//{rule_with_clause}
		public Action getRule_with_clauseAction_0() { return cRule_with_clauseAction_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body+=constraint_body_item*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//constraint_body_item
		public RuleCall getBodyConstraint_body_itemParserRuleCall_3_0() { return cBodyConstraint_body_itemParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Ifc_call_parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ifc_call_parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersHierarchical_idParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersHierarchical_idParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ifc_call_parameter_list:
		//	parameters+=hierarchical_id ("," parameters+=hierarchical_id)*;
		public ParserRule getRule() { return rule; }

		//parameters+=hierarchical_id ("," parameters+=hierarchical_id)*
		public Group getGroup() { return cGroup; }

		//parameters+=hierarchical_id
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//hierarchical_id
		public RuleCall getParametersHierarchical_idParserRuleCall_0_0() { return cParametersHierarchical_idParserRuleCall_0_0; }

		//("," parameters+=hierarchical_id)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=hierarchical_id
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//hierarchical_id
		public RuleCall getParametersHierarchical_idParserRuleCall_1_1_0() { return cParametersHierarchical_idParserRuleCall_1_1_0; }
	}

	public class Rule_repeat_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rule_repeat_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtRule_stmt_or_blockParserRuleCall_2_0 = (RuleCall)cStmtAssignment_2.eContents().get(0);
		
		//rule_repeat_stmt:
		//	"repeat" ("(" expr=expression ")")? stmt=rule_stmt_or_block;
		public ParserRule getRule() { return rule; }

		//"repeat" ("(" expr=expression ")")? stmt=rule_stmt_or_block
		public Group getGroup() { return cGroup; }

		//"repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }

		//("(" expr=expression ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//expr=expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//stmt=rule_stmt_or_block
		public Assignment getStmtAssignment_2() { return cStmtAssignment_2; }

		//rule_stmt_or_block
		public RuleCall getStmtRule_stmt_or_blockParserRuleCall_2_0() { return cStmtRule_stmt_or_blockParserRuleCall_2_0; }
	}

	public class Overrides_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "overrides_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOverides_declarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOverrideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOverridesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOverridesOverride_stmtParserRuleCall_3_0 = (RuleCall)cOverridesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// ********************************************************************
		// * Overrides
		// * / overrides_declaration:
		//	{overides_declaration} "override" "{" overrides+=override_stmt* "}";
		public ParserRule getRule() { return rule; }

		//{overides_declaration} "override" "{" overrides+=override_stmt* "}"
		public Group getGroup() { return cGroup; }

		//{overides_declaration}
		public Action getOverides_declarationAction_0() { return cOverides_declarationAction_0; }

		//"override"
		public Keyword getOverrideKeyword_1() { return cOverrideKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//overrides+=override_stmt*
		public Assignment getOverridesAssignment_3() { return cOverridesAssignment_3; }

		//override_stmt
		public RuleCall getOverridesOverride_stmtParserRuleCall_3_0() { return cOverridesOverride_stmtParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Override_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "override_stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cType_overrideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstance_overrideParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//override_stmt:
		//	type_override | instance_override;
		public ParserRule getRule() { return rule; }

		//type_override | instance_override
		public Alternatives getAlternatives() { return cAlternatives; }

		//type_override
		public RuleCall getType_overrideParserRuleCall_0() { return cType_overrideParserRuleCall_0; }

		//instance_override
		public RuleCall getInstance_overrideParserRuleCall_1() { return cInstance_overrideParserRuleCall_1; }
	}

	public class Type_overrideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_override");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSrcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSrcIdentifierParserRuleCall_1_0 = (RuleCall)cSrcAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestIdentifierParserRuleCall_3_0 = (RuleCall)cDestAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//type_override:
		//	"type" src=identifier "with" dest=identifier ";";
		public ParserRule getRule() { return rule; }

		//"type" src=identifier "with" dest=identifier ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//src=identifier
		public Assignment getSrcAssignment_1() { return cSrcAssignment_1; }

		//identifier
		public RuleCall getSrcIdentifierParserRuleCall_1_0() { return cSrcIdentifierParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//dest=identifier
		public Assignment getDestAssignment_3() { return cDestAssignment_3; }

		//identifier
		public RuleCall getDestIdentifierParserRuleCall_3_0() { return cDestIdentifierParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Instance_overrideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instance_override");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSrcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSrcHierarchical_idParserRuleCall_1_0 = (RuleCall)cSrcAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestIdentifierParserRuleCall_3_0 = (RuleCall)cDestAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//instance_override:
		//	"instance" src=hierarchical_id "with" dest=identifier ";";
		public ParserRule getRule() { return rule; }

		//"instance" src=hierarchical_id "with" dest=identifier ";"
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//src=hierarchical_id
		public Assignment getSrcAssignment_1() { return cSrcAssignment_1; }

		//hierarchical_id
		public RuleCall getSrcHierarchical_idParserRuleCall_1_0() { return cSrcHierarchical_idParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//dest=identifier
		public Assignment getDestAssignment_3() { return cDestAssignment_3; }

		//identifier
		public RuleCall getDestIdentifierParserRuleCall_3_0() { return cDestIdentifierParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Data_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cData_typeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// ********************************************************************
		// * Data Declarations
		// * / data_declaration:
		//	data_type names+=identifier ("," names+=identifier)* ";";
		public ParserRule getRule() { return rule; }

		//data_type names+=identifier ("," names+=identifier)* ";"
		public Group getGroup() { return cGroup; }

		//data_type
		public RuleCall getData_typeParserRuleCall_0() { return cData_typeParserRuleCall_0; }

		//names+=identifier
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_1_0() { return cNamesIdentifierParserRuleCall_1_0; }

		//("," names+=identifier)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=identifier
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_2_1_0() { return cNamesIdentifierParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Data_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnum_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUser_defined_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//data_type:
		//	integer_type | enum_type | user_defined_type;
		public ParserRule getRule() { return rule; }

		//integer_type | enum_type | user_defined_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//integer_type
		public RuleCall getInteger_typeParserRuleCall_0() { return cInteger_typeParserRuleCall_0; }

		//enum_type
		public RuleCall getEnum_typeParserRuleCall_1() { return cEnum_typeParserRuleCall_1; }

		//user_defined_type
		public RuleCall getUser_defined_typeParserRuleCall_2() { return cUser_defined_typeParserRuleCall_2; }
	}

	public class User_defined_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "user_defined_type");
		private final Assignment cTypenameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypenameIdentifierParserRuleCall_0 = (RuleCall)cTypenameAssignment.eContents().get(0);
		
		////	graph_type|struct_type|typedef_type=[typedef_declaration]
		// user_defined_type:
		//	typename= / * TODO: parameterization * / identifier;
		public ParserRule getRule() { return rule; }

		//typename= / * TODO: parameterization * / identifier
		public Assignment getTypenameAssignment() { return cTypenameAssignment; }

		/// * TODO: parameterization * / identifier
		public RuleCall getTypenameIdentifierParserRuleCall_0() { return cTypenameIdentifierParserRuleCall_0; }
	}

	public class Typedef_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typedef_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeData_typeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cType_identifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cType_identifierIdentifierParserRuleCall_2_0 = (RuleCall)cType_identifierAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//typedef_declaration:
		//	"typedef" type=data_type type_identifier=identifier ";";
		public ParserRule getRule() { return rule; }

		//"typedef" type=data_type type_identifier=identifier ";"
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//type=data_type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//data_type
		public RuleCall getTypeData_typeParserRuleCall_1_0() { return cTypeData_typeParserRuleCall_1_0; }

		//type_identifier=identifier
		public Assignment getType_identifierAssignment_2() { return cType_identifierAssignment_2; }

		//identifier
		public RuleCall getType_identifierIdentifierParserRuleCall_2_0() { return cType_identifierIdentifierParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Enum_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enum_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cData_typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cData_typeInteger_typeParserRuleCall_1_0 = (RuleCall)cData_typeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemsIdentifierParserRuleCall_3_0 = (RuleCall)cItemsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cItemsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cItemsIdentifierParserRuleCall_4_1_0 = (RuleCall)cItemsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//enum_type:
		//	"enum" data_type=integer_type? "{" items+=identifier ("," items+=identifier)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" data_type=integer_type? "{" items+=identifier ("," items+=identifier)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//data_type=integer_type?
		public Assignment getData_typeAssignment_1() { return cData_typeAssignment_1; }

		//integer_type
		public RuleCall getData_typeInteger_typeParserRuleCall_1_0() { return cData_typeInteger_typeParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//items+=identifier
		public Assignment getItemsAssignment_3() { return cItemsAssignment_3; }

		//identifier
		public RuleCall getItemsIdentifierParserRuleCall_3_0() { return cItemsIdentifierParserRuleCall_3_0; }

		//("," items+=identifier)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//items+=identifier
		public Assignment getItemsAssignment_4_1() { return cItemsAssignment_4_1; }

		//identifier
		public RuleCall getItemsIdentifierParserRuleCall_4_1_0() { return cItemsIdentifierParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Integer_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "integer_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSignedKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUnsignedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cAtom_typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtom_typeInteger_atom_typeParserRuleCall_1_0 = (RuleCall)cAtom_typeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLhsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_2_1_0 = (RuleCall)cLhsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRhsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRhsExpressionParserRuleCall_2_3_0 = (RuleCall)cRhsAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cInsideAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInsideType_inside_clauseParserRuleCall_3_0 = (RuleCall)cInsideAssignment_3.eContents().get(0);
		
		//integer_type:
		//	("signed" | "unsigned")? atom_type=integer_atom_type ("[" lhs=expression ":" rhs=expression "]")?
		//	inside=type_inside_clause?;
		public ParserRule getRule() { return rule; }

		//("signed" | "unsigned")? atom_type=integer_atom_type ("[" lhs=expression ":" rhs=expression "]")?
		//inside=type_inside_clause?
		public Group getGroup() { return cGroup; }

		//("signed" | "unsigned")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"signed"
		public Keyword getSignedKeyword_0_0() { return cSignedKeyword_0_0; }

		//"unsigned"
		public Keyword getUnsignedKeyword_0_1() { return cUnsignedKeyword_0_1; }

		//atom_type=integer_atom_type
		public Assignment getAtom_typeAssignment_1() { return cAtom_typeAssignment_1; }

		//integer_atom_type
		public RuleCall getAtom_typeInteger_atom_typeParserRuleCall_1_0() { return cAtom_typeInteger_atom_typeParserRuleCall_1_0; }

		//("[" lhs=expression ":" rhs=expression "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//lhs=expression
		public Assignment getLhsAssignment_2_1() { return cLhsAssignment_2_1; }

		//expression
		public RuleCall getLhsExpressionParserRuleCall_2_1_0() { return cLhsExpressionParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//rhs=expression
		public Assignment getRhsAssignment_2_3() { return cRhsAssignment_2_3; }

		//expression
		public RuleCall getRhsExpressionParserRuleCall_2_3_0() { return cRhsExpressionParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }

		//inside=type_inside_clause?
		public Assignment getInsideAssignment_3() { return cInsideAssignment_3; }

		//type_inside_clause
		public RuleCall getInsideType_inside_clauseParserRuleCall_3_0() { return cInsideType_inside_clauseParserRuleCall_3_0; }
	}

	public class Integer_atom_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "integer_atom_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBitKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//integer_atom_type:
		//	"int" | "bit";
		public ParserRule getRule() { return rule; }

		//"int" | "bit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"bit"
		public Keyword getBitKeyword_1() { return cBitKeyword_1; }
	}

	public class Type_inside_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_inside_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainOpen_range_listParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//type_inside_clause:
		//	"inside" "{" domain=open_range_list "}";
		public ParserRule getRule() { return rule; }

		//"inside" "{" domain=open_range_list "}"
		public Group getGroup() { return cGroup; }

		//"inside"
		public Keyword getInsideKeyword_0() { return cInsideKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//domain=open_range_list
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//open_range_list
		public RuleCall getDomainOpen_range_listParserRuleCall_2_0() { return cDomainOpen_range_listParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Open_range_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "open_range_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangesOpen_range_valueParserRuleCall_0_0 = (RuleCall)cRangesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRangesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRangesOpen_range_valueParserRuleCall_1_1_0 = (RuleCall)cRangesAssignment_1_1.eContents().get(0);
		
		//open_range_list:
		//	ranges+=open_range_value ("," ranges+=open_range_value)*;
		public ParserRule getRule() { return rule; }

		//ranges+=open_range_value ("," ranges+=open_range_value)*
		public Group getGroup() { return cGroup; }

		//ranges+=open_range_value
		public Assignment getRangesAssignment_0() { return cRangesAssignment_0; }

		//open_range_value
		public RuleCall getRangesOpen_range_valueParserRuleCall_0_0() { return cRangesOpen_range_valueParserRuleCall_0_0; }

		//("," ranges+=open_range_value)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ranges+=open_range_value
		public Assignment getRangesAssignment_1_1() { return cRangesAssignment_1_1; }

		//open_range_value
		public RuleCall getRangesOpen_range_valueParserRuleCall_1_1_0() { return cRangesOpen_range_valueParserRuleCall_1_1_0; }
	}

	public class Open_range_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "open_range_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLhsExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_1_1_0 = (RuleCall)cLhsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRhsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRhsExpressionParserRuleCall_1_3_0 = (RuleCall)cRhsAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//open_range_value:
		//	lhs=expression | "[" lhs=expression ":" rhs=expression "]";
		public ParserRule getRule() { return rule; }

		//lhs=expression | "[" lhs=expression ":" rhs=expression "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lhs=expression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//expression
		public RuleCall getLhsExpressionParserRuleCall_0_0() { return cLhsExpressionParserRuleCall_0_0; }

		//"[" lhs=expression ":" rhs=expression "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//lhs=expression
		public Assignment getLhsAssignment_1_1() { return cLhsAssignment_1_1; }

		//expression
		public RuleCall getLhsExpressionParserRuleCall_1_1_0() { return cLhsExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//rhs=expression
		public Assignment getRhsAssignment_1_3() { return cRhsAssignment_1_3; }

		//expression
		public RuleCall getRhsExpressionParserRuleCall_1_3_0() { return cRhsExpressionParserRuleCall_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}

	public class Constraint_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constraint_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDynamicKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyConstraint_body_itemParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO: convert to constant_expressions 
		// // domain_spec: range_lhs=identifier ('..' range_rhs=identifier)? ;
		//
		/// ********************************************************************
		// * Constraints
		// * / constraint_declaration:
		//	"constraint" name=identifier "dynamic"? "{" body+=constraint_body_item* "}";
		public ParserRule getRule() { return rule; }

		//"constraint" name=identifier "dynamic"? "{" body+=constraint_body_item* "}"
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//name=identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"dynamic"?
		public Keyword getDynamicKeyword_2() { return cDynamicKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=constraint_body_item*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//constraint_body_item
		public RuleCall getBodyConstraint_body_itemParserRuleCall_4_0() { return cBodyConstraint_body_itemParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Constraint_body_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constraint_body_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_or_dist_itemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForeach_constraint_itemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIf_constraint_itemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//constraint_body_item:
		//	expression_or_dist_item | foreach_constraint_item | if_constraint_item;
		public ParserRule getRule() { return rule; }

		//expression_or_dist_item | foreach_constraint_item | if_constraint_item
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression_or_dist_item
		public RuleCall getExpression_or_dist_itemParserRuleCall_0() { return cExpression_or_dist_itemParserRuleCall_0; }

		//foreach_constraint_item
		public RuleCall getForeach_constraint_itemParserRuleCall_1() { return cForeach_constraint_itemParserRuleCall_1; }

		//if_constraint_item
		public RuleCall getIf_constraint_itemParserRuleCall_2() { return cIf_constraint_itemParserRuleCall_2; }
	}

	public class Expression_or_dist_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_or_dist_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cImpl_constraintAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cImpl_constraintConstraint_setParserRuleCall_1_0_1_0 = (RuleCall)cImpl_constraintAssignment_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//expression_or_dist_item: // TODO: dist item
		// expression ("->" impl_constraint=constraint_set | ";");
		public ParserRule getRule() { return rule; }

		//// TODO: dist item
		// expression ("->" impl_constraint=constraint_set | ";")
		public Group getGroup() { return cGroup; }

		//// TODO: dist item
		// expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//"->" impl_constraint=constraint_set | ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"->" impl_constraint=constraint_set
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0() { return cHyphenMinusGreaterThanSignKeyword_1_0_0; }

		//impl_constraint=constraint_set
		public Assignment getImpl_constraintAssignment_1_0_1() { return cImpl_constraintAssignment_1_0_1; }

		//constraint_set
		public RuleCall getImpl_constraintConstraint_setParserRuleCall_1_0_1_0() { return cImpl_constraintConstraint_setParserRuleCall_1_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class If_constraint_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_constraint_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIf_exprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIf_exprExpressionParserRuleCall_2_0 = (RuleCall)cIf_exprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrue_caseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrue_caseConstraint_setParserRuleCall_4_0 = (RuleCall)cTrue_caseAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFalse_setAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFalse_setConstraint_setParserRuleCall_5_1_0 = (RuleCall)cFalse_setAssignment_5_1.eContents().get(0);
		
		//if_constraint_item:
		//	"if" "(" if_expr=expression ")" true_case=constraint_set ("else" false_set=constraint_set)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" if_expr=expression ")" true_case=constraint_set ("else" false_set=constraint_set)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if_expr=expression
		public Assignment getIf_exprAssignment_2() { return cIf_exprAssignment_2; }

		//expression
		public RuleCall getIf_exprExpressionParserRuleCall_2_0() { return cIf_exprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//true_case=constraint_set
		public Assignment getTrue_caseAssignment_4() { return cTrue_caseAssignment_4; }

		//constraint_set
		public RuleCall getTrue_caseConstraint_setParserRuleCall_4_0() { return cTrue_caseConstraint_setParserRuleCall_4_0; }

		//(=> "else" false_set=constraint_set)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//false_set=constraint_set
		public Assignment getFalse_setAssignment_5_1() { return cFalse_setAssignment_5_1; }

		//constraint_set
		public RuleCall getFalse_setConstraint_setParserRuleCall_5_1_0() { return cFalse_setConstraint_setParserRuleCall_5_1_0; }
	}

	public class Foreach_constraint_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "foreach_constraint_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyConstraint_setParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//foreach_constraint_item:
		//	"foreach" "(" expr=expression ")" body=constraint_set;
		public ParserRule getRule() { return rule; }

		//"foreach" "(" expr=expression ")" body=constraint_set
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=constraint_set
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//constraint_set
		public RuleCall getBodyConstraint_setParserRuleCall_4_0() { return cBodyConstraint_setParserRuleCall_4_0; }
	}

	public class Constraint_setElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constraint_set");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cItemsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cItemsConstraint_body_itemParserRuleCall_0_0 = (RuleCall)cItemsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cConstraint_setAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cItemsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cItemsConstraint_body_itemParserRuleCall_1_2_0 = (RuleCall)cItemsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//constraint_set:
		//	items+=constraint_body_item | "{" {constraint_set} items+=constraint_body_item* "}";
		public ParserRule getRule() { return rule; }

		//items+=constraint_body_item | "{" {constraint_set} items+=constraint_body_item* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//items+=constraint_body_item
		public Assignment getItemsAssignment_0() { return cItemsAssignment_0; }

		//constraint_body_item
		public RuleCall getItemsConstraint_body_itemParserRuleCall_0_0() { return cItemsConstraint_body_itemParserRuleCall_0_0; }

		//"{" {constraint_set} items+=constraint_body_item* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//{constraint_set}
		public Action getConstraint_setAction_1_1() { return cConstraint_setAction_1_1; }

		//items+=constraint_body_item*
		public Assignment getItemsAssignment_1_2() { return cItemsAssignment_1_2; }

		//constraint_body_item
		public RuleCall getItemsConstraint_body_itemParserRuleCall_1_2_0() { return cItemsConstraint_body_itemParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ********************************************************************
		// * Expressions
		// * 
		// * Note: ANTLR doesn't support left-recursion in grammar productions.
		// * Consequently, we can't say something like: 
		// *   expression := expression '+' expression.
		// * 
		// * The expression grammar below is refactored to eliminate left 
		// * recursion and properly implement operator precedence
		// * /
		//// TODO: should make special-purpose declaration 
		// constant_expression:
		//	expression;
		public ParserRule getRule() { return rule; }

		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final RuleCall cCondition_exprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expression:
		//	condition_expr;
		public ParserRule getRule() { return rule; }

		//condition_expr
		public RuleCall getCondition_exprParserRuleCall() { return cCondition_exprParserRuleCall; }
	}

	public class Condition_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "condition_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_or_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCondition_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTrue_exprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTrue_exprLogical_or_exprParserRuleCall_1_2_0 = (RuleCall)cTrue_exprAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFalse_exprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cFalse_exprLogical_or_exprParserRuleCall_1_4_0 = (RuleCall)cFalse_exprAssignment_1_4.eContents().get(0);
		
		//condition_expr returns expression:
		//	logical_or_expr ({condition_expr.left=current} "?" true_expr=logical_or_expr ":" false_expr=logical_or_expr)*;
		public ParserRule getRule() { return rule; }

		//logical_or_expr ({condition_expr.left=current} "?" true_expr=logical_or_expr ":" false_expr=logical_or_expr)*
		public Group getGroup() { return cGroup; }

		//logical_or_expr
		public RuleCall getLogical_or_exprParserRuleCall_0() { return cLogical_or_exprParserRuleCall_0; }

		//({condition_expr.left=current} "?" true_expr=logical_or_expr ":" false_expr=logical_or_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{condition_expr.left=current}
		public Action getCondition_exprLeftAction_1_0() { return cCondition_exprLeftAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//true_expr=logical_or_expr
		public Assignment getTrue_exprAssignment_1_2() { return cTrue_exprAssignment_1_2; }

		//logical_or_expr
		public RuleCall getTrue_exprLogical_or_exprParserRuleCall_1_2_0() { return cTrue_exprLogical_or_exprParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//false_expr=logical_or_expr
		public Assignment getFalse_exprAssignment_1_4() { return cFalse_exprAssignment_1_4; }

		//logical_or_expr
		public RuleCall getFalse_exprLogical_or_exprParserRuleCall_1_4_0() { return cFalse_exprLogical_or_exprParserRuleCall_1_4_0; }
	}

	public class Logical_or_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_or_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_and_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogical_or_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogical_and_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_or_expr returns expression:
		//	logical_and_expr ({logical_or_expr.left=current} "&&" right=logical_and_expr)*;
		public ParserRule getRule() { return rule; }

		//logical_and_expr ({logical_or_expr.left=current} "&&" right=logical_and_expr)*
		public Group getGroup() { return cGroup; }

		//logical_and_expr
		public RuleCall getLogical_and_exprParserRuleCall_0() { return cLogical_and_exprParserRuleCall_0; }

		//({logical_or_expr.left=current} "&&" right=logical_and_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{logical_or_expr.left=current}
		public Action getLogical_or_exprLeftAction_1_0() { return cLogical_or_exprLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=logical_and_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//logical_and_expr
		public RuleCall getRightLogical_and_exprParserRuleCall_1_2_0() { return cRightLogical_and_exprParserRuleCall_1_2_0; }
	}

	public class Logical_and_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_and_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_or_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogical_and_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_or_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_and_expr returns expression:
		//	binary_or_expr ({logical_and_expr.left=current} "||" right=binary_or_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_or_expr ({logical_and_expr.left=current} "||" right=binary_or_expr)*
		public Group getGroup() { return cGroup; }

		//binary_or_expr
		public RuleCall getBinary_or_exprParserRuleCall_0() { return cBinary_or_exprParserRuleCall_0; }

		//({logical_and_expr.left=current} "||" right=binary_or_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{logical_and_expr.left=current}
		public Action getLogical_and_exprLeftAction_1_0() { return cLogical_and_exprLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=binary_or_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_or_expr
		public RuleCall getRightBinary_or_exprParserRuleCall_1_2_0() { return cRightBinary_or_exprParserRuleCall_1_2_0; }
	}

	public class Binary_or_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_or_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_xor_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogical_or_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_xor_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_or_expr returns expression:
		//	binary_xor_expr ({logical_or_expr.left=current} "|" right=binary_xor_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_xor_expr ({logical_or_expr.left=current} "|" right=binary_xor_expr)*
		public Group getGroup() { return cGroup; }

		//binary_xor_expr
		public RuleCall getBinary_xor_exprParserRuleCall_0() { return cBinary_xor_exprParserRuleCall_0; }

		//({logical_or_expr.left=current} "|" right=binary_xor_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{logical_or_expr.left=current}
		public Action getLogical_or_exprLeftAction_1_0() { return cLogical_or_exprLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=binary_xor_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_xor_expr
		public RuleCall getRightBinary_xor_exprParserRuleCall_1_2_0() { return cRightBinary_xor_exprParserRuleCall_1_2_0; }
	}

	public class Binary_xor_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_xor_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_and_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_xor_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_and_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_xor_expr returns expression:
		//	binary_and_expr ({binary_xor_expr.left=current} "^" right=binary_and_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_and_expr ({binary_xor_expr.left=current} "^" right=binary_and_expr)*
		public Group getGroup() { return cGroup; }

		//binary_and_expr
		public RuleCall getBinary_and_exprParserRuleCall_0() { return cBinary_and_exprParserRuleCall_0; }

		//({binary_xor_expr.left=current} "^" right=binary_and_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_xor_expr.left=current}
		public Action getBinary_xor_exprLeftAction_1_0() { return cBinary_xor_exprLeftAction_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//right=binary_and_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_and_expr
		public RuleCall getRightBinary_and_exprParserRuleCall_1_2_0() { return cRightBinary_and_exprParserRuleCall_1_2_0; }
	}

	public class Binary_and_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_and_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_equality_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_and_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogical_equality_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_and_expr returns expression:
		//	logical_equality_expr ({binary_and_expr.left=current} "&" right=logical_equality_expr)*;
		public ParserRule getRule() { return rule; }

		//logical_equality_expr ({binary_and_expr.left=current} "&" right=logical_equality_expr)*
		public Group getGroup() { return cGroup; }

		//logical_equality_expr
		public RuleCall getLogical_equality_exprParserRuleCall_0() { return cLogical_equality_exprParserRuleCall_0; }

		//({binary_and_expr.left=current} "&" right=logical_equality_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_and_expr.left=current}
		public Action getBinary_and_exprLeftAction_1_0() { return cBinary_and_exprLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=logical_equality_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//logical_equality_expr
		public RuleCall getRightLogical_equality_exprParserRuleCall_1_2_0() { return cRightLogical_equality_exprParserRuleCall_1_2_0; }
	}

	public class Logical_equality_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_equality_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_inequality_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogical_equality_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEq_neq_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogical_inequality_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_equality_expr returns expression:
		//	logical_inequality_expr ({logical_equality_expr.left=current} op=eq_neq_op right=logical_inequality_expr)*;
		public ParserRule getRule() { return rule; }

		//logical_inequality_expr ({logical_equality_expr.left=current} op=eq_neq_op right=logical_inequality_expr)*
		public Group getGroup() { return cGroup; }

		//logical_inequality_expr
		public RuleCall getLogical_inequality_exprParserRuleCall_0() { return cLogical_inequality_exprParserRuleCall_0; }

		//({logical_equality_expr.left=current} op=eq_neq_op right=logical_inequality_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{logical_equality_expr.left=current}
		public Action getLogical_equality_exprLeftAction_1_0() { return cLogical_equality_exprLeftAction_1_0; }

		//op=eq_neq_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//eq_neq_op
		public RuleCall getOpEq_neq_opParserRuleCall_1_1_0() { return cOpEq_neq_opParserRuleCall_1_1_0; }

		//right=logical_inequality_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//logical_inequality_expr
		public RuleCall getRightLogical_inequality_exprParserRuleCall_1_2_0() { return cRightLogical_inequality_exprParserRuleCall_1_2_0; }
	}

	public class Logical_inequality_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_inequality_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_shift_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogical_inequality_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOpInsideKeyword_1_1_0_4 = (Keyword)cOpAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_shift_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_inequality_expr returns expression:
		//	binary_shift_expr ({logical_inequality_expr.left=current} op=("<" | "<=" | ">" | ">=" | "inside")
		//	right=binary_shift_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_shift_expr ({logical_inequality_expr.left=current} op=("<" | "<=" | ">" | ">=" | "inside")
		//right=binary_shift_expr)*
		public Group getGroup() { return cGroup; }

		//binary_shift_expr
		public RuleCall getBinary_shift_exprParserRuleCall_0() { return cBinary_shift_exprParserRuleCall_0; }

		//({logical_inequality_expr.left=current} op=("<" | "<=" | ">" | ">=" | "inside") right=binary_shift_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{logical_inequality_expr.left=current}
		public Action getLogical_inequality_exprLeftAction_1_0() { return cLogical_inequality_exprLeftAction_1_0; }

		//op=("<" | "<=" | ">" | ">=" | "inside")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<" | "<=" | ">" | ">=" | "inside"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//"inside"
		public Keyword getOpInsideKeyword_1_1_0_4() { return cOpInsideKeyword_1_1_0_4; }

		//right=binary_shift_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_shift_expr
		public RuleCall getRightBinary_shift_exprParserRuleCall_1_2_0() { return cRightBinary_shift_exprParserRuleCall_1_2_0; }
	}

	public class Binary_shift_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_shift_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_add_sub_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_shift_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpShift_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_add_sub_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_shift_expr returns expression:
		//	binary_add_sub_expr ({binary_shift_expr.left=current} op=shift_op right=binary_add_sub_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_add_sub_expr ({binary_shift_expr.left=current} op=shift_op right=binary_add_sub_expr)*
		public Group getGroup() { return cGroup; }

		//binary_add_sub_expr
		public RuleCall getBinary_add_sub_exprParserRuleCall_0() { return cBinary_add_sub_exprParserRuleCall_0; }

		//({binary_shift_expr.left=current} op=shift_op right=binary_add_sub_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_shift_expr.left=current}
		public Action getBinary_shift_exprLeftAction_1_0() { return cBinary_shift_exprLeftAction_1_0; }

		//op=shift_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//shift_op
		public RuleCall getOpShift_opParserRuleCall_1_1_0() { return cOpShift_opParserRuleCall_1_1_0; }

		//right=binary_add_sub_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_add_sub_expr
		public RuleCall getRightBinary_add_sub_exprParserRuleCall_1_2_0() { return cRightBinary_add_sub_exprParserRuleCall_1_2_0; }
	}

	public class Binary_add_sub_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_add_sub_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_mul_div_mod_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_add_sub_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAdd_sub_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_mul_div_mod_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_add_sub_expr returns expression:
		//	binary_mul_div_mod_expr ({binary_add_sub_expr.left=current} op=add_sub_op right=binary_mul_div_mod_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_mul_div_mod_expr ({binary_add_sub_expr.left=current} op=add_sub_op right=binary_mul_div_mod_expr)*
		public Group getGroup() { return cGroup; }

		//binary_mul_div_mod_expr
		public RuleCall getBinary_mul_div_mod_exprParserRuleCall_0() { return cBinary_mul_div_mod_exprParserRuleCall_0; }

		//({binary_add_sub_expr.left=current} op=add_sub_op right=binary_mul_div_mod_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_add_sub_expr.left=current}
		public Action getBinary_add_sub_exprLeftAction_1_0() { return cBinary_add_sub_exprLeftAction_1_0; }

		//op=add_sub_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//add_sub_op
		public RuleCall getOpAdd_sub_opParserRuleCall_1_1_0() { return cOpAdd_sub_opParserRuleCall_1_1_0; }

		//right=binary_mul_div_mod_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_mul_div_mod_expr
		public RuleCall getRightBinary_mul_div_mod_exprParserRuleCall_1_2_0() { return cRightBinary_mul_div_mod_exprParserRuleCall_1_2_0; }
	}

	public class Binary_mul_div_mod_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_mul_div_mod_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinary_exp_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_mul_div_mod_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMul_div_mod_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinary_exp_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_mul_div_mod_expr returns expression:
		//	binary_exp_expr ({binary_mul_div_mod_expr.left=current} op=mul_div_mod_op right=binary_exp_expr)*;
		public ParserRule getRule() { return rule; }

		//binary_exp_expr ({binary_mul_div_mod_expr.left=current} op=mul_div_mod_op right=binary_exp_expr)*
		public Group getGroup() { return cGroup; }

		//binary_exp_expr
		public RuleCall getBinary_exp_exprParserRuleCall_0() { return cBinary_exp_exprParserRuleCall_0; }

		//({binary_mul_div_mod_expr.left=current} op=mul_div_mod_op right=binary_exp_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_mul_div_mod_expr.left=current}
		public Action getBinary_mul_div_mod_exprLeftAction_1_0() { return cBinary_mul_div_mod_exprLeftAction_1_0; }

		//op=mul_div_mod_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//mul_div_mod_op
		public RuleCall getOpMul_div_mod_opParserRuleCall_1_1_0() { return cOpMul_div_mod_opParserRuleCall_1_1_0; }

		//right=binary_exp_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//binary_exp_expr
		public RuleCall getRightBinary_exp_exprParserRuleCall_1_2_0() { return cRightBinary_exp_exprParserRuleCall_1_2_0; }
	}

	public class Binary_exp_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "binary_exp_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinary_exp_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnary_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//binary_exp_expr returns expression:
		//	unary_expr ({binary_exp_expr.left=current} "**" right=unary_expr)*;
		public ParserRule getRule() { return rule; }

		//unary_expr ({binary_exp_expr.left=current} "**" right=unary_expr)*
		public Group getGroup() { return cGroup; }

		//unary_expr
		public RuleCall getUnary_exprParserRuleCall_0() { return cUnary_exprParserRuleCall_0; }

		//({binary_exp_expr.left=current} "**" right=unary_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{binary_exp_expr.left=current}
		public Action getBinary_exp_exprLeftAction_1_0() { return cBinary_exp_exprLeftAction_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }

		//right=unary_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//unary_expr
		public RuleCall getRightUnary_exprParserRuleCall_1_2_0() { return cRightUnary_exprParserRuleCall_1_2_0; }
	}

	public class Unary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAmpersandKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//unary_op:
		//	"+" | "-" | "!" | "~" | "&" | "|" | "^";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "!" | "~" | "&" | "|" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }

		//"&"
		public Keyword getAmpersandKeyword_4() { return cAmpersandKeyword_4; }

		//"|"
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }

		//"^"
		public Keyword getCircumflexAccentKeyword_6() { return cCircumflexAccentKeyword_6; }
	}

	public class Eq_neq_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eq_neq_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//eq_neq_op:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class Shift_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "shift_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//shift_op:
		//	"<<" | ">>";
		public ParserRule getRule() { return rule; }

		//"<<" | ">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }
	}

	public class Add_sub_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "add_sub_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//add_sub_op:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class Mul_div_mod_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mul_div_mod_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//mul_div_mod_op:
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class Unary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_opParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//unary_expr returns expression:
		//	unary_op? primary;
		public ParserRule getRule() { return rule; }

		//unary_op? primary
		public Group getGroup() { return cGroup; }

		//unary_op?
		public RuleCall getUnary_opParserRuleCall_0() { return cUnary_opParserRuleCall_0; }

		//primary
		public RuleCall getPrimaryParserRuleCall_1() { return cPrimaryParserRuleCall_1; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprLiteralParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprHierarchical_idParserRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLhsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cLhsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cColonKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cRhsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cRhsExpressionParserRuleCall_2_1_2_1_0 = (RuleCall)cRhsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//primary returns expression:
		//	expr=literal | "(" expr=expression ")" | expr=hierarchical_id ("[" lhs=expression (":" rhs=expression)? "]")?;
		public ParserRule getRule() { return rule; }

		//expr=literal | "(" expr=expression ")" | expr=hierarchical_id ("[" lhs=expression (":" rhs=expression)? "]")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=literal
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//literal
		public RuleCall getExprLiteralParserRuleCall_0_0() { return cExprLiteralParserRuleCall_0_0; }

		//"(" expr=expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//expr=expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//expr=hierarchical_id ("[" lhs=expression (":" rhs=expression)? "]")?
		public Group getGroup_2() { return cGroup_2; }

		//expr=hierarchical_id
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }

		//hierarchical_id
		public RuleCall getExprHierarchical_idParserRuleCall_2_0_0() { return cExprHierarchical_idParserRuleCall_2_0_0; }

		//("[" lhs=expression (":" rhs=expression)? "]")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//lhs=expression
		public Assignment getLhsAssignment_2_1_1() { return cLhsAssignment_2_1_1; }

		//expression
		public RuleCall getLhsExpressionParserRuleCall_2_1_1_0() { return cLhsExpressionParserRuleCall_2_1_1_0; }

		//(":" rhs=expression)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//":"
		public Keyword getColonKeyword_2_1_2_0() { return cColonKeyword_2_1_2_0; }

		//rhs=expression
		public Assignment getRhsAssignment_2_1_2_1() { return cRhsAssignment_2_1_2_1; }

		//expression
		public RuleCall getRhsExpressionParserRuleCall_2_1_2_1_0() { return cRhsExpressionParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperInterface_declarationCrossReference_2_1_0 = (CrossReference)cSuperAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperInterface_declarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperInterface_declarationCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyInterface_body_itemParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//interface_declaration:
		//	"interface" name=identifier ("extends" super=[interface_declaration])? "{" body+=interface_body_item* "}";
		public ParserRule getRule() { return rule; }

		//"interface" name=identifier ("extends" super=[interface_declaration])? "{" body+=interface_body_item* "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//("extends" super=[interface_declaration])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//super=[interface_declaration]
		public Assignment getSuperAssignment_2_1() { return cSuperAssignment_2_1; }

		//[interface_declaration]
		public CrossReference getSuperInterface_declarationCrossReference_2_1_0() { return cSuperInterface_declarationCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperInterface_declarationIDTerminalRuleCall_2_1_0_1() { return cSuperInterface_declarationIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=interface_body_item*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//interface_body_item
		public RuleCall getBodyInterface_body_itemParserRuleCall_4_0() { return cBodyInterface_body_itemParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Interface_body_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_body_item");
		private final RuleCall cAction_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//interface_body_item:
		//	action_declaration;
		public ParserRule getRule() { return rule; }

		//action_declaration
		public RuleCall getAction_declarationParserRuleCall() { return cAction_declarationParserRuleCall; }
	}

	public class Action_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPortsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPortsAction_portlistParserRuleCall_3_0_0 = (RuleCall)cPortsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPortsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPortsAction_portlistParserRuleCall_3_1_1_0 = (RuleCall)cPortsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//action_declaration:
		//	"action" name=identifier "(" (ports+=action_portlist ("," ports+=action_portlist)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//"action" name=identifier "(" (ports+=action_portlist ("," ports+=action_portlist)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(ports+=action_portlist ("," ports+=action_portlist)*)?
		public Group getGroup_3() { return cGroup_3; }

		//ports+=action_portlist
		public Assignment getPortsAssignment_3_0() { return cPortsAssignment_3_0; }

		//action_portlist
		public RuleCall getPortsAction_portlistParserRuleCall_3_0_0() { return cPortsAction_portlistParserRuleCall_3_0_0; }

		//("," ports+=action_portlist)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//ports+=action_portlist
		public Assignment getPortsAssignment_3_1_1() { return cPortsAssignment_3_1_1; }

		//action_portlist
		public RuleCall getPortsAction_portlistParserRuleCall_3_1_1_0() { return cPortsAction_portlistParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Action_portlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "action_portlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIo_directionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeData_typeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeData_typeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeData_typeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//action_portlist:
		//	io_direction? type=[data_type] name=identifier;
		public ParserRule getRule() { return rule; }

		//io_direction? type=[data_type] name=identifier
		public Group getGroup() { return cGroup; }

		//io_direction?
		public RuleCall getIo_directionParserRuleCall_0() { return cIo_directionParserRuleCall_0; }

		//type=[data_type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[data_type]
		public CrossReference getTypeData_typeCrossReference_1_0() { return cTypeData_typeCrossReference_1_0; }

		//ID
		public RuleCall getTypeData_typeIDTerminalRuleCall_1_0_1() { return cTypeData_typeIDTerminalRuleCall_1_0_1; }

		//name=identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }
	}

	public class Io_directionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io_direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInoutKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//io_direction:
		//	"input" | "output" | "inout";
		public ParserRule getRule() { return rule; }

		//"input" | "output" | "inout"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//"inout"
		public Keyword getInoutKeyword_2() { return cInoutKeyword_2; }
	}

	public class Graph_data_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_data_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeData_typeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeData_typeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeData_typeCrossReference_1_0.eContents().get(1);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamesIdentifierParserRuleCall_2_0 = (RuleCall)cNamesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortmapsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortmapsPort_mapParserRuleCall_3_1_0 = (RuleCall)cPortmapsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPortmapsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPortmapsPort_mapParserRuleCall_3_2_1_0 = (RuleCall)cPortmapsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNamesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_4_1_0 = (RuleCall)cNamesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cPortmapsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cPortmapsPort_mapParserRuleCall_4_2_1_0 = (RuleCall)cPortmapsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cPortmapsAssignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final RuleCall cPortmapsPort_mapParserRuleCall_4_2_2_1_0 = (RuleCall)cPortmapsAssignment_4_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2_3 = (Keyword)cGroup_4_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//graph_data_declaration:
		//	"rand"? type=[data_type] names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")? (","
		//	names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?)* ";";
		public ParserRule getRule() { return rule; }

		//"rand"? type=[data_type] names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")? (","
		//names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?)* ";"
		public Group getGroup() { return cGroup; }

		//"rand"?
		public Keyword getRandKeyword_0() { return cRandKeyword_0; }

		//type=[data_type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[data_type]
		public CrossReference getTypeData_typeCrossReference_1_0() { return cTypeData_typeCrossReference_1_0; }

		//ID
		public RuleCall getTypeData_typeIDTerminalRuleCall_1_0_1() { return cTypeData_typeIDTerminalRuleCall_1_0_1; }

		//names+=identifier
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_2_0() { return cNamesIdentifierParserRuleCall_2_0; }

		//("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//portmaps+=port_map
		public Assignment getPortmapsAssignment_3_1() { return cPortmapsAssignment_3_1; }

		//port_map
		public RuleCall getPortmapsPort_mapParserRuleCall_3_1_0() { return cPortmapsPort_mapParserRuleCall_3_1_0; }

		//("," portmaps+=port_map)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//portmaps+=port_map
		public Assignment getPortmapsAssignment_3_2_1() { return cPortmapsAssignment_3_2_1; }

		//port_map
		public RuleCall getPortmapsPort_mapParserRuleCall_3_2_1_0() { return cPortmapsPort_mapParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//("," names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//names+=identifier
		public Assignment getNamesAssignment_4_1() { return cNamesAssignment_4_1; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_4_1_0() { return cNamesIdentifierParserRuleCall_4_1_0; }

		//("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2_0() { return cLeftParenthesisKeyword_4_2_0; }

		//portmaps+=port_map
		public Assignment getPortmapsAssignment_4_2_1() { return cPortmapsAssignment_4_2_1; }

		//port_map
		public RuleCall getPortmapsPort_mapParserRuleCall_4_2_1_0() { return cPortmapsPort_mapParserRuleCall_4_2_1_0; }

		//("," portmaps+=port_map)*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }

		//","
		public Keyword getCommaKeyword_4_2_2_0() { return cCommaKeyword_4_2_2_0; }

		//portmaps+=port_map
		public Assignment getPortmapsAssignment_4_2_2_1() { return cPortmapsAssignment_4_2_2_1; }

		//port_map
		public RuleCall getPortmapsPort_mapParserRuleCall_4_2_2_1_0() { return cPortmapsPort_mapParserRuleCall_4_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2_3() { return cRightParenthesisKeyword_4_2_3; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Symbol_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "symbol_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSymbolKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cInline_ruleAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cInline_ruleRule_stmt_or_blockParserRuleCall_0_2_1_0 = (RuleCall)cInline_ruleAssignment_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSymbolKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cNamesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_1_2_1_0 = (RuleCall)cNamesAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cInline_ruleAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cInline_ruleRule_stmt_or_blockParserRuleCall_1_2_2_1_0 = (RuleCall)cInline_ruleAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//symbol_declaration:
		//	"symbol" name=identifier (":=" inline_rule=rule_stmt_or_block ";")? | "symbol" names+=identifier (","
		//	names+=identifier (":=" inline_rule=rule_stmt_or_block)?) ";";
		public ParserRule getRule() { return rule; }

		//"symbol" name=identifier (":=" inline_rule=rule_stmt_or_block ";")? | "symbol" names+=identifier ("," names+=identifier
		//(":=" inline_rule=rule_stmt_or_block)?) ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"symbol" name=identifier (":=" inline_rule=rule_stmt_or_block ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"symbol"
		public Keyword getSymbolKeyword_0_0() { return cSymbolKeyword_0_0; }

		//name=identifier
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//identifier
		public RuleCall getNameIdentifierParserRuleCall_0_1_0() { return cNameIdentifierParserRuleCall_0_1_0; }

		//(":=" inline_rule=rule_stmt_or_block ";")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_0_2_0() { return cColonEqualsSignKeyword_0_2_0; }

		//inline_rule=rule_stmt_or_block
		public Assignment getInline_ruleAssignment_0_2_1() { return cInline_ruleAssignment_0_2_1; }

		//rule_stmt_or_block
		public RuleCall getInline_ruleRule_stmt_or_blockParserRuleCall_0_2_1_0() { return cInline_ruleRule_stmt_or_blockParserRuleCall_0_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2_2() { return cSemicolonKeyword_0_2_2; }

		//"symbol" names+=identifier ("," names+=identifier (":=" inline_rule=rule_stmt_or_block)?) ";"
		public Group getGroup_1() { return cGroup_1; }

		//"symbol"
		public Keyword getSymbolKeyword_1_0() { return cSymbolKeyword_1_0; }

		//names+=identifier
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_1_1_0() { return cNamesIdentifierParserRuleCall_1_1_0; }

		//"," names+=identifier (":=" inline_rule=rule_stmt_or_block)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//names+=identifier
		public Assignment getNamesAssignment_1_2_1() { return cNamesAssignment_1_2_1; }

		//identifier
		public RuleCall getNamesIdentifierParserRuleCall_1_2_1_0() { return cNamesIdentifierParserRuleCall_1_2_1_0; }

		//(":=" inline_rule=rule_stmt_or_block)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2_2_0() { return cColonEqualsSignKeyword_1_2_2_0; }

		//inline_rule=rule_stmt_or_block
		public Assignment getInline_ruleAssignment_1_2_2_1() { return cInline_ruleAssignment_1_2_2_1; }

		//rule_stmt_or_block
		public RuleCall getInline_ruleRule_stmt_or_blockParserRuleCall_1_2_2_1_0() { return cInline_ruleRule_stmt_or_blockParserRuleCall_1_2_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class Port_mapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "port_map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortIdentifierParserRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMapHierarchical_idParserRuleCall_3_0 = (RuleCall)cMapAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//port_map:
		//	"." port=identifier "(" map=hierarchical_id ")";
		public ParserRule getRule() { return rule; }

		//"." port=identifier "(" map=hierarchical_id ")"
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//port=identifier
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//identifier
		public RuleCall getPortIdentifierParserRuleCall_1_0() { return cPortIdentifierParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//map=hierarchical_id
		public Assignment getMapAssignment_3() { return cMapAssignment_3; }

		//hierarchical_id
		public RuleCall getMapHierarchical_idParserRuleCall_3_0() { return cMapHierarchical_idParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Graph_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_identifier");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ********************************************************************
		// * Identifiers, literals, etc
		// * /
		//graph_identifier:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class Struct_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "struct_identifier");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//struct_identifier:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class Interface_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_identifier");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//interface_identifier:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class Graph_or_struct_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_or_struct_identifier");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//graph_or_struct_identifier:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class Graph_struct_interface_identiiferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph_struct_interface_identiifer");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//graph_struct_interface_identiifer:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class Port_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "port_identifier");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//port_identifier:
		//	identifier;
		public ParserRule getRule() { return rule; }

		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//identifier:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class Hierarchical_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hierarchical_id");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIdentifierParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//hierarchical_id:
		//	value=identifier ("." identifier)*;
		public ParserRule getRule() { return rule; }

		//value=identifier ("." identifier)*
		public Group getGroup() { return cGroup; }

		//value=identifier
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//identifier
		public RuleCall getValueIdentifierParserRuleCall_0_0() { return cValueIdentifierParserRuleCall_0_0; }

		//("." identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *	  decimal_number 
		//	| octal_number
		//	| binary_number
		//	| hex_number * / literal:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class Decimal_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "decimal_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cSizeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//decimal_number:
		//	value=INT | size?;
		public ParserRule getRule() { return rule; }

		//value=INT | size?
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//size?
		public RuleCall getSizeParserRuleCall_1() { return cSizeParserRuleCall_1; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "size");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////terminal identifier:
		// //	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
		// //;
		// //graph_instance:
		//
		////	type=[graph_declaration] name=identifier ('(' portmaps+=port_map (',' portmaps+=port_map)* ')')? ';'
		// //;
		// size:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final Portable_stimulus_descriptionElements pPortable_stimulus_description;
	private final Graph_or_struct_declarationElements pGraph_or_struct_declaration;
	private final Graph_struct_ifc_declarationElements pGraph_struct_ifc_declaration;
	private final Graph_declarationElements pGraph_declaration;
	private final Port_declarationElements pPort_declaration;
	private final Struct_declarationElements pStruct_declaration;
	private final Struct_body_itemElements pStruct_body_item;
	private final Graph_body_itemElements pGraph_body_item;
	private final Symbol_definitionElements pSymbol_definition;
	private final Rule_productionElements pRule_production;
	private final Rule_stmt_or_blockElements pRule_stmt_or_block;
	private final Rule_stmt_alt_parallel_seqElements pRule_stmt_alt_parallel_seq;
	private final Rule_stmt_primaryElements pRule_stmt_primary;
	private final Rule_rule_stmt_parallel_altElements pRule_rule_stmt_parallel_alt;
	private final Rule_stmt_parallelElements pRule_stmt_parallel;
	private final Rule_sequenceElements pRule_sequence;
	private final Rule_seq_itemElements pRule_seq_item;
	private final Rule_with_clauseElements pRule_with_clause;
	private final Ifc_call_parameter_listElements pIfc_call_parameter_list;
	private final Rule_repeat_stmtElements pRule_repeat_stmt;
	private final Overrides_declarationElements pOverrides_declaration;
	private final Override_stmtElements pOverride_stmt;
	private final Type_overrideElements pType_override;
	private final Instance_overrideElements pInstance_override;
	private final Data_declarationElements pData_declaration;
	private final Data_typeElements pData_type;
	private final User_defined_typeElements pUser_defined_type;
	private final Typedef_declarationElements pTypedef_declaration;
	private final Enum_typeElements pEnum_type;
	private final Integer_typeElements pInteger_type;
	private final Integer_atom_typeElements pInteger_atom_type;
	private final Type_inside_clauseElements pType_inside_clause;
	private final Open_range_listElements pOpen_range_list;
	private final Open_range_valueElements pOpen_range_value;
	private final Constraint_declarationElements pConstraint_declaration;
	private final Constraint_body_itemElements pConstraint_body_item;
	private final Expression_or_dist_itemElements pExpression_or_dist_item;
	private final If_constraint_itemElements pIf_constraint_item;
	private final Foreach_constraint_itemElements pForeach_constraint_item;
	private final Constraint_setElements pConstraint_set;
	private final Constant_expressionElements pConstant_expression;
	private final ExpressionElements pExpression;
	private final Condition_exprElements pCondition_expr;
	private final Logical_or_exprElements pLogical_or_expr;
	private final Logical_and_exprElements pLogical_and_expr;
	private final Binary_or_exprElements pBinary_or_expr;
	private final Binary_xor_exprElements pBinary_xor_expr;
	private final Binary_and_exprElements pBinary_and_expr;
	private final Logical_equality_exprElements pLogical_equality_expr;
	private final Logical_inequality_exprElements pLogical_inequality_expr;
	private final Binary_shift_exprElements pBinary_shift_expr;
	private final Binary_add_sub_exprElements pBinary_add_sub_expr;
	private final Binary_mul_div_mod_exprElements pBinary_mul_div_mod_expr;
	private final Binary_exp_exprElements pBinary_exp_expr;
	private final Unary_opElements pUnary_op;
	private final Eq_neq_opElements pEq_neq_op;
	private final Shift_opElements pShift_op;
	private final Add_sub_opElements pAdd_sub_op;
	private final Mul_div_mod_opElements pMul_div_mod_op;
	private final Unary_exprElements pUnary_expr;
	private final PrimaryElements pPrimary;
	private final Interface_declarationElements pInterface_declaration;
	private final Interface_body_itemElements pInterface_body_item;
	private final Action_declarationElements pAction_declaration;
	private final Action_portlistElements pAction_portlist;
	private final Io_directionElements pIo_direction;
	private final Graph_data_declarationElements pGraph_data_declaration;
	private final Symbol_declarationElements pSymbol_declaration;
	private final Port_mapElements pPort_map;
	private final Graph_identifierElements pGraph_identifier;
	private final Struct_identifierElements pStruct_identifier;
	private final Interface_identifierElements pInterface_identifier;
	private final Graph_or_struct_identifierElements pGraph_or_struct_identifier;
	private final Graph_struct_interface_identiiferElements pGraph_struct_interface_identiifer;
	private final Port_identifierElements pPort_identifier;
	private final IdentifierElements pIdentifier;
	private final Hierarchical_idElements pHierarchical_id;
	private final LiteralElements pLiteral;
	private final Decimal_numberElements pDecimal_number;
	private final SizeElements pSize;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PSSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPortable_stimulus_description = new Portable_stimulus_descriptionElements();
		this.pGraph_or_struct_declaration = new Graph_or_struct_declarationElements();
		this.pGraph_struct_ifc_declaration = new Graph_struct_ifc_declarationElements();
		this.pGraph_declaration = new Graph_declarationElements();
		this.pPort_declaration = new Port_declarationElements();
		this.pStruct_declaration = new Struct_declarationElements();
		this.pStruct_body_item = new Struct_body_itemElements();
		this.pGraph_body_item = new Graph_body_itemElements();
		this.pSymbol_definition = new Symbol_definitionElements();
		this.pRule_production = new Rule_productionElements();
		this.pRule_stmt_or_block = new Rule_stmt_or_blockElements();
		this.pRule_stmt_alt_parallel_seq = new Rule_stmt_alt_parallel_seqElements();
		this.pRule_stmt_primary = new Rule_stmt_primaryElements();
		this.pRule_rule_stmt_parallel_alt = new Rule_rule_stmt_parallel_altElements();
		this.pRule_stmt_parallel = new Rule_stmt_parallelElements();
		this.pRule_sequence = new Rule_sequenceElements();
		this.pRule_seq_item = new Rule_seq_itemElements();
		this.pRule_with_clause = new Rule_with_clauseElements();
		this.pIfc_call_parameter_list = new Ifc_call_parameter_listElements();
		this.pRule_repeat_stmt = new Rule_repeat_stmtElements();
		this.pOverrides_declaration = new Overrides_declarationElements();
		this.pOverride_stmt = new Override_stmtElements();
		this.pType_override = new Type_overrideElements();
		this.pInstance_override = new Instance_overrideElements();
		this.pData_declaration = new Data_declarationElements();
		this.pData_type = new Data_typeElements();
		this.pUser_defined_type = new User_defined_typeElements();
		this.pTypedef_declaration = new Typedef_declarationElements();
		this.pEnum_type = new Enum_typeElements();
		this.pInteger_type = new Integer_typeElements();
		this.pInteger_atom_type = new Integer_atom_typeElements();
		this.pType_inside_clause = new Type_inside_clauseElements();
		this.pOpen_range_list = new Open_range_listElements();
		this.pOpen_range_value = new Open_range_valueElements();
		this.pConstraint_declaration = new Constraint_declarationElements();
		this.pConstraint_body_item = new Constraint_body_itemElements();
		this.pExpression_or_dist_item = new Expression_or_dist_itemElements();
		this.pIf_constraint_item = new If_constraint_itemElements();
		this.pForeach_constraint_item = new Foreach_constraint_itemElements();
		this.pConstraint_set = new Constraint_setElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pExpression = new ExpressionElements();
		this.pCondition_expr = new Condition_exprElements();
		this.pLogical_or_expr = new Logical_or_exprElements();
		this.pLogical_and_expr = new Logical_and_exprElements();
		this.pBinary_or_expr = new Binary_or_exprElements();
		this.pBinary_xor_expr = new Binary_xor_exprElements();
		this.pBinary_and_expr = new Binary_and_exprElements();
		this.pLogical_equality_expr = new Logical_equality_exprElements();
		this.pLogical_inequality_expr = new Logical_inequality_exprElements();
		this.pBinary_shift_expr = new Binary_shift_exprElements();
		this.pBinary_add_sub_expr = new Binary_add_sub_exprElements();
		this.pBinary_mul_div_mod_expr = new Binary_mul_div_mod_exprElements();
		this.pBinary_exp_expr = new Binary_exp_exprElements();
		this.pUnary_op = new Unary_opElements();
		this.pEq_neq_op = new Eq_neq_opElements();
		this.pShift_op = new Shift_opElements();
		this.pAdd_sub_op = new Add_sub_opElements();
		this.pMul_div_mod_op = new Mul_div_mod_opElements();
		this.pUnary_expr = new Unary_exprElements();
		this.pPrimary = new PrimaryElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pInterface_body_item = new Interface_body_itemElements();
		this.pAction_declaration = new Action_declarationElements();
		this.pAction_portlist = new Action_portlistElements();
		this.pIo_direction = new Io_directionElements();
		this.pGraph_data_declaration = new Graph_data_declarationElements();
		this.pSymbol_declaration = new Symbol_declarationElements();
		this.pPort_map = new Port_mapElements();
		this.pGraph_identifier = new Graph_identifierElements();
		this.pStruct_identifier = new Struct_identifierElements();
		this.pInterface_identifier = new Interface_identifierElements();
		this.pGraph_or_struct_identifier = new Graph_or_struct_identifierElements();
		this.pGraph_struct_interface_identiifer = new Graph_struct_interface_identiiferElements();
		this.pPort_identifier = new Port_identifierElements();
		this.pIdentifier = new IdentifierElements();
		this.pHierarchical_id = new Hierarchical_idElements();
		this.pLiteral = new LiteralElements();
		this.pDecimal_number = new Decimal_numberElements();
		this.pSize = new SizeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.sf.psstools.lang.PSS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	topLevel+=portable_stimulus_description*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//portable_stimulus_description:
	//	graph_declaration | struct_declaration | interface_declaration |
	//	/ * |
	//	include_statement |
	//	bins_declaration |
	//	package_declaration * / data_declaration;
	public Portable_stimulus_descriptionElements getPortable_stimulus_descriptionAccess() {
		return pPortable_stimulus_description;
	}
	
	public ParserRule getPortable_stimulus_descriptionRule() {
		return getPortable_stimulus_descriptionAccess().getRule();
	}

	//graph_or_struct_declaration:
	//	graph_declaration | struct_declaration;
	public Graph_or_struct_declarationElements getGraph_or_struct_declarationAccess() {
		return pGraph_or_struct_declaration;
	}
	
	public ParserRule getGraph_or_struct_declarationRule() {
		return getGraph_or_struct_declarationAccess().getRule();
	}

	//graph_struct_ifc_declaration:
	//	graph_declaration | struct_declaration | interface_declaration;
	public Graph_struct_ifc_declarationElements getGraph_struct_ifc_declarationAccess() {
		return pGraph_struct_ifc_declaration;
	}
	
	public ParserRule getGraph_struct_ifc_declarationRule() {
		return getGraph_struct_ifc_declarationAccess().getRule();
	}

	//graph_declaration:
	//	"graph" name=graph_identifier ("(" (ports+=port_declaration ("," ports+=port_declaration)*)? ")")? ("extends"
	//	super=[graph_or_struct_declaration|graph_or_struct_identifier])? "{" body+=graph_body_item* "}";
	public Graph_declarationElements getGraph_declarationAccess() {
		return pGraph_declaration;
	}
	
	public ParserRule getGraph_declarationRule() {
		return getGraph_declarationAccess().getRule();
	}

	//port_declaration:
	//	"export"? ifc_type=[interface_declaration|interface_identifier] name=port_identifier;
	public Port_declarationElements getPort_declarationAccess() {
		return pPort_declaration;
	}
	
	public ParserRule getPort_declarationRule() {
		return getPort_declarationAccess().getRule();
	}

	//struct_declaration:
	//	"struct" name=identifier ("extends" super=[struct_declaration|struct_identifier])? "{" body+=struct_body_item* "}";
	public Struct_declarationElements getStruct_declarationAccess() {
		return pStruct_declaration;
	}
	
	public ParserRule getStruct_declarationRule() {
		return getStruct_declarationAccess().getRule();
	}

	//struct_body_item:
	//	constraint_declaration | "rand"? data_declaration | / *
	//	bins_declaration |
	//	bin_scheme_declaration * /
	//	typedef_declaration;
	public Struct_body_itemElements getStruct_body_itemAccess() {
		return pStruct_body_item;
	}
	
	public ParserRule getStruct_body_itemRule() {
		return getStruct_body_itemAccess().getRule();
	}

	//graph_body_item:
	//	overrides_declaration | constraint_declaration | "rand"? data_declaration | typedef_declaration | symbol_declaration
	//	| symbol_definition;
	public Graph_body_itemElements getGraph_body_itemAccess() {
		return pGraph_body_item;
	}
	
	public ParserRule getGraph_body_itemRule() {
		return getGraph_body_itemAccess().getRule();
	}

	//symbol_definition:
	//	name=identifier ":=" rule=rule_production;
	public Symbol_definitionElements getSymbol_definitionAccess() {
		return pSymbol_definition;
	}
	
	public ParserRule getSymbol_definitionRule() {
		return getSymbol_definitionAccess().getRule();
	}

	/// ********************************************************************
	// * Rule productions
	// * / rule_production:
	//	rule_stmt_or_block;
	public Rule_productionElements getRule_productionAccess() {
		return pRule_production;
	}
	
	public ParserRule getRule_productionRule() {
		return getRule_productionAccess().getRule();
	}

	//rule_stmt_or_block:
	//	rule_repeat_stmt | rule_stmt_alt_parallel_seq;
	public Rule_stmt_or_blockElements getRule_stmt_or_blockAccess() {
		return pRule_stmt_or_block;
	}
	
	public ParserRule getRule_stmt_or_blockRule() {
		return getRule_stmt_or_blockAccess().getRule();
	}

	//rule_stmt_alt_parallel_seq:
	//	rule_stmt_primary ({alt_stmt.left=current} "|" right=rule_stmt_primary)*;
	public Rule_stmt_alt_parallel_seqElements getRule_stmt_alt_parallel_seqAccess() {
		return pRule_stmt_alt_parallel_seq;
	}
	
	public ParserRule getRule_stmt_alt_parallel_seqRule() {
		return getRule_stmt_alt_parallel_seqAccess().getRule();
	}

	//rule_stmt_primary:
	//	rule_rule_stmt_parallel_alt ";" | "{" {rule_stmt_primary} stmt_list+=rule_stmt_or_block* "}";
	public Rule_stmt_primaryElements getRule_stmt_primaryAccess() {
		return pRule_stmt_primary;
	}
	
	public ParserRule getRule_stmt_primaryRule() {
		return getRule_stmt_primaryAccess().getRule();
	}

	//rule_rule_stmt_parallel_alt:
	//	rule_stmt_parallel ({stmt_alt.left=current} "|" right=rule_stmt_parallel)*;
	public Rule_rule_stmt_parallel_altElements getRule_rule_stmt_parallel_altAccess() {
		return pRule_rule_stmt_parallel_alt;
	}
	
	public ParserRule getRule_rule_stmt_parallel_altRule() {
		return getRule_rule_stmt_parallel_altAccess().getRule();
	}

	//rule_stmt_parallel:
	//	rule_sequence ({rule_stmt_parallel.left=current} "&" right=rule_sequence)*;
	public Rule_stmt_parallelElements getRule_stmt_parallelAccess() {
		return pRule_stmt_parallel;
	}
	
	public ParserRule getRule_stmt_parallelRule() {
		return getRule_stmt_parallelAccess().getRule();
	}

	//rule_sequence:
	//	items+=rule_seq_item ("," items+=rule_seq_item)*;
	public Rule_sequenceElements getRule_sequenceAccess() {
		return pRule_sequence;
	}
	
	public ParserRule getRule_sequenceRule() {
		return getRule_sequenceAccess().getRule();
	}

	//rule_seq_item:
	//	hierarchical_id ("(" action_params=ifc_call_parameter_list ")" | with_clause=rule_with_clause)?;
	public Rule_seq_itemElements getRule_seq_itemAccess() {
		return pRule_seq_item;
	}
	
	public ParserRule getRule_seq_itemRule() {
		return getRule_seq_itemAccess().getRule();
	}

	//rule_with_clause:
	//	{rule_with_clause} "with" "{" body+=constraint_body_item* "}";
	public Rule_with_clauseElements getRule_with_clauseAccess() {
		return pRule_with_clause;
	}
	
	public ParserRule getRule_with_clauseRule() {
		return getRule_with_clauseAccess().getRule();
	}

	//ifc_call_parameter_list:
	//	parameters+=hierarchical_id ("," parameters+=hierarchical_id)*;
	public Ifc_call_parameter_listElements getIfc_call_parameter_listAccess() {
		return pIfc_call_parameter_list;
	}
	
	public ParserRule getIfc_call_parameter_listRule() {
		return getIfc_call_parameter_listAccess().getRule();
	}

	//rule_repeat_stmt:
	//	"repeat" ("(" expr=expression ")")? stmt=rule_stmt_or_block;
	public Rule_repeat_stmtElements getRule_repeat_stmtAccess() {
		return pRule_repeat_stmt;
	}
	
	public ParserRule getRule_repeat_stmtRule() {
		return getRule_repeat_stmtAccess().getRule();
	}

	/// ********************************************************************
	// * Overrides
	// * / overrides_declaration:
	//	{overides_declaration} "override" "{" overrides+=override_stmt* "}";
	public Overrides_declarationElements getOverrides_declarationAccess() {
		return pOverrides_declaration;
	}
	
	public ParserRule getOverrides_declarationRule() {
		return getOverrides_declarationAccess().getRule();
	}

	//override_stmt:
	//	type_override | instance_override;
	public Override_stmtElements getOverride_stmtAccess() {
		return pOverride_stmt;
	}
	
	public ParserRule getOverride_stmtRule() {
		return getOverride_stmtAccess().getRule();
	}

	//type_override:
	//	"type" src=identifier "with" dest=identifier ";";
	public Type_overrideElements getType_overrideAccess() {
		return pType_override;
	}
	
	public ParserRule getType_overrideRule() {
		return getType_overrideAccess().getRule();
	}

	//instance_override:
	//	"instance" src=hierarchical_id "with" dest=identifier ";";
	public Instance_overrideElements getInstance_overrideAccess() {
		return pInstance_override;
	}
	
	public ParserRule getInstance_overrideRule() {
		return getInstance_overrideAccess().getRule();
	}

	/// ********************************************************************
	// * Data Declarations
	// * / data_declaration:
	//	data_type names+=identifier ("," names+=identifier)* ";";
	public Data_declarationElements getData_declarationAccess() {
		return pData_declaration;
	}
	
	public ParserRule getData_declarationRule() {
		return getData_declarationAccess().getRule();
	}

	//data_type:
	//	integer_type | enum_type | user_defined_type;
	public Data_typeElements getData_typeAccess() {
		return pData_type;
	}
	
	public ParserRule getData_typeRule() {
		return getData_typeAccess().getRule();
	}

	////	graph_type|struct_type|typedef_type=[typedef_declaration]
	// user_defined_type:
	//	typename= / * TODO: parameterization * / identifier;
	public User_defined_typeElements getUser_defined_typeAccess() {
		return pUser_defined_type;
	}
	
	public ParserRule getUser_defined_typeRule() {
		return getUser_defined_typeAccess().getRule();
	}

	//typedef_declaration:
	//	"typedef" type=data_type type_identifier=identifier ";";
	public Typedef_declarationElements getTypedef_declarationAccess() {
		return pTypedef_declaration;
	}
	
	public ParserRule getTypedef_declarationRule() {
		return getTypedef_declarationAccess().getRule();
	}

	//enum_type:
	//	"enum" data_type=integer_type? "{" items+=identifier ("," items+=identifier)* "}";
	public Enum_typeElements getEnum_typeAccess() {
		return pEnum_type;
	}
	
	public ParserRule getEnum_typeRule() {
		return getEnum_typeAccess().getRule();
	}

	//integer_type:
	//	("signed" | "unsigned")? atom_type=integer_atom_type ("[" lhs=expression ":" rhs=expression "]")?
	//	inside=type_inside_clause?;
	public Integer_typeElements getInteger_typeAccess() {
		return pInteger_type;
	}
	
	public ParserRule getInteger_typeRule() {
		return getInteger_typeAccess().getRule();
	}

	//integer_atom_type:
	//	"int" | "bit";
	public Integer_atom_typeElements getInteger_atom_typeAccess() {
		return pInteger_atom_type;
	}
	
	public ParserRule getInteger_atom_typeRule() {
		return getInteger_atom_typeAccess().getRule();
	}

	//type_inside_clause:
	//	"inside" "{" domain=open_range_list "}";
	public Type_inside_clauseElements getType_inside_clauseAccess() {
		return pType_inside_clause;
	}
	
	public ParserRule getType_inside_clauseRule() {
		return getType_inside_clauseAccess().getRule();
	}

	//open_range_list:
	//	ranges+=open_range_value ("," ranges+=open_range_value)*;
	public Open_range_listElements getOpen_range_listAccess() {
		return pOpen_range_list;
	}
	
	public ParserRule getOpen_range_listRule() {
		return getOpen_range_listAccess().getRule();
	}

	//open_range_value:
	//	lhs=expression | "[" lhs=expression ":" rhs=expression "]";
	public Open_range_valueElements getOpen_range_valueAccess() {
		return pOpen_range_value;
	}
	
	public ParserRule getOpen_range_valueRule() {
		return getOpen_range_valueAccess().getRule();
	}

	//// TODO: convert to constant_expressions 
	// // domain_spec: range_lhs=identifier ('..' range_rhs=identifier)? ;
	//
	/// ********************************************************************
	// * Constraints
	// * / constraint_declaration:
	//	"constraint" name=identifier "dynamic"? "{" body+=constraint_body_item* "}";
	public Constraint_declarationElements getConstraint_declarationAccess() {
		return pConstraint_declaration;
	}
	
	public ParserRule getConstraint_declarationRule() {
		return getConstraint_declarationAccess().getRule();
	}

	//constraint_body_item:
	//	expression_or_dist_item | foreach_constraint_item | if_constraint_item;
	public Constraint_body_itemElements getConstraint_body_itemAccess() {
		return pConstraint_body_item;
	}
	
	public ParserRule getConstraint_body_itemRule() {
		return getConstraint_body_itemAccess().getRule();
	}

	//expression_or_dist_item: // TODO: dist item
	// expression ("->" impl_constraint=constraint_set | ";");
	public Expression_or_dist_itemElements getExpression_or_dist_itemAccess() {
		return pExpression_or_dist_item;
	}
	
	public ParserRule getExpression_or_dist_itemRule() {
		return getExpression_or_dist_itemAccess().getRule();
	}

	//if_constraint_item:
	//	"if" "(" if_expr=expression ")" true_case=constraint_set ("else" false_set=constraint_set)?;
	public If_constraint_itemElements getIf_constraint_itemAccess() {
		return pIf_constraint_item;
	}
	
	public ParserRule getIf_constraint_itemRule() {
		return getIf_constraint_itemAccess().getRule();
	}

	//foreach_constraint_item:
	//	"foreach" "(" expr=expression ")" body=constraint_set;
	public Foreach_constraint_itemElements getForeach_constraint_itemAccess() {
		return pForeach_constraint_item;
	}
	
	public ParserRule getForeach_constraint_itemRule() {
		return getForeach_constraint_itemAccess().getRule();
	}

	//constraint_set:
	//	items+=constraint_body_item | "{" {constraint_set} items+=constraint_body_item* "}";
	public Constraint_setElements getConstraint_setAccess() {
		return pConstraint_set;
	}
	
	public ParserRule getConstraint_setRule() {
		return getConstraint_setAccess().getRule();
	}

	/// ********************************************************************
	// * Expressions
	// * 
	// * Note: ANTLR doesn't support left-recursion in grammar productions.
	// * Consequently, we can't say something like: 
	// *   expression := expression '+' expression.
	// * 
	// * The expression grammar below is refactored to eliminate left 
	// * recursion and properly implement operator precedence
	// * /
	//// TODO: should make special-purpose declaration 
	// constant_expression:
	//	expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	//expression:
	//	condition_expr;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//condition_expr returns expression:
	//	logical_or_expr ({condition_expr.left=current} "?" true_expr=logical_or_expr ":" false_expr=logical_or_expr)*;
	public Condition_exprElements getCondition_exprAccess() {
		return pCondition_expr;
	}
	
	public ParserRule getCondition_exprRule() {
		return getCondition_exprAccess().getRule();
	}

	//logical_or_expr returns expression:
	//	logical_and_expr ({logical_or_expr.left=current} "&&" right=logical_and_expr)*;
	public Logical_or_exprElements getLogical_or_exprAccess() {
		return pLogical_or_expr;
	}
	
	public ParserRule getLogical_or_exprRule() {
		return getLogical_or_exprAccess().getRule();
	}

	//logical_and_expr returns expression:
	//	binary_or_expr ({logical_and_expr.left=current} "||" right=binary_or_expr)*;
	public Logical_and_exprElements getLogical_and_exprAccess() {
		return pLogical_and_expr;
	}
	
	public ParserRule getLogical_and_exprRule() {
		return getLogical_and_exprAccess().getRule();
	}

	//binary_or_expr returns expression:
	//	binary_xor_expr ({logical_or_expr.left=current} "|" right=binary_xor_expr)*;
	public Binary_or_exprElements getBinary_or_exprAccess() {
		return pBinary_or_expr;
	}
	
	public ParserRule getBinary_or_exprRule() {
		return getBinary_or_exprAccess().getRule();
	}

	//binary_xor_expr returns expression:
	//	binary_and_expr ({binary_xor_expr.left=current} "^" right=binary_and_expr)*;
	public Binary_xor_exprElements getBinary_xor_exprAccess() {
		return pBinary_xor_expr;
	}
	
	public ParserRule getBinary_xor_exprRule() {
		return getBinary_xor_exprAccess().getRule();
	}

	//binary_and_expr returns expression:
	//	logical_equality_expr ({binary_and_expr.left=current} "&" right=logical_equality_expr)*;
	public Binary_and_exprElements getBinary_and_exprAccess() {
		return pBinary_and_expr;
	}
	
	public ParserRule getBinary_and_exprRule() {
		return getBinary_and_exprAccess().getRule();
	}

	//logical_equality_expr returns expression:
	//	logical_inequality_expr ({logical_equality_expr.left=current} op=eq_neq_op right=logical_inequality_expr)*;
	public Logical_equality_exprElements getLogical_equality_exprAccess() {
		return pLogical_equality_expr;
	}
	
	public ParserRule getLogical_equality_exprRule() {
		return getLogical_equality_exprAccess().getRule();
	}

	//logical_inequality_expr returns expression:
	//	binary_shift_expr ({logical_inequality_expr.left=current} op=("<" | "<=" | ">" | ">=" | "inside")
	//	right=binary_shift_expr)*;
	public Logical_inequality_exprElements getLogical_inequality_exprAccess() {
		return pLogical_inequality_expr;
	}
	
	public ParserRule getLogical_inequality_exprRule() {
		return getLogical_inequality_exprAccess().getRule();
	}

	//binary_shift_expr returns expression:
	//	binary_add_sub_expr ({binary_shift_expr.left=current} op=shift_op right=binary_add_sub_expr)*;
	public Binary_shift_exprElements getBinary_shift_exprAccess() {
		return pBinary_shift_expr;
	}
	
	public ParserRule getBinary_shift_exprRule() {
		return getBinary_shift_exprAccess().getRule();
	}

	//binary_add_sub_expr returns expression:
	//	binary_mul_div_mod_expr ({binary_add_sub_expr.left=current} op=add_sub_op right=binary_mul_div_mod_expr)*;
	public Binary_add_sub_exprElements getBinary_add_sub_exprAccess() {
		return pBinary_add_sub_expr;
	}
	
	public ParserRule getBinary_add_sub_exprRule() {
		return getBinary_add_sub_exprAccess().getRule();
	}

	//binary_mul_div_mod_expr returns expression:
	//	binary_exp_expr ({binary_mul_div_mod_expr.left=current} op=mul_div_mod_op right=binary_exp_expr)*;
	public Binary_mul_div_mod_exprElements getBinary_mul_div_mod_exprAccess() {
		return pBinary_mul_div_mod_expr;
	}
	
	public ParserRule getBinary_mul_div_mod_exprRule() {
		return getBinary_mul_div_mod_exprAccess().getRule();
	}

	//binary_exp_expr returns expression:
	//	unary_expr ({binary_exp_expr.left=current} "**" right=unary_expr)*;
	public Binary_exp_exprElements getBinary_exp_exprAccess() {
		return pBinary_exp_expr;
	}
	
	public ParserRule getBinary_exp_exprRule() {
		return getBinary_exp_exprAccess().getRule();
	}

	//unary_op:
	//	"+" | "-" | "!" | "~" | "&" | "|" | "^";
	public Unary_opElements getUnary_opAccess() {
		return pUnary_op;
	}
	
	public ParserRule getUnary_opRule() {
		return getUnary_opAccess().getRule();
	}

	//eq_neq_op:
	//	"==" | "!=";
	public Eq_neq_opElements getEq_neq_opAccess() {
		return pEq_neq_op;
	}
	
	public ParserRule getEq_neq_opRule() {
		return getEq_neq_opAccess().getRule();
	}

	//shift_op:
	//	"<<" | ">>";
	public Shift_opElements getShift_opAccess() {
		return pShift_op;
	}
	
	public ParserRule getShift_opRule() {
		return getShift_opAccess().getRule();
	}

	//add_sub_op:
	//	"+" | "-";
	public Add_sub_opElements getAdd_sub_opAccess() {
		return pAdd_sub_op;
	}
	
	public ParserRule getAdd_sub_opRule() {
		return getAdd_sub_opAccess().getRule();
	}

	//mul_div_mod_op:
	//	"*" | "/" | "%";
	public Mul_div_mod_opElements getMul_div_mod_opAccess() {
		return pMul_div_mod_op;
	}
	
	public ParserRule getMul_div_mod_opRule() {
		return getMul_div_mod_opAccess().getRule();
	}

	//unary_expr returns expression:
	//	unary_op? primary;
	public Unary_exprElements getUnary_exprAccess() {
		return pUnary_expr;
	}
	
	public ParserRule getUnary_exprRule() {
		return getUnary_exprAccess().getRule();
	}

	//primary returns expression:
	//	expr=literal | "(" expr=expression ")" | expr=hierarchical_id ("[" lhs=expression (":" rhs=expression)? "]")?;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//interface_declaration:
	//	"interface" name=identifier ("extends" super=[interface_declaration])? "{" body+=interface_body_item* "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//interface_body_item:
	//	action_declaration;
	public Interface_body_itemElements getInterface_body_itemAccess() {
		return pInterface_body_item;
	}
	
	public ParserRule getInterface_body_itemRule() {
		return getInterface_body_itemAccess().getRule();
	}

	//action_declaration:
	//	"action" name=identifier "(" (ports+=action_portlist ("," ports+=action_portlist)*)? ")" ";";
	public Action_declarationElements getAction_declarationAccess() {
		return pAction_declaration;
	}
	
	public ParserRule getAction_declarationRule() {
		return getAction_declarationAccess().getRule();
	}

	//action_portlist:
	//	io_direction? type=[data_type] name=identifier;
	public Action_portlistElements getAction_portlistAccess() {
		return pAction_portlist;
	}
	
	public ParserRule getAction_portlistRule() {
		return getAction_portlistAccess().getRule();
	}

	//io_direction:
	//	"input" | "output" | "inout";
	public Io_directionElements getIo_directionAccess() {
		return pIo_direction;
	}
	
	public ParserRule getIo_directionRule() {
		return getIo_directionAccess().getRule();
	}

	//graph_data_declaration:
	//	"rand"? type=[data_type] names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")? (","
	//	names+=identifier ("(" portmaps+=port_map ("," portmaps+=port_map)* ")")?)* ";";
	public Graph_data_declarationElements getGraph_data_declarationAccess() {
		return pGraph_data_declaration;
	}
	
	public ParserRule getGraph_data_declarationRule() {
		return getGraph_data_declarationAccess().getRule();
	}

	//symbol_declaration:
	//	"symbol" name=identifier (":=" inline_rule=rule_stmt_or_block ";")? | "symbol" names+=identifier (","
	//	names+=identifier (":=" inline_rule=rule_stmt_or_block)?) ";";
	public Symbol_declarationElements getSymbol_declarationAccess() {
		return pSymbol_declaration;
	}
	
	public ParserRule getSymbol_declarationRule() {
		return getSymbol_declarationAccess().getRule();
	}

	//port_map:
	//	"." port=identifier "(" map=hierarchical_id ")";
	public Port_mapElements getPort_mapAccess() {
		return pPort_map;
	}
	
	public ParserRule getPort_mapRule() {
		return getPort_mapAccess().getRule();
	}

	/// ********************************************************************
	// * Identifiers, literals, etc
	// * /
	//graph_identifier:
	//	identifier;
	public Graph_identifierElements getGraph_identifierAccess() {
		return pGraph_identifier;
	}
	
	public ParserRule getGraph_identifierRule() {
		return getGraph_identifierAccess().getRule();
	}

	//struct_identifier:
	//	identifier;
	public Struct_identifierElements getStruct_identifierAccess() {
		return pStruct_identifier;
	}
	
	public ParserRule getStruct_identifierRule() {
		return getStruct_identifierAccess().getRule();
	}

	//interface_identifier:
	//	identifier;
	public Interface_identifierElements getInterface_identifierAccess() {
		return pInterface_identifier;
	}
	
	public ParserRule getInterface_identifierRule() {
		return getInterface_identifierAccess().getRule();
	}

	//graph_or_struct_identifier:
	//	identifier;
	public Graph_or_struct_identifierElements getGraph_or_struct_identifierAccess() {
		return pGraph_or_struct_identifier;
	}
	
	public ParserRule getGraph_or_struct_identifierRule() {
		return getGraph_or_struct_identifierAccess().getRule();
	}

	//graph_struct_interface_identiifer:
	//	identifier;
	public Graph_struct_interface_identiiferElements getGraph_struct_interface_identiiferAccess() {
		return pGraph_struct_interface_identiifer;
	}
	
	public ParserRule getGraph_struct_interface_identiiferRule() {
		return getGraph_struct_interface_identiiferAccess().getRule();
	}

	//port_identifier:
	//	identifier;
	public Port_identifierElements getPort_identifierAccess() {
		return pPort_identifier;
	}
	
	public ParserRule getPort_identifierRule() {
		return getPort_identifierAccess().getRule();
	}

	//identifier:
	//	ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//hierarchical_id:
	//	value=identifier ("." identifier)*;
	public Hierarchical_idElements getHierarchical_idAccess() {
		return pHierarchical_id;
	}
	
	public ParserRule getHierarchical_idRule() {
		return getHierarchical_idAccess().getRule();
	}

	/// *	  decimal_number 
	//	| octal_number
	//	| binary_number
	//	| hex_number * / literal:
	//	value=INT;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//decimal_number:
	//	value=INT | size?;
	public Decimal_numberElements getDecimal_numberAccess() {
		return pDecimal_number;
	}
	
	public ParserRule getDecimal_numberRule() {
		return getDecimal_numberAccess().getRule();
	}

	////terminal identifier:
	// //	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	// //;
	// //graph_instance:
	//
	////	type=[graph_declaration] name=identifier ('(' portmaps+=port_map (',' portmaps+=port_map)* ')')? ';'
	// //;
	// size:
	//	value=INT;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
