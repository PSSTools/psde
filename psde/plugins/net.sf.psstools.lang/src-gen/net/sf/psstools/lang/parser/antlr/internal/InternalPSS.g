/*
* generated by Xtext
*/
grammar InternalPSS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.sf.psstools.lang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.sf.psstools.lang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.sf.psstools.lang.services.PSSGrammarAccess;

}

@parser::members {

 	private PSSGrammarAccess grammarAccess;
 	
    public InternalPSSParser(TokenStream input, PSSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PSSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRootPortable_stimulus_descriptionParserRuleCall_0()); 
	    }
		lv_root_0_0=ruleportable_stimulus_description		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"root",
        		lv_root_0_0, 
        		"portable_stimulus_description");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleportable_stimulus_description
entryRuleportable_stimulus_description returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortable_stimulus_descriptionRule()); }
	 iv_ruleportable_stimulus_description=ruleportable_stimulus_description 
	 { $current=$iv_ruleportable_stimulus_description.current; } 
	 EOF 
;

// Rule portable_stimulus_description
ruleportable_stimulus_description returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getGraph_declarationParserRuleCall_0()); 
    }
    this_graph_declaration_0=rulegraph_declaration
    { 
        $current = $this_graph_declaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getStruct_declarationParserRuleCall_1()); 
    }
    this_struct_declaration_1=rulestruct_declaration
    { 
        $current = $this_struct_declaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getInterface_declarationParserRuleCall_2()); 
    }
    this_interface_declaration_2=ruleinterface_declaration
    { 
        $current = $this_interface_declaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getData_declarationParserRuleCall_3()); 
    }
    this_data_declaration_3=ruledata_declaration
    { 
        $current = $this_data_declaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getTypedef_declarationParserRuleCall_4()); 
    }
    this_typedef_declaration_4=ruletypedef_declaration
    { 
        $current = $this_typedef_declaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortable_stimulus_descriptionAccess().getBins_declarationParserRuleCall_5()); 
    }
    this_bins_declaration_5=rulebins_declaration
    { 
        $current = $this_bins_declaration_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;









// Entry rule entryRulegraph_declaration
entryRulegraph_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_declarationRule()); }
	 iv_rulegraph_declaration=rulegraph_declaration 
	 { $current=$iv_rulegraph_declaration.current; } 
	 EOF 
;

// Rule graph_declaration
rulegraph_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='graph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGraph_declarationAccess().getGraphKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_declarationAccess().getNameGraph_identifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=rulegraph_identifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"graph_identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGraph_declarationAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_declarationAccess().getPortsPort_declarationParserRuleCall_2_1_0_0()); 
	    }
		lv_ports_3_0=ruleport_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_declarationRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_3_0, 
        		"port_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGraph_declarationAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_declarationAccess().getPortsPort_declarationParserRuleCall_2_1_1_1_0()); 
	    }
		lv_ports_5_0=ruleport_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_declarationRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_5_0, 
        		"port_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGraph_declarationAccess().getRightParenthesisKeyword_2_2());
    }
)?(	otherlv_7='extends' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGraph_declarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGraph_declarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getGraph_declarationAccess().getSuperGraph_or_struct_declarationCrossReference_3_1_0()); 
	    }
		rulegraph_or_struct_identifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getGraph_declarationAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_declarationAccess().getBodyGraph_body_itemParserRuleCall_5_0()); 
	    }
		lv_body_10_0=rulegraph_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_declarationRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_10_0, 
        		"graph_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getGraph_declarationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleport_declaration
entryRuleport_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPort_declarationRule()); }
	 iv_ruleport_declaration=ruleport_declaration 
	 { $current=$iv_ruleport_declaration.current; } 
	 EOF 
;

// Rule port_declaration
ruleport_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='export' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPort_declarationAccess().getExportKeyword_0());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPort_declarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPort_declarationAccess().getIfc_typeInterface_declarationCrossReference_1_0()); 
	    }
		ruleinterface_identifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPort_declarationAccess().getNamePort_identifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleport_identifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPort_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"port_identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulestruct_declaration
entryRulestruct_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStruct_declarationRule()); }
	 iv_rulestruct_declaration=rulestruct_declaration 
	 { $current=$iv_rulestruct_declaration.current; } 
	 EOF 
;

// Rule struct_declaration
rulestruct_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='struct' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStruct_declarationAccess().getStructKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStruct_declarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStruct_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStruct_declarationAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStruct_declarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStruct_declarationAccess().getSuperStruct_declarationCrossReference_2_1_0()); 
	    }
		rulestruct_identifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStruct_declarationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStruct_declarationAccess().getBodyStruct_body_itemParserRuleCall_4_0()); 
	    }
		lv_body_5_0=rulestruct_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStruct_declarationRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"struct_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStruct_declarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulestruct_body_item
entryRulestruct_body_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStruct_body_itemRule()); }
	 iv_rulestruct_body_item=rulestruct_body_item 
	 { $current=$iv_rulestruct_body_item.current; } 
	 EOF 
;

// Rule struct_body_item
rulestruct_body_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStruct_body_itemAccess().getConstraint_declarationParserRuleCall_0()); 
    }
    this_constraint_declaration_0=ruleconstraint_declaration
    { 
        $current = $this_constraint_declaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	otherlv_1='rand' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStruct_body_itemAccess().getRandKeyword_1_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getStruct_body_itemAccess().getData_declarationParserRuleCall_1_1()); 
    }
    this_data_declaration_2=ruledata_declaration
    { 
        $current = $this_data_declaration_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStruct_body_itemAccess().getTypedef_declarationParserRuleCall_2()); 
    }
    this_typedef_declaration_3=ruletypedef_declaration
    { 
        $current = $this_typedef_declaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStruct_body_itemAccess().getBin_or_scheme_declarationParserRuleCall_3()); 
    }
    this_bin_or_scheme_declaration_4=rulebin_or_scheme_declaration
    { 
        $current = $this_bin_or_scheme_declaration_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulegraph_body_item
entryRulegraph_body_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_body_itemRule()); }
	 iv_rulegraph_body_item=rulegraph_body_item 
	 { $current=$iv_rulegraph_body_item.current; } 
	 EOF 
;

// Rule graph_body_item
rulegraph_body_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getOverrides_declarationParserRuleCall_0()); 
    }
    this_overrides_declaration_0=ruleoverrides_declaration
    { 
        $current = $this_overrides_declaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getConstraint_declarationParserRuleCall_1()); 
    }
    this_constraint_declaration_1=ruleconstraint_declaration
    { 
        $current = $this_constraint_declaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((	otherlv_2='rand' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGraph_body_itemAccess().getRandKeyword_2_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getData_declarationParserRuleCall_2_1()); 
    }
    this_data_declaration_3=ruledata_declaration
    { 
        $current = $this_data_declaration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getBin_or_scheme_declarationParserRuleCall_3()); 
    }
    this_bin_or_scheme_declaration_4=rulebin_or_scheme_declaration
    { 
        $current = $this_bin_or_scheme_declaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getTypedef_declarationParserRuleCall_4()); 
    }
    this_typedef_declaration_5=ruletypedef_declaration
    { 
        $current = $this_typedef_declaration_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getSymbol_declarationParserRuleCall_5()); 
    }
    this_symbol_declaration_6=rulesymbol_declaration
    { 
        $current = $this_symbol_declaration_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getSymbol_definitionParserRuleCall_6()); 
    }
    this_symbol_definition_7=rulesymbol_definition
    { 
        $current = $this_symbol_definition_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraph_body_itemAccess().getInterface_action_definitionParserRuleCall_7()); 
    }
    this_interface_action_definition_8=ruleinterface_action_definition
    { 
        $current = $this_interface_action_definition_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesymbol_definition
entryRulesymbol_definition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbol_definitionRule()); }
	 iv_rulesymbol_definition=rulesymbol_definition 
	 { $current=$iv_rulesymbol_definition.current; } 
	 EOF 
;

// Rule symbol_definition
rulesymbol_definition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_definitionAccess().getSymbol_nameIdentifierParserRuleCall_0_0()); 
	    }
		lv_symbol_name_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_definitionRule());
	        }
       		set(
       			$current, 
       			"symbol_name",
        		lv_symbol_name_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSymbol_definitionAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_definitionAccess().getBody_itemsRule_productionParserRuleCall_2_0()); 
	    }
		lv_body_items_2_0=rulerule_production		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_definitionRule());
	        }
       		add(
       			$current, 
       			"body_items",
        		lv_body_items_2_0, 
        		"rule_production");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleinterface_action_definition
entryRuleinterface_action_definition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_action_definitionRule()); }
	 iv_ruleinterface_action_definition=ruleinterface_action_definition 
	 { $current=$iv_ruleinterface_action_definition.current; } 
	 EOF 
;

// Rule interface_action_definition
ruleinterface_action_definition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_action_definitionAccess().getActionInterface_action_idParserRuleCall_0_0()); 
	    }
		lv_action_0_0=ruleinterface_action_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_action_definitionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_0_0, 
        		"interface_action_id");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterface_action_definitionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_action_definitionAccess().getParametersAction_portlistParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleaction_portlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_action_definitionRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"action_portlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterface_action_definitionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterface_action_definitionAccess().getColonEqualsSignKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterface_action_definitionAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_action_definitionAccess().getBody_itemsGraph_body_itemParserRuleCall_6_0()); 
	    }
		lv_body_items_6_0=rulegraph_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_action_definitionRule());
	        }
       		add(
       			$current, 
       			"body_items",
        		lv_body_items_6_0, 
        		"graph_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterface_action_definitionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRulerule_production
entryRulerule_production returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_productionRule()); }
	 iv_rulerule_production=rulerule_production 
	 { $current=$iv_rulerule_production.current; } 
	 EOF 
;

// Rule rule_production
rulerule_production returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRule_productionAccess().getRule_stmt_or_blockParserRuleCall()); 
    }
    this_rule_stmt_or_block_0=rulerule_stmt_or_block
    { 
        $current = $this_rule_stmt_or_block_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulerule_stmt_or_block
entryRulerule_stmt_or_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_stmt_or_blockRule()); }
	 iv_rulerule_stmt_or_block=rulerule_stmt_or_block 
	 { $current=$iv_rulerule_stmt_or_block.current; } 
	 EOF 
;

// Rule rule_stmt_or_block
rulerule_stmt_or_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRule_stmt_or_blockAccess().getRule_repeat_stmtParserRuleCall_0()); 
    }
    this_rule_repeat_stmt_0=rulerule_repeat_stmt
    { 
        $current = $this_rule_repeat_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRule_stmt_or_blockAccess().getRule_stmt_alt_parallel_seqParserRuleCall_1()); 
    }
    this_rule_stmt_alt_parallel_seq_1=rulerule_stmt_alt_parallel_seq
    { 
        $current = $this_rule_stmt_alt_parallel_seq_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulerule_stmt_alt_parallel_seq
entryRulerule_stmt_alt_parallel_seq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_stmt_alt_parallel_seqRule()); }
	 iv_rulerule_stmt_alt_parallel_seq=rulerule_stmt_alt_parallel_seq 
	 { $current=$iv_rulerule_stmt_alt_parallel_seq.current; } 
	 EOF 
;

// Rule rule_stmt_alt_parallel_seq
rulerule_stmt_alt_parallel_seq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRule_stmt_alt_parallel_seqAccess().getRule_stmt_primaryParserRuleCall_0()); 
    }
    this_rule_stmt_primary_0=rulerule_stmt_primary
    { 
        $current = $this_rule_stmt_primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRule_stmt_alt_parallel_seqAccess().getAlt_stmtLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRule_stmt_alt_parallel_seqAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_alt_parallel_seqAccess().getRightRule_stmt_primaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulerule_stmt_primary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_alt_parallel_seqRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"rule_stmt_primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerule_stmt_primary
entryRulerule_stmt_primary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_stmt_primaryRule()); }
	 iv_rulerule_stmt_primary=rulerule_stmt_primary 
	 { $current=$iv_rulerule_stmt_primary.current; } 
	 EOF 
;

// Rule rule_stmt_primary
rulerule_stmt_primary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getRule_stmt_primaryAccess().getRule_stmt_parallel_altParserRuleCall_0_0()); 
    }
    this_rule_stmt_parallel_alt_0=rulerule_stmt_parallel_alt
    { 
        $current = $this_rule_stmt_parallel_alt_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRule_stmt_primaryAccess().getSemicolonKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_primaryAccess().getParamIdentifierParserRuleCall_1_0_0()); 
	    }
		lv_param_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_primaryRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='<=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRule_stmt_primaryAccess().getLessThanSignEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_primaryAccess().getRhsExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_primaryRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRule_stmt_primaryAccess().getSemicolonKeyword_1_3());
    }
)
    |(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRule_stmt_primaryAccess().getLeftCurlyBracketKeyword_2_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getRule_stmt_primaryAccess().getRule_stmt_primaryAction_2_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_primaryAccess().getStmt_listRule_stmt_or_blockParserRuleCall_2_2_0()); 
	    }
		lv_stmt_list_8_0=rulerule_stmt_or_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_primaryRule());
	        }
       		add(
       			$current, 
       			"stmt_list",
        		lv_stmt_list_8_0, 
        		"rule_stmt_or_block");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRule_stmt_primaryAccess().getRightCurlyBracketKeyword_2_3());
    }
))
;





// Entry rule entryRulerule_stmt_parallel_alt
entryRulerule_stmt_parallel_alt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_stmt_parallel_altRule()); }
	 iv_rulerule_stmt_parallel_alt=rulerule_stmt_parallel_alt 
	 { $current=$iv_rulerule_stmt_parallel_alt.current; } 
	 EOF 
;

// Rule rule_stmt_parallel_alt
rulerule_stmt_parallel_alt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRule_stmt_parallel_altAccess().getRule_stmt_parallelParserRuleCall_0()); 
    }
    this_rule_stmt_parallel_0=rulerule_stmt_parallel
    { 
        $current = $this_rule_stmt_parallel_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRule_stmt_parallel_altAccess().getStmt_altLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRule_stmt_parallel_altAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_parallel_altAccess().getRightRule_stmt_parallelParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulerule_stmt_parallel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_parallel_altRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"rule_stmt_parallel");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerule_stmt_parallel
entryRulerule_stmt_parallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_stmt_parallelRule()); }
	 iv_rulerule_stmt_parallel=rulerule_stmt_parallel 
	 { $current=$iv_rulerule_stmt_parallel.current; } 
	 EOF 
;

// Rule rule_stmt_parallel
rulerule_stmt_parallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRule_stmt_parallelAccess().getRule_sequenceParserRuleCall_0()); 
    }
    this_rule_sequence_0=rulerule_sequence
    { 
        $current = $this_rule_sequence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRule_stmt_parallelAccess().getRule_stmt_parallelLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRule_stmt_parallelAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_stmt_parallelAccess().getRightRule_sequenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulerule_sequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_stmt_parallelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"rule_sequence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerule_sequence
entryRulerule_sequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_sequenceRule()); }
	 iv_rulerule_sequence=rulerule_sequence 
	 { $current=$iv_rulerule_sequence.current; } 
	 EOF 
;

// Rule rule_sequence
rulerule_sequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRule_sequenceAccess().getItemsRule_seq_itemParserRuleCall_0_0()); 
	    }
		lv_items_0_0=rulerule_seq_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_sequenceRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"rule_seq_item");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRule_sequenceAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_sequenceAccess().getItemsRule_seq_itemParserRuleCall_1_1_0()); 
	    }
		lv_items_2_0=rulerule_seq_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_sequenceRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"rule_seq_item");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerule_seq_item
entryRulerule_seq_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_seq_itemRule()); }
	 iv_rulerule_seq_item=rulerule_seq_item 
	 { $current=$iv_rulerule_seq_item.current; } 
	 EOF 
;

// Rule rule_seq_item
rulerule_seq_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRule_seq_itemAccess().getActionInterface_action_idParserRuleCall_0_0_0()); 
	    }
		lv_action_0_0=ruleinterface_action_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_seq_itemRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_0_0, 
        		"interface_action_id");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRule_seq_itemAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_seq_itemAccess().getAction_paramsParameter_listParserRuleCall_0_2_0()); 
	    }
		lv_action_params_2_0=ruleparameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_seq_itemRule());
	        }
       		set(
       			$current, 
       			"action_params",
        		lv_action_params_2_0, 
        		"parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRule_seq_itemAccess().getRightParenthesisKeyword_0_3());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRule_seq_itemAccess().getItemIdentifierParserRuleCall_1_0_0()); 
	    }
		lv_item_4_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_seq_itemRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_4_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_seq_itemAccess().getWith_clauseRule_with_clauseParserRuleCall_1_1_0()); 
	    }
		lv_with_clause_5_0=rulerule_with_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_seq_itemRule());
	        }
       		set(
       			$current, 
       			"with_clause",
        		lv_with_clause_5_0, 
        		"rule_with_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRulerule_with_clause
entryRulerule_with_clause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_with_clauseRule()); }
	 iv_rulerule_with_clause=rulerule_with_clause 
	 { $current=$iv_rulerule_with_clause.current; } 
	 EOF 
;

// Rule rule_with_clause
rulerule_with_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRule_with_clauseAccess().getRule_with_clauseAction_0(),
            $current);
    }
)	otherlv_1='with' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRule_with_clauseAccess().getWithKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRule_with_clauseAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_with_clauseAccess().getBodyConstraint_body_itemParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleconstraint_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_with_clauseRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"constraint_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRule_with_clauseAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleparameter_list
entryRuleparameter_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	 iv_ruleparameter_list=ruleparameter_list 
	 { $current=$iv_ruleparameter_list.current; } 
	 EOF 
;

// Rule parameter_list
ruleparameter_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParametersHierarchical_idParserRuleCall_0_0()); 
	    }
		lv_parameters_0_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_0_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParametersHierarchical_idParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerule_repeat_stmt
entryRulerule_repeat_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRule_repeat_stmtRule()); }
	 iv_rulerule_repeat_stmt=rulerule_repeat_stmt 
	 { $current=$iv_rulerule_repeat_stmt.current; } 
	 EOF 
;

// Rule rule_repeat_stmt
rulerule_repeat_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='repeat' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRule_repeat_stmtAccess().getRepeatKeyword_0());
    }
(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRule_repeat_stmtAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_repeat_stmtAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_repeat_stmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRule_repeat_stmtAccess().getRightParenthesisKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRule_repeat_stmtAccess().getStmtRule_stmt_or_blockParserRuleCall_2_0()); 
	    }
		lv_stmt_4_0=rulerule_stmt_or_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRule_repeat_stmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_4_0, 
        		"rule_stmt_or_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleoverrides_declaration
entryRuleoverrides_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverrides_declarationRule()); }
	 iv_ruleoverrides_declaration=ruleoverrides_declaration 
	 { $current=$iv_ruleoverrides_declaration.current; } 
	 EOF 
;

// Rule overrides_declaration
ruleoverrides_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOverrides_declarationAccess().getOverides_declarationAction_0(),
            $current);
    }
)	otherlv_1='override' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOverrides_declarationAccess().getOverrideKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOverrides_declarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOverrides_declarationAccess().getOverridesOverride_stmtParserRuleCall_3_0()); 
	    }
		lv_overrides_3_0=ruleoverride_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOverrides_declarationRule());
	        }
       		add(
       			$current, 
       			"overrides",
        		lv_overrides_3_0, 
        		"override_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOverrides_declarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleoverride_stmt
entryRuleoverride_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverride_stmtRule()); }
	 iv_ruleoverride_stmt=ruleoverride_stmt 
	 { $current=$iv_ruleoverride_stmt.current; } 
	 EOF 
;

// Rule override_stmt
ruleoverride_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOverride_stmtAccess().getType_overrideParserRuleCall_0()); 
    }
    this_type_override_0=ruletype_override
    { 
        $current = $this_type_override_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOverride_stmtAccess().getInstance_overrideParserRuleCall_1()); 
    }
    this_instance_override_1=ruleinstance_override
    { 
        $current = $this_instance_override_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuletype_override
entryRuletype_override returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_overrideRule()); }
	 iv_ruletype_override=ruletype_override 
	 { $current=$iv_ruletype_override.current; } 
	 EOF 
;

// Rule type_override
ruletype_override returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getType_overrideAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getType_overrideAccess().getSrcIdentifierParserRuleCall_1_0()); 
	    }
		lv_src_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_overrideRule());
	        }
       		set(
       			$current, 
       			"src",
        		lv_src_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getType_overrideAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getType_overrideAccess().getDestIdentifierParserRuleCall_3_0()); 
	    }
		lv_dest_3_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_overrideRule());
	        }
       		set(
       			$current, 
       			"dest",
        		lv_dest_3_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getType_overrideAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleinstance_override
entryRuleinstance_override returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstance_overrideRule()); }
	 iv_ruleinstance_override=ruleinstance_override 
	 { $current=$iv_ruleinstance_override.current; } 
	 EOF 
;

// Rule instance_override
ruleinstance_override returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instance' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstance_overrideAccess().getInstanceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstance_overrideAccess().getSrcHierarchical_idParserRuleCall_1_0()); 
	    }
		lv_src_1_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstance_overrideRule());
	        }
       		set(
       			$current, 
       			"src",
        		lv_src_1_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstance_overrideAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstance_overrideAccess().getDestIdentifierParserRuleCall_3_0()); 
	    }
		lv_dest_3_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstance_overrideRule());
	        }
       		set(
       			$current, 
       			"dest",
        		lv_dest_3_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstance_overrideAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuledata_declaration
entryRuledata_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getData_declarationRule()); }
	 iv_ruledata_declaration=ruledata_declaration 
	 { $current=$iv_ruledata_declaration.current; } 
	 EOF 
;

// Rule data_declaration
ruledata_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getData_declarationAccess().getTypeData_typeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruledata_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getData_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"data_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getData_declarationAccess().getInstancesData_instantiationParserRuleCall_1_0()); 
	    }
		lv_instances_1_0=ruledata_instantiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getData_declarationRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_1_0, 
        		"data_instantiation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getData_declarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getData_declarationAccess().getInstancesData_instantiationParserRuleCall_2_1_0()); 
	    }
		lv_instances_3_0=ruledata_instantiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getData_declarationRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_3_0, 
        		"data_instantiation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getData_declarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuledata_instantiation
entryRuledata_instantiation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getData_instantiationRule()); }
	 iv_ruledata_instantiation=ruledata_instantiation 
	 { $current=$iv_ruledata_instantiation.current; } 
	 EOF 
;

// Rule data_instantiation
ruledata_instantiation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getData_instantiationAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getData_instantiationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getData_instantiationAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getData_instantiationAccess().getPortmapGraph_interface_portmap_listParserRuleCall_1_1_0()); 
	    }
		lv_portmap_2_0=rulegraph_interface_portmap_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getData_instantiationRule());
	        }
       		set(
       			$current, 
       			"portmap",
        		lv_portmap_2_0, 
        		"graph_interface_portmap_list");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getData_instantiationAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRulegraph_interface_portmap_list
entryRulegraph_interface_portmap_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_interface_portmap_listRule()); }
	 iv_rulegraph_interface_portmap_list=rulegraph_interface_portmap_list 
	 { $current=$iv_rulegraph_interface_portmap_list.current; } 
	 EOF 
;

// Rule graph_interface_portmap_list
rulegraph_interface_portmap_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGraph_interface_portmap_listAccess().getGraph_interface_portmap_listAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_interface_portmap_listAccess().getMapsGraph_interface_portmapParserRuleCall_1_0_0()); 
	    }
		lv_maps_1_0=rulegraph_interface_portmap		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_interface_portmap_listRule());
	        }
       		add(
       			$current, 
       			"maps",
        		lv_maps_1_0, 
        		"graph_interface_portmap");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGraph_interface_portmap_listAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_interface_portmap_listAccess().getMapsGraph_interface_portmapParserRuleCall_1_1_1_0()); 
	    }
		lv_maps_3_0=rulegraph_interface_portmap		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_interface_portmap_listRule());
	        }
       		add(
       			$current, 
       			"maps",
        		lv_maps_3_0, 
        		"graph_interface_portmap");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRulegraph_interface_portmap
entryRulegraph_interface_portmap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_interface_portmapRule()); }
	 iv_rulegraph_interface_portmap=rulegraph_interface_portmap 
	 { $current=$iv_rulegraph_interface_portmap.current; } 
	 EOF 
;

// Rule graph_interface_portmap
rulegraph_interface_portmap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGraph_interface_portmapAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_interface_portmapAccess().getPortnameIdentifierParserRuleCall_1_0()); 
	    }
		lv_portname_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_interface_portmapRule());
	        }
       		set(
       			$current, 
       			"portname",
        		lv_portname_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGraph_interface_portmapAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraph_interface_portmapAccess().getConnected_nameHierarchical_idParserRuleCall_3_0()); 
	    }
		lv_connected_name_3_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraph_interface_portmapRule());
	        }
       		set(
       			$current, 
       			"connected_name",
        		lv_connected_name_3_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGraph_interface_portmapAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuledata_type
entryRuledata_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getData_typeRule()); }
	 iv_ruledata_type=ruledata_type 
	 { $current=$iv_ruledata_type.current; } 
	 EOF 
;

// Rule data_type
ruledata_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getData_typeAccess().getInteger_typeParserRuleCall_0()); 
    }
    this_integer_type_0=ruleinteger_type
    { 
        $current = $this_integer_type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getData_typeAccess().getEnum_typeParserRuleCall_1()); 
    }
    this_enum_type_1=ruleenum_type
    { 
        $current = $this_enum_type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getData_typeAccess().getUser_defined_typeParserRuleCall_2()); 
    }
    this_user_defined_type_2=ruleuser_defined_type
    { 
        $current = $this_user_defined_type_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleuser_defined_type
entryRuleuser_defined_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUser_defined_typeRule()); }
	 iv_ruleuser_defined_type=ruleuser_defined_type 
	 { $current=$iv_ruleuser_defined_type.current; } 
	 EOF 
;

// Rule user_defined_type
ruleuser_defined_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getUser_defined_typeAccess().getTypenameIdentifierParserRuleCall_0()); 
	    }
		lv_typename_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUser_defined_typeRule());
	        }
       		set(
       			$current, 
       			"typename",
        		lv_typename_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuletypedef_declaration
entryRuletypedef_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedef_declarationRule()); }
	 iv_ruletypedef_declaration=ruletypedef_declaration 
	 { $current=$iv_ruletypedef_declaration.current; } 
	 EOF 
;

// Rule typedef_declaration
ruletypedef_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedef_declarationAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedef_declarationAccess().getTypeData_typeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruledata_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedef_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"data_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedef_declarationAccess().getType_identifierIdentifierParserRuleCall_2_0()); 
	    }
		lv_type_identifier_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedef_declarationRule());
	        }
       		set(
       			$current, 
       			"type_identifier",
        		lv_type_identifier_2_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypedef_declarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleenum_type
entryRuleenum_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_typeRule()); }
	 iv_ruleenum_type=ruleenum_type 
	 { $current=$iv_ruleenum_type.current; } 
	 EOF 
;

// Rule enum_type
ruleenum_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnum_typeAccess().getEnumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnum_typeAccess().getData_typeInteger_typeParserRuleCall_1_0()); 
	    }
		lv_data_type_1_0=ruleinteger_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnum_typeRule());
	        }
       		set(
       			$current, 
       			"data_type",
        		lv_data_type_1_0, 
        		"integer_type");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnum_typeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnum_typeAccess().getItemsIdentifierParserRuleCall_3_0()); 
	    }
		lv_items_3_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnum_typeRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnum_typeAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnum_typeAccess().getItemsIdentifierParserRuleCall_4_1_0()); 
	    }
		lv_items_5_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnum_typeRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_5_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnum_typeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleinteger_type
entryRuleinteger_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_typeRule()); }
	 iv_ruleinteger_type=ruleinteger_type 
	 { $current=$iv_ruleinteger_type.current; } 
	 EOF 
;

// Rule integer_type
ruleinteger_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='signed' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInteger_typeAccess().getSignedKeyword_0_0());
    }

    |	otherlv_1='unsigned' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInteger_typeAccess().getUnsignedKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getAtom_typeInteger_atom_typeParserRuleCall_1_0()); 
	    }
		lv_atom_type_2_0=ruleinteger_atom_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"atom_type",
        		lv_atom_type_2_0, 
        		"integer_atom_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInteger_typeAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getLhsExpressionParserRuleCall_2_1_0()); 
	    }
		lv_lhs_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_4_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInteger_typeAccess().getColonKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getRhsExpressionParserRuleCall_2_3_0()); 
	    }
		lv_rhs_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_6_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInteger_typeAccess().getRightSquareBracketKeyword_2_4());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getInsideType_inside_clauseParserRuleCall_3_0()); 
	    }
		lv_inside_8_0=ruletype_inside_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"inside",
        		lv_inside_8_0, 
        		"type_inside_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleinteger_atom_type
entryRuleinteger_atom_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_atom_typeRule()); } 
	 iv_ruleinteger_atom_type=ruleinteger_atom_type 
	 { $current=$iv_ruleinteger_atom_type.current.getText(); }  
	 EOF 
;

// Rule integer_atom_type
ruleinteger_atom_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInteger_atom_typeAccess().getIntKeyword_0()); 
    }

    |
	kw='bit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInteger_atom_typeAccess().getBitKeyword_1()); 
    }
)
    ;





// Entry rule entryRuletype_inside_clause
entryRuletype_inside_clause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_inside_clauseRule()); }
	 iv_ruletype_inside_clause=ruletype_inside_clause 
	 { $current=$iv_ruletype_inside_clause.current; } 
	 EOF 
;

// Rule type_inside_clause
ruletype_inside_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inside' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getType_inside_clauseAccess().getInsideKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getType_inside_clauseAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getType_inside_clauseAccess().getDomainOpen_range_listParserRuleCall_2_0()); 
	    }
		lv_domain_2_0=ruleopen_range_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_inside_clauseRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_2_0, 
        		"open_range_list");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getType_inside_clauseAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleopen_range_list
entryRuleopen_range_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpen_range_listRule()); }
	 iv_ruleopen_range_list=ruleopen_range_list 
	 { $current=$iv_ruleopen_range_list.current; } 
	 EOF 
;

// Rule open_range_list
ruleopen_range_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOpen_range_listAccess().getRangesOpen_range_valueParserRuleCall_0_0()); 
	    }
		lv_ranges_0_0=ruleopen_range_value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpen_range_listRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_0_0, 
        		"open_range_value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpen_range_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpen_range_listAccess().getRangesOpen_range_valueParserRuleCall_1_1_0()); 
	    }
		lv_ranges_2_0=ruleopen_range_value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpen_range_listRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_2_0, 
        		"open_range_value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleopen_range_value
entryRuleopen_range_value returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpen_range_valueRule()); }
	 iv_ruleopen_range_value=ruleopen_range_value 
	 { $current=$iv_ruleopen_range_value.current; } 
	 EOF 
;

// Rule open_range_value
ruleopen_range_value returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOpen_range_valueAccess().getLhsExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpen_range_valueRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpen_range_valueAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpen_range_valueAccess().getRangeRange_exprParserRuleCall_1_1_0()); 
	    }
		lv_range_2_0=rulerange_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpen_range_valueRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"range_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOpen_range_valueAccess().getRightSquareBracketKeyword_1_2());
    }
))
;





// Entry rule entryRulerange_expr
entryRulerange_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRange_exprRule()); }
	 iv_rulerange_expr=rulerange_expr 
	 { $current=$iv_rulerange_expr.current; } 
	 EOF 
;

// Rule range_expr
rulerange_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRange_exprAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRange_exprAccess().getLhsExpressionParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRange_exprRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRange_exprAccess().getColonKeyword_2_0());
    }

    |	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRange_exprAccess().getFullStopFullStopKeyword_2_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRange_exprAccess().getRhsExpressionParserRuleCall_3_0()); 
	    }
		lv_rhs_4_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRange_exprRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRange_exprAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleconstraint_declaration
entryRuleconstraint_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraint_declarationRule()); }
	 iv_ruleconstraint_declaration=ruleconstraint_declaration 
	 { $current=$iv_ruleconstraint_declaration.current; } 
	 EOF 
;

// Rule constraint_declaration
ruleconstraint_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraint_declarationAccess().getConstraintKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraint_declarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraint_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='dynamic' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstraint_declarationAccess().getDynamicKeyword_2());
    }
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraint_declarationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraint_declarationAccess().getBodyConstraint_body_itemParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleconstraint_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraint_declarationRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"constraint_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraint_declarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleconstraint_body_item
entryRuleconstraint_body_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraint_body_itemRule()); }
	 iv_ruleconstraint_body_item=ruleconstraint_body_item 
	 { $current=$iv_ruleconstraint_body_item.current; } 
	 EOF 
;

// Rule constraint_body_item
ruleconstraint_body_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraint_body_itemAccess().getExpression_or_dist_itemParserRuleCall_0()); 
    }
    this_expression_or_dist_item_0=ruleexpression_or_dist_item
    { 
        $current = $this_expression_or_dist_item_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraint_body_itemAccess().getForeach_constraint_itemParserRuleCall_1()); 
    }
    this_foreach_constraint_item_1=ruleforeach_constraint_item
    { 
        $current = $this_foreach_constraint_item_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraint_body_itemAccess().getIf_constraint_itemParserRuleCall_2()); 
    }
    this_if_constraint_item_2=ruleif_constraint_item
    { 
        $current = $this_if_constraint_item_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleexpression_or_dist_item
entryRuleexpression_or_dist_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_or_dist_itemRule()); }
	 iv_ruleexpression_or_dist_item=ruleexpression_or_dist_item 
	 { $current=$iv_ruleexpression_or_dist_item.current; } 
	 EOF 
;

// Rule expression_or_dist_item
ruleexpression_or_dist_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpression_or_dist_itemAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_or_dist_itemAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_or_dist_itemAccess().getImpl_constraintConstraint_setParserRuleCall_1_0_1_0()); 
	    }
		lv_impl_constraint_2_0=ruleconstraint_set		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_or_dist_itemRule());
	        }
       		set(
       			$current, 
       			"impl_constraint",
        		lv_impl_constraint_2_0, 
        		"constraint_set");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpression_or_dist_itemAccess().getSemicolonKeyword_1_1());
    }
))
;





// Entry rule entryRuleif_constraint_item
entryRuleif_constraint_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_constraint_itemRule()); }
	 iv_ruleif_constraint_item=ruleif_constraint_item 
	 { $current=$iv_ruleif_constraint_item.current; } 
	 EOF 
;

// Rule if_constraint_item
ruleif_constraint_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIf_constraint_itemAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIf_constraint_itemAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_constraint_itemAccess().getIf_exprExpressionParserRuleCall_2_0()); 
	    }
		lv_if_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_constraint_itemRule());
	        }
       		set(
       			$current, 
       			"if_expr",
        		lv_if_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIf_constraint_itemAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_constraint_itemAccess().getTrue_caseConstraint_setParserRuleCall_4_0()); 
	    }
		lv_true_case_4_0=ruleconstraint_set		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_constraint_itemRule());
	        }
       		set(
       			$current, 
       			"true_case",
        		lv_true_case_4_0, 
        		"constraint_set");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIf_constraint_itemAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_constraint_itemAccess().getFalse_setConstraint_setParserRuleCall_5_1_0()); 
	    }
		lv_false_set_6_0=ruleconstraint_set		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_constraint_itemRule());
	        }
       		set(
       			$current, 
       			"false_set",
        		lv_false_set_6_0, 
        		"constraint_set");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleforeach_constraint_item
entryRuleforeach_constraint_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeach_constraint_itemRule()); }
	 iv_ruleforeach_constraint_item=ruleforeach_constraint_item 
	 { $current=$iv_ruleforeach_constraint_item.current; } 
	 EOF 
;

// Rule foreach_constraint_item
ruleforeach_constraint_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeach_constraint_itemAccess().getForeachKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForeach_constraint_itemAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeach_constraint_itemAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeach_constraint_itemRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForeach_constraint_itemAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeach_constraint_itemAccess().getBodyConstraint_setParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleconstraint_set		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeach_constraint_itemRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"constraint_set");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleconstraint_set
entryRuleconstraint_set returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraint_setRule()); }
	 iv_ruleconstraint_set=ruleconstraint_set 
	 { $current=$iv_ruleconstraint_set.current; } 
	 EOF 
;

// Rule constraint_set
ruleconstraint_set returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraint_setAccess().getItemsConstraint_body_itemParserRuleCall_0_0()); 
	    }
		lv_items_0_0=ruleconstraint_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraint_setRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"constraint_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraint_setAccess().getItemsConstraint_blockParserRuleCall_1_0()); 
	    }
		lv_items_1_0=ruleconstraint_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraint_setRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"constraint_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleconstraint_block
entryRuleconstraint_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraint_blockRule()); }
	 iv_ruleconstraint_block=ruleconstraint_block 
	 { $current=$iv_ruleconstraint_block.current; } 
	 EOF 
;

// Rule constraint_block
ruleconstraint_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraint_blockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstraint_blockAccess().getConstraint_setAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraint_blockAccess().getItemsConstraint_body_itemParserRuleCall_2_0()); 
	    }
		lv_items_2_0=ruleconstraint_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraint_blockRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"constraint_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraint_blockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulebin_or_scheme_declaration
entryRulebin_or_scheme_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_or_scheme_declarationRule()); }
	 iv_rulebin_or_scheme_declaration=rulebin_or_scheme_declaration 
	 { $current=$iv_rulebin_or_scheme_declaration.current; } 
	 EOF 
;

// Rule bin_or_scheme_declaration
rulebin_or_scheme_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBin_or_scheme_declarationAccess().getBins_declarationParserRuleCall_0()); 
    }
    this_bins_declaration_0=rulebins_declaration
    { 
        $current = $this_bins_declaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBin_or_scheme_declarationAccess().getBin_scheme_declarationParserRuleCall_1()); 
    }
    this_bin_scheme_declaration_1=rulebin_scheme_declaration
    { 
        $current = $this_bin_scheme_declaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulebins_declaration
entryRulebins_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBins_declarationRule()); }
	 iv_rulebins_declaration=rulebins_declaration 
	 { $current=$iv_rulebins_declaration.current; } 
	 EOF 
;

// Rule bins_declaration
rulebins_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bins' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBins_declarationAccess().getBinsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBins_declarationAccess().getItemVariable_identifierParserRuleCall_1_0()); 
	    }
		lv_item_1_0=rulevariable_identifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBins_declarationRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_1_0, 
        		"variable_identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBins_declarationAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBins_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBins_declarationAccess().getBinsBin_specificationParserRuleCall_3_0()); 
	    }
		lv_bins_3_0=rulebin_specification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBins_declarationRule());
	        }
       		set(
       			$current, 
       			"bins",
        		lv_bins_3_0, 
        		"bin_specification");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBins_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulebin_specification
entryRulebin_specification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_specificationRule()); }
	 iv_rulebin_specification=rulebin_specification 
	 { $current=$iv_rulebin_specification.current; } 
	 EOF 
;

// Rule bin_specification
rulebin_specification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBin_specificationAccess().getItemsBin_specifierParserRuleCall_0_0()); 
	    }
		lv_items_0_0=rulebin_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_specificationRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"bin_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_specificationAccess().getItemsBin_specifierParserRuleCall_1_0()); 
	    }
		lv_items_1_0=rulebin_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_specificationRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"bin_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
    { 
        newCompositeNode(grammarAccess.getBin_specificationAccess().getBin_wildcardParserRuleCall_2()); 
    }
rulebin_wildcard
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulebin_specifier
entryRulebin_specifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_specifierRule()); }
	 iv_rulebin_specifier=rulebin_specifier 
	 { $current=$iv_rulebin_specifier.current; } 
	 EOF 
;

// Rule bin_specifier
rulebin_specifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBin_specifierAccess().getExplicit_bin_valueParserRuleCall_0()); 
    }
    this_explicit_bin_value_0=ruleexplicit_bin_value
    { 
        $current = $this_explicit_bin_value_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBin_specifierAccess().getExplicit_bin_rangeParserRuleCall_1()); 
    }
    this_explicit_bin_range_1=ruleexplicit_bin_range
    { 
        $current = $this_explicit_bin_range_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBin_specifierAccess().getBin_range_divideParserRuleCall_2()); 
    }
    this_bin_range_divide_2=rulebin_range_divide
    { 
        $current = $this_bin_range_divide_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBin_specifierAccess().getBin_range_sizeParserRuleCall_3()); 
    }
    this_bin_range_size_3=rulebin_range_size
    { 
        $current = $this_bin_range_size_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleexplicit_bin_value
entryRuleexplicit_bin_value returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicit_bin_valueRule()); }
	 iv_ruleexplicit_bin_value=ruleexplicit_bin_value 
	 { $current=$iv_ruleexplicit_bin_value.current; } 
	 EOF 
;

// Rule explicit_bin_value
ruleexplicit_bin_value returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExplicit_bin_valueAccess().getLeftSquareBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExplicit_bin_valueAccess().getConstantParserRuleCall_1()); 
    }
    this_constant_1=ruleconstant
    { 
        $current = $this_constant_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExplicit_bin_valueAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleexplicit_bin_range
entryRuleexplicit_bin_range returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicit_bin_rangeRule()); }
	 iv_ruleexplicit_bin_range=ruleexplicit_bin_range 
	 { $current=$iv_ruleexplicit_bin_range.current; } 
	 EOF 
;

// Rule explicit_bin_range
ruleexplicit_bin_range returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExplicit_bin_rangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicit_bin_rangeAccess().getLowConstantParserRuleCall_1_0()); 
	    }
		lv_low_1_0=ruleconstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicit_bin_rangeRule());
	        }
       		set(
       			$current, 
       			"low",
        		lv_low_1_0, 
        		"constant");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExplicit_bin_rangeAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicit_bin_rangeAccess().getHighConstantParserRuleCall_3_0()); 
	    }
		lv_high_3_0=ruleconstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicit_bin_rangeRule());
	        }
       		set(
       			$current, 
       			"high",
        		lv_high_3_0, 
        		"constant");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExplicit_bin_rangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRulebin_range_divide
entryRulebin_range_divide returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_range_divideRule()); }
	 iv_rulebin_range_divide=rulebin_range_divide 
	 { $current=$iv_rulebin_range_divide.current; } 
	 EOF 
;

// Rule bin_range_divide
rulebin_range_divide returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBin_range_divideAccess().getExplicit_bin_rangeParserRuleCall_0()); 
    }
    this_explicit_bin_range_0=ruleexplicit_bin_range
    { 
        $current = $this_explicit_bin_range_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBin_range_divideAccess().getSolidusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_range_divideAccess().getDivConstantParserRuleCall_2_0()); 
	    }
		lv_div_2_0=ruleconstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_range_divideRule());
	        }
       		set(
       			$current, 
       			"div",
        		lv_div_2_0, 
        		"constant");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulebin_range_size
entryRulebin_range_size returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_range_sizeRule()); }
	 iv_rulebin_range_size=rulebin_range_size 
	 { $current=$iv_rulebin_range_size.current; } 
	 EOF 
;

// Rule bin_range_size
rulebin_range_size returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBin_range_sizeAccess().getExplicit_bin_rangeParserRuleCall_0()); 
    }
    this_explicit_bin_range_0=ruleexplicit_bin_range
    { 
        $current = $this_explicit_bin_range_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBin_range_sizeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_range_sizeAccess().getSizeConstantParserRuleCall_2_0()); 
	    }
		lv_size_2_0=ruleconstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_range_sizeRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"constant");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulebin_wildcard
entryRulebin_wildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_wildcardRule()); } 
	 iv_rulebin_wildcard=rulebin_wildcard 
	 { $current=$iv_rulebin_wildcard.current.getText(); }  
	 EOF 
;

// Rule bin_wildcard
rulebin_wildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='[*]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBin_wildcardAccess().getLeftSquareBracketAsteriskRightSquareBracketKeyword()); 
    }

    ;





// Entry rule entryRulebin_scheme_declaration
entryRulebin_scheme_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_scheme_declarationRule()); }
	 iv_rulebin_scheme_declaration=rulebin_scheme_declaration 
	 { $current=$iv_rulebin_scheme_declaration.current; } 
	 EOF 
;

// Rule bin_scheme_declaration
rulebin_scheme_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bin_scheme' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBin_scheme_declarationAccess().getBin_schemeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_scheme_declarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_scheme_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBin_scheme_declarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_scheme_declarationAccess().getItemsBin_scheme_specifierParserRuleCall_3_0()); 
	    }
		lv_items_3_0=rulebin_scheme_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_scheme_declarationRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"bin_scheme_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_scheme_declarationAccess().getItemsBin_scheme_specifierParserRuleCall_4_0()); 
	    }
		lv_items_4_0=rulebin_scheme_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_scheme_declarationRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"bin_scheme_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='};' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBin_scheme_declarationAccess().getRightCurlyBracketSemicolonKeyword_5());
    }
)
;





// Entry rule entryRulebin_scheme_specifier
entryRulebin_scheme_specifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_scheme_specifierRule()); }
	 iv_rulebin_scheme_specifier=rulebin_scheme_specifier 
	 { $current=$iv_rulebin_scheme_specifier.current; } 
	 EOF 
;

// Rule bin_scheme_specifier
rulebin_scheme_specifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBin_scheme_specifierAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_scheme_specifierRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getBin_scheme_specifierAccess().getBin_identifierParserRuleCall_1_0()); 
    }
rulebin_identifier
    { 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBin_scheme_specifierAccess().getSpecBin_specifierParserRuleCall_1_1_0()); 
	    }
		lv_spec_2_0=rulebin_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBin_scheme_specifierRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_2_0, 
        		"bin_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;







// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getCondition_exprParserRuleCall()); 
    }
    this_condition_expr_0=rulecondition_expr
    { 
        $current = $this_condition_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulecondition_expr
entryRulecondition_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCondition_exprRule()); }
	 iv_rulecondition_expr=rulecondition_expr 
	 { $current=$iv_rulecondition_expr.current; } 
	 EOF 
;

// Rule condition_expr
rulecondition_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCondition_exprAccess().getLogical_or_exprParserRuleCall_0()); 
    }
    this_logical_or_expr_0=rulelogical_or_expr
    { 
        $current = $this_logical_or_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCondition_exprAccess().getCondition_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCondition_exprAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCondition_exprAccess().getTrue_exprLogical_or_exprParserRuleCall_1_2_0()); 
	    }
		lv_true_expr_3_0=rulelogical_or_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCondition_exprRule());
	        }
       		set(
       			$current, 
       			"true_expr",
        		lv_true_expr_3_0, 
        		"logical_or_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCondition_exprAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCondition_exprAccess().getFalse_exprLogical_or_exprParserRuleCall_1_4_0()); 
	    }
		lv_false_expr_5_0=rulelogical_or_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCondition_exprRule());
	        }
       		set(
       			$current, 
       			"false_expr",
        		lv_false_expr_5_0, 
        		"logical_or_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_or_expr
entryRulelogical_or_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_or_exprRule()); }
	 iv_rulelogical_or_expr=rulelogical_or_expr 
	 { $current=$iv_rulelogical_or_expr.current; } 
	 EOF 
;

// Rule logical_or_expr
rulelogical_or_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_or_exprAccess().getLogical_and_exprParserRuleCall_0()); 
    }
    this_logical_and_expr_0=rulelogical_and_expr
    { 
        $current = $this_logical_and_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogical_or_exprAccess().getLogical_or_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogical_or_exprAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_or_exprAccess().getRightLogical_and_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulelogical_and_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_or_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"logical_and_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_and_expr
entryRulelogical_and_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_and_exprRule()); }
	 iv_rulelogical_and_expr=rulelogical_and_expr 
	 { $current=$iv_rulelogical_and_expr.current; } 
	 EOF 
;

// Rule logical_and_expr
rulelogical_and_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_and_exprAccess().getBinary_or_exprParserRuleCall_0()); 
    }
    this_binary_or_expr_0=rulebinary_or_expr
    { 
        $current = $this_binary_or_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogical_and_exprAccess().getLogical_and_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogical_and_exprAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_and_exprAccess().getRightBinary_or_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_or_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_and_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_or_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_or_expr
entryRulebinary_or_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_or_exprRule()); }
	 iv_rulebinary_or_expr=rulebinary_or_expr 
	 { $current=$iv_rulebinary_or_expr.current; } 
	 EOF 
;

// Rule binary_or_expr
rulebinary_or_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_or_exprAccess().getBinary_xor_exprParserRuleCall_0()); 
    }
    this_binary_xor_expr_0=rulebinary_xor_expr
    { 
        $current = $this_binary_xor_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_or_exprAccess().getLogical_or_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinary_or_exprAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_or_exprAccess().getRightBinary_xor_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_xor_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_or_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_xor_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_xor_expr
entryRulebinary_xor_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_xor_exprRule()); }
	 iv_rulebinary_xor_expr=rulebinary_xor_expr 
	 { $current=$iv_rulebinary_xor_expr.current; } 
	 EOF 
;

// Rule binary_xor_expr
rulebinary_xor_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_xor_exprAccess().getBinary_and_exprParserRuleCall_0()); 
    }
    this_binary_and_expr_0=rulebinary_and_expr
    { 
        $current = $this_binary_and_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_xor_exprAccess().getBinary_xor_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinary_xor_exprAccess().getCircumflexAccentKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_xor_exprAccess().getRightBinary_and_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_and_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_xor_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_and_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_and_expr
entryRulebinary_and_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_and_exprRule()); }
	 iv_rulebinary_and_expr=rulebinary_and_expr 
	 { $current=$iv_rulebinary_and_expr.current; } 
	 EOF 
;

// Rule binary_and_expr
rulebinary_and_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_and_exprAccess().getLogical_equality_exprParserRuleCall_0()); 
    }
    this_logical_equality_expr_0=rulelogical_equality_expr
    { 
        $current = $this_logical_equality_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_and_exprAccess().getBinary_and_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinary_and_exprAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_and_exprAccess().getRightLogical_equality_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulelogical_equality_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_and_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"logical_equality_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_equality_expr
entryRulelogical_equality_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_equality_exprRule()); }
	 iv_rulelogical_equality_expr=rulelogical_equality_expr 
	 { $current=$iv_rulelogical_equality_expr.current; } 
	 EOF 
;

// Rule logical_equality_expr
rulelogical_equality_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_equality_exprAccess().getLogical_inequality_exprParserRuleCall_0()); 
    }
    this_logical_inequality_expr_0=rulelogical_inequality_expr
    { 
        $current = $this_logical_inequality_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogical_equality_exprAccess().getLogical_equality_exprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_equality_exprAccess().getOpEq_neq_opParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleeq_neq_op		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_equality_exprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"eq_neq_op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_equality_exprAccess().getRightLogical_inequality_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulelogical_inequality_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_equality_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"logical_inequality_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulelogical_inequality_expr
entryRulelogical_inequality_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_inequality_exprRule()); }
	 iv_rulelogical_inequality_expr=rulelogical_inequality_expr 
	 { $current=$iv_rulelogical_inequality_expr.current; } 
	 EOF 
;

// Rule logical_inequality_expr
rulelogical_inequality_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogical_inequality_exprAccess().getBinary_shift_exprParserRuleCall_0()); 
    }
    this_binary_shift_expr_0=rulebinary_shift_expr
    { 
        $current = $this_binary_shift_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogical_inequality_exprAccess().getLogical_inequality_exprLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getLogical_inequality_exprAccess().getOpLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_inequality_exprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getLogical_inequality_exprAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_inequality_exprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getLogical_inequality_exprAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_inequality_exprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'>=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getLogical_inequality_exprAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_inequality_exprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'inside' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getLogical_inequality_exprAccess().getOpInsideKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_inequality_exprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_inequality_exprAccess().getRightBinary_shift_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_shift_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_inequality_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_shift_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_shift_expr
entryRulebinary_shift_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_shift_exprRule()); }
	 iv_rulebinary_shift_expr=rulebinary_shift_expr 
	 { $current=$iv_rulebinary_shift_expr.current; } 
	 EOF 
;

// Rule binary_shift_expr
rulebinary_shift_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_shift_exprAccess().getBinary_add_sub_exprParserRuleCall_0()); 
    }
    this_binary_add_sub_expr_0=rulebinary_add_sub_expr
    { 
        $current = $this_binary_add_sub_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_shift_exprAccess().getBinary_shift_exprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_shift_exprAccess().getOpShift_opParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleshift_op		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_shift_exprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"shift_op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_shift_exprAccess().getRightBinary_add_sub_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_add_sub_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_shift_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_add_sub_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_add_sub_expr
entryRulebinary_add_sub_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_add_sub_exprRule()); }
	 iv_rulebinary_add_sub_expr=rulebinary_add_sub_expr 
	 { $current=$iv_rulebinary_add_sub_expr.current; } 
	 EOF 
;

// Rule binary_add_sub_expr
rulebinary_add_sub_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_add_sub_exprAccess().getBinary_mul_div_mod_exprParserRuleCall_0()); 
    }
    this_binary_mul_div_mod_expr_0=rulebinary_mul_div_mod_expr
    { 
        $current = $this_binary_mul_div_mod_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_add_sub_exprAccess().getBinary_add_sub_exprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_add_sub_exprAccess().getOpAdd_sub_opParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleadd_sub_op		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_add_sub_exprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"add_sub_op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_add_sub_exprAccess().getRightBinary_mul_div_mod_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_mul_div_mod_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_add_sub_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_mul_div_mod_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_mul_div_mod_expr
entryRulebinary_mul_div_mod_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_mul_div_mod_exprRule()); }
	 iv_rulebinary_mul_div_mod_expr=rulebinary_mul_div_mod_expr 
	 { $current=$iv_rulebinary_mul_div_mod_expr.current; } 
	 EOF 
;

// Rule binary_mul_div_mod_expr
rulebinary_mul_div_mod_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_mul_div_mod_exprAccess().getBinary_exp_exprParserRuleCall_0()); 
    }
    this_binary_exp_expr_0=rulebinary_exp_expr
    { 
        $current = $this_binary_exp_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_mul_div_mod_exprAccess().getBinary_mul_div_mod_exprLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_mul_div_mod_exprAccess().getOpMul_div_mod_opParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulemul_div_mod_op		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_mul_div_mod_exprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"mul_div_mod_op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_mul_div_mod_exprAccess().getRightBinary_exp_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulebinary_exp_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_mul_div_mod_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"binary_exp_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulebinary_exp_expr
entryRulebinary_exp_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinary_exp_exprRule()); }
	 iv_rulebinary_exp_expr=rulebinary_exp_expr 
	 { $current=$iv_rulebinary_exp_expr.current; } 
	 EOF 
;

// Rule binary_exp_expr
rulebinary_exp_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinary_exp_exprAccess().getUnary_exprParserRuleCall_0()); 
    }
    this_unary_expr_0=ruleunary_expr
    { 
        $current = $this_unary_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinary_exp_exprAccess().getBinary_exp_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='**' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinary_exp_exprAccess().getAsteriskAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinary_exp_exprAccess().getRightUnary_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleunary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinary_exp_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"unary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleunary_op
entryRuleunary_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_opRule()); } 
	 iv_ruleunary_op=ruleunary_op 
	 { $current=$iv_ruleunary_op.current.getText(); }  
	 EOF 
;

// Rule unary_op
ruleunary_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getExclamationMarkKeyword_2()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getTildeKeyword_3()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getAmpersandKeyword_4()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getVerticalLineKeyword_5()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_opAccess().getCircumflexAccentKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleeq_neq_op
entryRuleeq_neq_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEq_neq_opRule()); } 
	 iv_ruleeq_neq_op=ruleeq_neq_op 
	 { $current=$iv_ruleeq_neq_op.current.getText(); }  
	 EOF 
;

// Rule eq_neq_op
ruleeq_neq_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEq_neq_opAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEq_neq_opAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleshift_op
entryRuleshift_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getShift_opRule()); } 
	 iv_ruleshift_op=ruleshift_op 
	 { $current=$iv_ruleshift_op.current.getText(); }  
	 EOF 
;

// Rule shift_op
ruleshift_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_opAccess().getLessThanSignLessThanSignKeyword_0()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getShift_opAccess().getGreaterThanSignGreaterThanSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleadd_sub_op
entryRuleadd_sub_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_sub_opRule()); } 
	 iv_ruleadd_sub_op=ruleadd_sub_op 
	 { $current=$iv_ruleadd_sub_op.current.getText(); }  
	 EOF 
;

// Rule add_sub_op
ruleadd_sub_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_sub_opAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdd_sub_opAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulemul_div_mod_op
entryRulemul_div_mod_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMul_div_mod_opRule()); } 
	 iv_rulemul_div_mod_op=rulemul_div_mod_op 
	 { $current=$iv_rulemul_div_mod_op.current.getText(); }  
	 EOF 
;

// Rule mul_div_mod_op
rulemul_div_mod_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_div_mod_opAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_div_mod_opAccess().getSolidusKeyword_1()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMul_div_mod_opAccess().getPercentSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleunary_expr
entryRuleunary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	 iv_ruleunary_expr=ruleunary_expr 
	 { $current=$iv_ruleunary_expr.current; } 
	 EOF 
;

// Rule unary_expr
ruleunary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getUnary_opParserRuleCall_0()); 
    }
ruleunary_op
    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getPrimaryParserRuleCall_1()); 
    }
    this_primary_1=ruleprimary
    { 
        $current = $this_primary_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleprimary
entryRuleprimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_ruleprimary=ruleprimary 
	 { $current=$iv_ruleprimary.current; } 
	 EOF 
;

// Rule primary
ruleprimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprLiteralParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleliteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprHierarchical_idParserRuleCall_2_0_0()); 
	    }
		lv_expr_4_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLhsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_lhs_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_6_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getColonKeyword_2_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getRhsExpressionParserRuleCall_2_1_2_1_0()); 
	    }
		lv_rhs_8_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_8_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_2_1_3());
    }
)?))
;





// Entry rule entryRuleinterface_declaration
entryRuleinterface_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_declarationRule()); }
	 iv_ruleinterface_declaration=ruleinterface_declaration 
	 { $current=$iv_ruleinterface_declaration.current; } 
	 EOF 
;

// Rule interface_declaration
ruleinterface_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterface_declarationAccess().getInterfaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterface_declarationAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declarationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getInterface_declarationAccess().getSuperInterface_declarationCrossReference_2_1_0()); 
	}

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterface_declarationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getBodyInterface_body_itemParserRuleCall_4_0()); 
	    }
		lv_body_5_0=ruleinterface_body_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"interface_body_item");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterface_declarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleinterface_body_item
entryRuleinterface_body_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_body_itemRule()); }
	 iv_ruleinterface_body_item=ruleinterface_body_item 
	 { $current=$iv_ruleinterface_body_item.current; } 
	 EOF 
;

// Rule interface_body_item
ruleinterface_body_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInterface_body_itemAccess().getAction_declarationParserRuleCall()); 
    }
    this_action_declaration_0=ruleaction_declaration
    { 
        $current = $this_action_declaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleaction_declaration
entryRuleaction_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAction_declarationRule()); }
	 iv_ruleaction_declaration=ruleaction_declaration 
	 { $current=$iv_ruleaction_declaration.current; } 
	 EOF 
;

// Rule action_declaration
ruleaction_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='action' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAction_declarationAccess().getActionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAction_declarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAction_declarationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAction_declarationAccess().getPortsAction_portlistParserRuleCall_3_0()); 
	    }
		lv_ports_3_0=ruleaction_portlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_declarationRule());
	        }
       		set(
       			$current, 
       			"ports",
        		lv_ports_3_0, 
        		"action_portlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAction_declarationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAction_declarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleaction_portlist
entryRuleaction_portlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAction_portlistRule()); }
	 iv_ruleaction_portlist=ruleaction_portlist 
	 { $current=$iv_ruleaction_portlist.current; } 
	 EOF 
;

// Rule action_portlist
ruleaction_portlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAction_portlistAccess().getAction_portlistAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAction_portlistAccess().getPortsAction_portParserRuleCall_1_0_0()); 
	    }
		lv_ports_1_0=ruleaction_port		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_portlistRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_1_0, 
        		"action_port");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAction_portlistAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAction_portlistAccess().getPortsAction_portParserRuleCall_1_1_1_0()); 
	    }
		lv_ports_3_0=ruleaction_port		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_portlistRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_3_0, 
        		"action_port");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleaction_port
entryRuleaction_port returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAction_portRule()); }
	 iv_ruleaction_port=ruleaction_port 
	 { $current=$iv_ruleaction_port.current; } 
	 EOF 
;

// Rule action_port
ruleaction_port returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAction_portAccess().getIo_directionParserRuleCall_0()); 
    }
ruleio_direction
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAction_portAccess().getTypeData_typeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruledata_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_portRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"data_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAction_portAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAction_portRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleio_direction
entryRuleio_direction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIo_directionRule()); } 
	 iv_ruleio_direction=ruleio_direction 
	 { $current=$iv_ruleio_direction.current.getText(); }  
	 EOF 
;

// Rule io_direction
ruleio_direction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='input' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIo_directionAccess().getInputKeyword_0()); 
    }

    |
	kw='output' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIo_directionAccess().getOutputKeyword_1()); 
    }

    |
	kw='inout' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIo_directionAccess().getInoutKeyword_2()); 
    }
)
    ;







// Entry rule entryRulesymbol_declaration
entryRulesymbol_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbol_declarationRule()); }
	 iv_rulesymbol_declaration=rulesymbol_declaration 
	 { $current=$iv_rulesymbol_declaration.current; } 
	 EOF 
;

// Rule symbol_declaration
rulesymbol_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='symbol' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSymbol_declarationAccess().getSymbolKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_declarationAccess().getDecl_listSymbol_decl_itemParserRuleCall_1_0()); 
	    }
		lv_decl_list_1_0=rulesymbol_decl_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_declarationRule());
	        }
       		add(
       			$current, 
       			"decl_list",
        		lv_decl_list_1_0, 
        		"symbol_decl_item");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSymbol_declarationAccess().getColonEqualsSignKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_declarationAccess().getInline_ruleRule_stmt_or_blockParserRuleCall_2_0_1_0()); 
	    }
		lv_inline_rule_3_0=rulerule_stmt_or_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_declarationRule());
	        }
       		set(
       			$current, 
       			"inline_rule",
        		lv_inline_rule_3_0, 
        		"rule_stmt_or_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSymbol_declarationAccess().getCommaKeyword_2_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_declarationAccess().getDecl_listSymbol_decl_itemParserRuleCall_2_1_0_1_0()); 
	    }
		lv_decl_list_5_0=rulesymbol_decl_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_declarationRule());
	        }
       		add(
       			$current, 
       			"decl_list",
        		lv_decl_list_5_0, 
        		"symbol_decl_item");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSymbol_declarationAccess().getSemicolonKeyword_2_1_1());
    }
)))
;





// Entry rule entryRulesymbol_decl_item
entryRulesymbol_decl_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbol_decl_itemRule()); }
	 iv_rulesymbol_decl_item=rulesymbol_decl_item 
	 { $current=$iv_rulesymbol_decl_item.current; } 
	 EOF 
;

// Rule symbol_decl_item
rulesymbol_decl_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_decl_itemAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_decl_itemRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSymbol_decl_itemAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSymbol_decl_itemAccess().getParametersAction_portlistParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleaction_portlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSymbol_decl_itemRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"action_portlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSymbol_decl_itemAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleport_map
entryRuleport_map returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPort_mapRule()); }
	 iv_ruleport_map=ruleport_map 
	 { $current=$iv_ruleport_map.current; } 
	 EOF 
;

// Rule port_map
ruleport_map returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPort_mapAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPort_mapAccess().getPortIdentifierParserRuleCall_1_0()); 
	    }
		lv_port_1_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPort_mapRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_1_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPort_mapAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPort_mapAccess().getMapHierarchical_idParserRuleCall_3_0()); 
	    }
		lv_map_3_0=rulehierarchical_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPort_mapRule());
	        }
       		set(
       			$current, 
       			"map",
        		lv_map_3_0, 
        		"hierarchical_id");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPort_mapAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulegraph_identifier
entryRulegraph_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_identifierRule()); } 
	 iv_rulegraph_identifier=rulegraph_identifier 
	 { $current=$iv_rulegraph_identifier.current.getText(); }  
	 EOF 
;

// Rule graph_identifier
rulegraph_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGraph_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulestruct_identifier
entryRulestruct_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStruct_identifierRule()); } 
	 iv_rulestruct_identifier=rulestruct_identifier 
	 { $current=$iv_rulestruct_identifier.current.getText(); }  
	 EOF 
;

// Rule struct_identifier
rulestruct_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStruct_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleinterface_identifier
entryRuleinterface_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_identifierRule()); } 
	 iv_ruleinterface_identifier=ruleinterface_identifier 
	 { $current=$iv_ruleinterface_identifier.current.getText(); }  
	 EOF 
;

// Rule interface_identifier
ruleinterface_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInterface_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulegraph_or_struct_identifier
entryRulegraph_or_struct_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraph_or_struct_identifierRule()); } 
	 iv_rulegraph_or_struct_identifier=rulegraph_or_struct_identifier 
	 { $current=$iv_rulegraph_or_struct_identifier.current.getText(); }  
	 EOF 
;

// Rule graph_or_struct_identifier
rulegraph_or_struct_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGraph_or_struct_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRuleport_identifier
entryRuleport_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPort_identifierRule()); } 
	 iv_ruleport_identifier=ruleport_identifier 
	 { $current=$iv_ruleport_identifier.current.getText(); }  
	 EOF 
;

// Rule port_identifier
ruleport_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPort_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulevariable_identifier
entryRulevariable_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_identifierRule()); } 
	 iv_rulevariable_identifier=rulevariable_identifier 
	 { $current=$iv_rulevariable_identifier.current.getText(); }  
	 EOF 
;

// Rule variable_identifier
rulevariable_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariable_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulebin_identifier
entryRulebin_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBin_identifierRule()); } 
	 iv_rulebin_identifier=rulebin_identifier 
	 { $current=$iv_rulebin_identifier.current.getText(); }  
	 EOF 
;

// Rule bin_identifier
rulebin_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBin_identifierAccess().getIdentifierParserRuleCall()); 
    }
    this_identifier_0=ruleidentifier    {
		$current.merge(this_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current; } 
	 EOF 
;

// Rule constant
ruleconstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getLiteralParserRuleCall_0()); 
    }
    this_literal_0=ruleliteral
    { 
        $current = $this_literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getIdentifierParserRuleCall_1()); 
    }
ruleidentifier
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleidentifier
entryRuleidentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleidentifier=ruleidentifier 
	 { $current=$iv_ruleidentifier.current.getText(); }  
	 EOF 
;

// Rule identifier
ruleidentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulehierarchical_id
entryRulehierarchical_id returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHierarchical_idRule()); }
	 iv_rulehierarchical_id=rulehierarchical_id 
	 { $current=$iv_rulehierarchical_id.current; } 
	 EOF 
;

// Rule hierarchical_id
rulehierarchical_id returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHierarchical_idAccess().getValueIdentifierParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHierarchical_idRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHierarchical_idAccess().getFullStopKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getHierarchical_idAccess().getIdentifierParserRuleCall_1_1()); 
    }
ruleidentifier
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleinterface_action_id
entryRuleinterface_action_id returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_action_idRule()); }
	 iv_ruleinterface_action_id=ruleinterface_action_id 
	 { $current=$iv_ruleinterface_action_id.current; } 
	 EOF 
;

// Rule interface_action_id
ruleinterface_action_id returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_action_idAccess().getIfcIdentifierParserRuleCall_0_0()); 
	    }
		lv_ifc_0_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_action_idRule());
	        }
       		set(
       			$current, 
       			"ifc",
        		lv_ifc_0_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterface_action_idAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_action_idAccess().getActionIdentifierParserRuleCall_2_0()); 
	    }
		lv_action_2_0=ruleidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_action_idRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_2_0, 
        		"identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current; } 
	 EOF 
;

// Rule literal
ruleliteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;







// Entry rule entryRulesize
entryRulesize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	 iv_rulesize=rulesize 
	 { $current=$iv_rulesize.current; } 
	 EOF 
;

// Rule size
rulesize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getSizeAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSizeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





RULE_INT : ('0'..'9')+;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ID : ('\\' ~((' '|'\t'|'\r'|'\n'))+|('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);


