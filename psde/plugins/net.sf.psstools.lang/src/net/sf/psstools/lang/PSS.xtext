/****************************************************************************
 * PSS.xtext
 *
 * 
 * Grammar for the Portable Stimulus Specification
 ****************************************************************************/
grammar net.sf.psstools.lang.PSS hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate pSS "http://www.sf.net/psstools/lang/PSS"

Model:
	root+=portable_stimulus_description*;

portable_stimulus_description: 
	graph_declaration | 
	struct_declaration |
	interface_declaration |
	data_declaration |
	typedef_declaration |
	bins_declaration |
	package_declaration |
	import_stmt /* |
	include_statement |
	bins_declaration |
	package_declaration */
;

package_declaration:
	'package' name=package_identifier ';'
;

import_stmt:
	'import' package_import_pattern ';'
;



/** Hidden:
 *  graph_or_struct_declaration and graph_struct_if_declaration are placeholders
 * to help the language infrastructure understand that structs can only extend
 * from structs, while graphs can extend from either a struct or a graph
 */
graph_or_struct_declaration:
	graph_declaration|struct_declaration
;

/** Hidden:
 */
graph_struct_ifc_declaration:
	graph_declaration|struct_declaration|interface_declaration
;

/****************************************************************************
 * Heading: Graph, Struct, and Interface Declarations
 ****************************************************************************/
graph_declaration:
	'graph' name=graph_identifier 
		(
			'(' 
				(ports+=port_declaration (',' ports+=port_declaration)*)? 
			')'
		)?
		('extends' super=[graph_or_struct_declaration|graph_or_struct_identifier])? '{'
		body+=graph_body_item*
	'}'
;

port_declaration:
	(export?='export')? ifc_type=[interface_declaration|interface_identifier] name=port_identifier
;

struct_declaration:
	'struct' name=identifier ('extends' super=[struct_declaration|struct_identifier])? '{'
	body+=struct_body_item*
	'}'
;

struct_body_item:
	constraint_declaration		|
	field_declaration			|
	typedef_declaration			|
	bin_or_scheme_declaration	|
	import_stmt					|
	coverspec_declaration
;

graph_body_item:
	overrides_declaration  		|	
	constraint_declaration 		|
	field_declaration			|
	bin_or_scheme_declaration   |
	typedef_declaration 		|
	symbol_declaration 			|
	symbol_definition 			|
	interface_action_definition	|
	import_stmt					|
	coverspec_declaration
;

field_declaration:
	(rand?='rand')? declaration=data_declaration
;

symbol_definition:
	symbol_name=identifier ('(' (ports+=action_port (',' ports+=action_port)*)? ')')? ':=' production=rule_production 
;


interface_declaration:
	'interface' name=identifier ('extends' super=[interface_declaration])? '{'
	body+=interface_body_item*
	'}'
;

interface_body_item:
	action_declaration |
	import_stmt
;

interface_action_definition:
	action=interface_action_id '(' (ports+=action_port (',' ports+=action_port)*)? ')' ':=' '{' body_items+=graph_body_item* '}' 
;

action_declaration:
	'action' name=identifier '(' (ports+=action_port (',' ports+=action_port)*)? ')' ';'
;

action_portlist:
	{action_portlist} (ports+=action_port (',' ports+=action_port)*)?
;

action_port:
	(dir=io_direction)? (type=data_type) name=identifier
;

io_direction:
	input?='input' | output?='output' | inout?='inout'
;

symbol_declaration:
	'symbol' decl_list+=symbol_decl_item (
		':=' inline_rule=rule_production |
		(',' decl_list+=symbol_decl_item)* ';'
	)
;

symbol_decl_item:
	name=identifier ('(' parameters=action_portlist ')')?
;

/********************************************************************
 * Heading: Rule Productions
 ********************************************************************/
rule_production: 
	rule_if_else_production			|
	rule_repeat_stmt 				|
	rule_foreach_stmt				|
	rule_assign_stmt				|
	rule_break_stmt					|
	rule_expr_stmt					|
	rule_select_stmt				|
	rule_fork_stmt
;

//rule_if_production:
//	'if' '(' expr+=expression ')' alts+=rule_if_production_stmt
//		(
//			((alt?='|' alts+=rule_if_production_stmt) ('|' alts+=rule_if_production_stmt)* ('else' false_case=rule_if_production_stmt)?) |
//			(else?='else' false_case=rule_if_production_stmt) 
//		)
//;

//rule_if_production:
//	'if' '(' expr+=expression ')' alts+=rule_if_production_stmt
//		(
//			((alt?='|' alts+=rule_if_production_stmt) ('|' alts+=rule_if_production_stmt)* ('else' false_case=rule_if_production_stmt)?) |
//			(else?='else' false_case=rule_if_production_stmt) 
//		)
//;
rule_if_else_production:
	'if' '(' expr=expression ')' if_production=rule_production 
	'else' else_production=rule_production
;

rule_select_fork_production:
	rule_repeat_stmt 				|
	rule_foreach_stmt				|
	rule_assign_stmt				|
	rule_break_stmt					|
	rule_select_stmt				|
	rule_fork_stmt					|
	rule_select_fork_block			|
	rule_select_fork_if_else_stmt	|
	rule_sequence_stmt
	;

rule_select_fork_if_else_stmt:
	'if' '(' expr=expression ')' true_prod=rule_select_fork_production
	(=> 'else' false_prod=rule_select_fork_production)?
;	

rule_select_fork_block:
	{rule_select_fork_block} '{' productions+=rule_select_fork_production* '}'
;

rule_select_stmt:
	'select' '{'
		productions+=rule_select_production productions+=rule_select_production*
	'}'
;

rule_sequence_stmt:
	rule_sequence ';'
;

rule_select_production:
//	(label=identifier (':=' weight=rule_select_weight)? ':')? ('if' '(' expr=expression ')')? production=rule_select_fork_production 
	(label=identifier (':=' weight=rule_select_weight)? ':')? production=rule_select_fork_production 
;

rule_select_weight:
	value=number |
	id=identifier |
	'(' expr=expression ')'
;

rule_fork_stmt:
	{rule_fork_stmt} 'fork' '{'
		productions+=rule_fork_production*
	'}'
;

rule_fork_production:
//	(label=identifier ':')? ('if' '(' expr=expression ')')? production=rule_select_fork_production
	(label=identifier ':')? production=rule_select_fork_production
;

// The statement for a rule-if production can be anything but an 'if'
rule_if_production_stmt:
	rule_stmt_parallel 	|
	rule_repeat_stmt	|
	rule_foreach_stmt
;

rule_repeat_stmt:
	{rule_repeat_stmt} 'repeat' ('(' expr=expression ')')? body=rule_block_stmt
;

rule_foreach_stmt:
	'foreach' '(' expr=expression ')' body=rule_block_stmt
;

rule_assign_stmt:
	param=identifier '<=' rhs=expression ';'
;

rule_break_stmt:
	{rule_break_stmt} 'break' ';'
;

rule_expr_stmt:
	rule_stmt_alt_parallel_seq (';')?
;

rule_stmt_alt_parallel_seq:
	rule_stmt_parallel ({rule_stmt.left=current} alt?='|' ('if' '(' cond=expression ')')? right=rule_stmt_parallel)* 
;

rule_stmt_parallel:
	rule_stmt_primary ({rule_stmt.left=current} parallel?='&' right=rule_stmt_primary)* 
;

rule_sequence:
	items+=rule_seq_item (',' items+=rule_seq_item)*
;

rule_seq_item:
	rule_interface_action_call 	|
	symbol_traversal 			|
	rule_variable_reference
;

symbol_traversal:
	item=identifier
	'(' 
		(parameters+=expression (',' parameters+=expression)*)?
	')'
;

rule_interface_action_call:
	action=interface_action_id 
	'(' 
		(parameters+=expression (',' parameters+=expression)*)?
	')'
;

rule_variable_reference:
	item=identifier (with_clause=rule_with_clause)?
;

rule_with_clause:
	{rule_with_clause} 'with' '{' body+=constraint_body_item* '}'
;

rule_stmt_primary:
	rule_sequence | 
	rule_block_stmt
;

rule_block_stmt:
	'{' {rule_block_stmt} stmt_list+=rule_production* '}'
;

parameter_list:
	parameters+=hierarchical_id (',' parameters+=hierarchical_id)*
;

/********************************************************************
 * Heading: Overrides
 ********************************************************************/
overrides_declaration:
	{overides_declaration} 'override' '{' overrides+=override_stmt* '}'
;

override_stmt:
	type_override | instance_override
;

type_override:
	'type' src=identifier 'with' dest=identifier ';'
;

instance_override:
	'instance' src=hierarchical_id 'with' dest=identifier ';'
;

/********************************************************************
 * Heading: Data Declarations
 ********************************************************************/
data_declaration:
	type=data_type instances+=data_instantiation (',' instances+=data_instantiation)* ';' 
;

data_instantiation:
	name=identifier ('(' portmap=graph_interface_portmap_list ')')? dim=array_dim? ('=' init=constant_expression)?
;

array_dim:
	{array_dim} '[' (lhs=constant_expression (':' rhs=constant_expression)?)? ']'
;

graph_interface_portmap_list:
	{graph_interface_portmap_list} (
		// Name-mapped port binding
		(portmaps+=graph_interface_portmap (',' portmaps+=graph_interface_portmap)*) |
		// Positional port binding
		(ports+=hierarchical_id (',' ports+=hierarchical_id)*)
	)?
;

graph_interface_portmap:
	'.' portname=identifier '(' connected_name=hierarchical_id ')'
;

data_type:
	integer_type |
	enum_type |
	user_defined_type
;

user_defined_type:
	typename=identifier /* TODO: parameterization */
//	graph_type|struct_type|typedef_type=[typedef_declaration]
;

typedef_declaration:
 	'typedef' (=> signed?='signed'|=>unsigned?='unsigned')? type=data_type type_identifier=identifier ';' 
;
  
enum_type:
  	'enum' (data_type = integer_type)? '{' 
  		items+=enum_item (',' items+=enum_item)*
  		'}' 
  ;

enum_item:
	name=identifier ('=' value=expression)?
;

integer_type:
	(signed?='signed'|unsigned?='unsigned')? atom_type=integer_atom_type ('[' lhs=expression ':' rhs=expression ']')? (inside=type_inside_clause)?
; 

integer_atom_type:
	'int'|'bit'
;

type_inside_clause:
	'inside' '{' domain=open_range_list '}'
;

open_range_list:
	ranges+=open_range_value (',' ranges+=open_range_value)*
;

open_range_value:
	lhs=expression | '[' lhs=expression (':'|'..') rhs=expression ']'
;

/********************************************************************
 * Heading: Constraints
 ********************************************************************/
constraint_declaration:
	'constraint' name=identifier ('dynamic')? '{'
	body+=constraint_body_item*
	'}'
;

constraint_body_item:
	expression_or_dist_item |
	foreach_constraint_item |
	if_constraint_item		|
	path_constraint_item
;

expression_or_dist_item:
	expression (
		('->' impl_constraint=constraint_set)						|
		('dist' '{' items+=dist_item (',' items+=dist_item)* '}') 	|
		';'
	)
;

dist_item:
	range=value_range (weight=dist_weight)?
;

dist_weight:
	':=' expression |
	':/' expression
;

value_range:
	lhs=expression |
	'[' lhs=expression (':'|'..') rhs=expression ']'
;

if_constraint_item:
	'if' '(' if_expr=expression ')' true_case=constraint_set (=> 'else' false_set=constraint_set )? 
;

foreach_constraint_item:
	'foreach' '(' expr=expression ')' body=constraint_set
;

constraint_set:
	items+=constraint_body_item | items+=constraint_block
;

constraint_block:
	'{' {constraint_set} items+=constraint_body_item* '}'
;

path_constraint_item:
	'{' src=path_constraint_pattern '}' '->' '{' dst=path_constraint_pattern '}'
;

path_constraint_pattern:
	path_constraint_wildcard_seq ({path_constraint_pattern_item.left=current} ',' right=path_constraint_wildcard_seq)*
;

path_constraint_wildcard_seq:
	start=hierarchical_id ('..' end=hierarchical_id)?
;

/********************************************************************
 * Heading: Bins and Bin Schemes
 ********************************************************************/
 bin_or_scheme_declaration:
 	bins_declaration       |
 	bin_scheme_declaration
 ;
 
 bins_declaration:
 	'bins' item=variable_identifier name=identifier bins=bin_specification ';'
 ;
 
 bin_specification:
 	items+=bin_specifier (items+=bin_specifier)* (bin_wildcard)?
 ;
 
 bin_specifier:
 	explicit_bin_value |
 	explicit_bin_range |
 	bin_range_divide   |
 	bin_range_size
 ;
 
 explicit_bin_value:
 	'[' constant ']'
 ;
 
 explicit_bin_range:
 	'[' low=constant '..' high=constant ']'
 ;
 
 bin_range_divide:
 	explicit_bin_range '/' div=constant
 ;
 
 bin_range_size:
 	explicit_bin_range ':' size=constant
 ;
 
 bin_wildcard:
 	'[' '*' ']'
 ;
 
 bin_scheme_declaration:
 	'bin_scheme' name=identifier '{' items+=bin_scheme_specifier (items+=bin_scheme_specifier)* '}' 
 ;
 
 bin_scheme_specifier:
 	name=identifier (bin_identifier | spec=bin_specifier) ';'
 ;
 
/********************************************************************
 * Heading: Coverspec
 ********************************************************************/

coverspec_declaration:
	'coverspec' name=identifier '(' ports+=coverspec_port (',' ports+=coverspec_port)* ')' '{'
		body_items+=coverspec_body_item*
	'}'
;

coverspec_port:
	type=data_type name=identifier
;

coverspec_body_item:
	coverspec_option		|
	coverspec_coverpoint	|
	coverspec_cross			|
	coverspec_paths			|
	constraint_declaration
;

coverspec_option:
	'option' '.' option=identifier '=' value=constant_expression ';'
;


coverspec_coverpoint:
	name=ID ':' 'coverpoint' target=hierarchical_id 
		(
			( '{' body_items+=coverspec_coverpoint_body_item* '}') | ';'
		)
;

coverspec_coverpoint_body_item:
	coverspec_option			|
	coverspec_coverpoint_binspec
;

coverspec_coverpoint_binspec:
	'bins' name=identifier bins=bin_specification ';'
;

coverspec_cross_body_item:
	coverspec_option
;

coverspec_cross:
	name=ID ':' 'cross' targets+=hierarchical_id (',' targets+=hierarchical_id)*
		(
			( '{' body_items+=coverspec_cross_body_item* '}') | ';'
		)
;

coverspec_paths_body_item:
	coverspec_option
;

coverspec_paths:
	name=ID ':' 'paths' start=hierarchical_id ',' (stop+=hierarchical_id | '{' stop+=hierarchical_id (',' stop+=hierarchical_id)*)
		(
			( '{' body_items+=coverspec_paths_body_item* '}') | ';'
		)
;

 
 
/********************************************************************
 * Heading: Expressions
 ********************************************************************/

/** 
 * Note: ANTLR doesn't support left-recursion in grammar productions.
 * Consequently, we can't say something like: 
 *   expression := expression '+' expression.
 * 
 * The expression grammar below is refactored to eliminate left 
 * recursion and properly implement operator precedence
 */
// TODO: should make special-purpose declaration 
constant_expression: expression;

expression: 
	condition_expr
	;
	
condition_expr returns expression:
	logical_or_expr ({condition_expr.left=current} '?' true_expr=logical_or_expr ':' false_expr=logical_or_expr)*
	; 

logical_or_expr returns expression:
	logical_and_expr ({logical_or_expr.left=current} '&&' right=logical_and_expr)*
;

logical_and_expr returns expression:
	binary_or_expr ({logical_and_expr.left=current} '||' right=binary_or_expr)*	
;

binary_or_expr returns expression:
	binary_xor_expr ({binary_or_expr.left=current} '|' right=binary_xor_expr)*
;

binary_xor_expr returns expression:
	binary_and_expr ({binary_xor_expr.left=current} '^' right=binary_and_expr)*
;

binary_and_expr returns expression:
	logical_equality_expr ({binary_and_expr.left=current} '&' right=logical_equality_expr)*
;

logical_equality_expr returns expression:
	logical_inequality_expr ({logical_equality_expr.left=current} op=eq_neq_op right=logical_inequality_expr)*
;

logical_inequality_expr returns expression:
	binary_shift_expr ({logical_inequality_expr.left=current} 
		((op=('<'|'<='|'>'|'>=') right=binary_shift_expr) | (op='inside' '{' right=open_range_list '}'))
	)*
;

binary_shift_expr returns expression:
	binary_add_sub_expr ({binary_shift_expr.left=current} op=shift_op right=binary_add_sub_expr)*
;

binary_add_sub_expr returns expression:
	binary_mul_div_mod_expr ({binary_add_sub_expr.left=current} op=add_sub_op right=binary_mul_div_mod_expr)*
;

binary_mul_div_mod_expr returns expression:
	binary_exp_expr ({binary_mul_div_mod_expr.left=current} op=mul_div_mod_op right=binary_exp_expr)*
;

binary_exp_expr returns expression:
	unary_expr ({binary_exp_expr.left=current} '**' right=unary_expr)*
;

unary_op: '+' | '-' | '!' | '~' | '&' | '|' | '^';

eq_neq_op: '==' | '!=';

shift_op: '<<' | '>>';

add_sub_op: '+' | '-';

mul_div_mod_op: '*' | '/' | '%';

unary_expr returns expression:
	(unary_op)? primary
;

primary: //; returns expression:
	number 			| 
	paren_expr 		|
	variable_ref
;

paren_expr:
	'(' expr=expression ')'
;

variable_ref:
	expr=hierarchical_id ('[' lhs=expression (':' rhs=expression)? ']')?
;


//graph_data_declaration:
//	('rand')? type=[data_type] names+=identifier ('(' portmaps+=port_map (',' portmaps+=port_map)* ')')? 
//		(',' names+=identifier ('(' portmaps+=port_map (',' portmaps+=port_map)* ')')?)* ';'
//;
//port_map:
//	'.' port=identifier '(' map=hierarchical_id ')'
//;


/********************************************************************
 * Heading: Identifiers and Literals
 ********************************************************************/
graph_identifier: identifier;
struct_identifier: identifier;
interface_identifier: identifier;
graph_or_struct_identifier: identifier;
graph_struct_interface_identiifer: identifier;
port_identifier: identifier;
variable_identifier: identifier;
bin_identifier: identifier;
constant: number | identifier;
package_identifier: hierarchical_id;

identifier: ID | ESCAPED_ID;

hierarchical_id:
	path+=identifier ('.' path+=identifier)*
;

package_import_pattern:
	package=hierarchical_id (wildcard?='.' '*')?
;

interface_action_id:
	ifc=identifier '.' action=identifier
;

/********************************************************************
 * Heading: Numbers
 ********************************************************************/
number:
	value=based_hex_number 		|
	value=based_dec_number		|
	value=based_bin_number		|
	value=based_oct_number		|
	value=dec_number			|
	value=oct_number
;


based_hex_number: size=DEC_LITERAL? value=BASED_HEX_LITERAL;
terminal BASED_HEX_LITERAL: '\'' ('s'|'S')? ('h'|'H'|'0x') ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F'|'_')*;

based_dec_number: size=DEC_LITERAL? value=BASED_DEC_LITERAL;
terminal BASED_DEC_LITERAL: '\'' ('s'|'S')? ('d'|'D') ('0'..'9') ('0'..'9'|'_')*;

dec_number: value=DEC_LITERAL;
terminal DEC_LITERAL: ('1'..'9') ('0'..'9'|'_')*;

based_bin_number: size=DEC_LITERAL? value=BASED_BIN_LITERAL;
terminal BASED_BIN_LITERAL: '\'' ('s'|'S')? ('b'|'B') (('0'..'1') ('0'..'1'|'_')*);

based_oct_number: size=DEC_LITERAL? value=BASED_OCT_LITERAL;
terminal BASED_OCT_LITERAL: '\'' ('s'|'S')? ('o'|'O') (('0'..'7') ('0'..'7'|'_')*);


oct_number: value=OCT_LITERAL;
terminal OCT_LITERAL: '0' ('0'..'7')*;


/**
 * Exclude:
 */
terminal WS			: (' '|'\t'|'\r'|'\n')+;

/********************************************************************
 * Heading: Comments
 ********************************************************************/
 
/**
 * BNF: SL_COMMENT ::= <kw>//</kw>{any_ASCII_character_except_newline}\n 
 */
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

/**
 * BNF: ML_COMMENT ::= <kw>/*</kw>{any_ASCII_character}<kw>/*</kw>
 */
terminal ML_COMMENT	: '/*' -> '*/';

//terminal STRING	: 
//			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' 
//		; 

terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

/**
 * BNF: ESCAPED_ID ::= <kw>\</kw>{any_ASCII_character_except_whitespace} whitespace
 */
terminal ESCAPED_ID: '\\' !(' '|'\t'|'\r'|'\n')+ ;

